In file included from OptionPricing.h:7:0,
                 from test.cpp:5:
../FangOost/FangOost.h: In instantiation of ‘auto fangoost::computeInv(const Index&, const Index&, const Number&, const Number&, CF&&, VK&&) [with Index = int; Number = double; CF = ____C_A_T_C_H____T_E_S_T____62()::<lambda(const auto:52&)>&; VK = std::vector<double>]’:
OptionPricing.h:116:36:   required from ‘auto optionprice::FangOost(const Index&, const Index&, const Number&, const Number&, const Number&, const Number&, CF&&) [with Index = int; Number = double; CF = ____C_A_T_C_H____T_E_S_T____62()::<lambda(const auto:52&)>&]’
OptionPricing.h:136:24:   required from ‘auto optionprice::FangOost(const Index&, const Index&, const Number&, const Number&, const Number&, CF&&) [with Index = int; Number = double; CF = ____C_A_T_C_H____T_E_S_T____62()::<lambda(const auto:52&)>&]’
test.cpp:92:82:   required from here
../FangOost/FangOost.h:103:34: error: ‘computeConvolution’ was not declared in this scope, and no declarations were found by argument-dependent lookup at the point of instantiation [-fpermissive]
         return computeConvolution(xDiscrete, uDiscrete, xMin, xMax, halfFirstIndex(futilities::for_each_parallel(0, uDiscrete, [&](const auto& index){
                                  ^
../FangOost/FangOost.h:166:10: note: ‘template<class Index, class Number, class CF, class VK> auto fangoost::computeConvolution(const Index&, const Index&, const Number&, const Number&, CF&&, VK&&)’ declared here, later in the translation unit
     auto computeConvolution(const Index& xDiscrete, const Index& uDiscrete, const Number& xMin, const Number& xMax, CF&& discreteCF, VK&& vK){ //vk as defined in fang oosterlee
          ^
../FangOost/FangOost.h:103:34: error: use of ‘auto fangoost::computeConvolution(const Index&, const Index&, const Number&, const Number&, CF&&, VK&&) [with Index = int; Number = double; CF = std::vector<double>; VK = std::vector<double>&]’ before deduction of ‘auto’
         return computeConvolution(xDiscrete, uDiscrete, xMin, xMax, halfFirstIndex(futilities::for_each_parallel(0, uDiscrete, [&](const auto& index){
                                  ^
test.cpp: In function ‘void ____C_A_T_C_H____T_E_S_T____62()’:
test.cpp:92:82: error: ‘void myOptionsPrice’ has incomplete type
     auto myOptionsPrice=optionprice::FangOost(numX, numU, xmax, K, discount, BSCF);
                                                                                  ^
