In file included from test.cpp:11:0:
OptionCalibration.h: In instantiation of ‘optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&)::<lambda(const auto:176& ...)> [with auto:176 = {double}; PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1173()::<lambda(const auto:238&, const auto:239&)>; DiscreteU = std::vector<double>]’:
test.cpp:1201:38:   required from here
OptionCalibration.h:114:18: error: no match for ‘operator/’ (operand types are ‘std::complex<double>’ and ‘std::vector<double>::size_type {aka long unsigned int}’)
                 )/uArray.size()           
                  ^
In file included from ../GaussNewton/Newton.h:10:0,
                 from OptionCalibration.h:9,
                 from test.cpp:11:
../AutoDiff/AutoDiff.h:172:6: note: candidate: template<class W, class Z> auto operator/(const AutoDiff<W>&, const AutoDiff<Z>&)
 auto operator/(const AutoDiff<W> &left, const AutoDiff<Z> &right){
      ^
../AutoDiff/AutoDiff.h:172:6: note:   template argument deduction/substitution failed:
In file included from test.cpp:11:0:
OptionCalibration.h:114:18: note:   ‘std::complex<double>’ is not derived from ‘const AutoDiff<W>’
                 )/uArray.size()           
                  ^
In file included from ../GaussNewton/Newton.h:10:0,
                 from OptionCalibration.h:9,
                 from test.cpp:11:
../AutoDiff/AutoDiff.h:176:6: note: candidate: template<class W, class Z> auto operator/(const AutoDiff<W>&, const Z&)
 auto operator/(const AutoDiff<W> &left, const Z& right){
      ^
../AutoDiff/AutoDiff.h:176:6: note:   template argument deduction/substitution failed:
In file included from test.cpp:11:0:
OptionCalibration.h:114:18: note:   ‘std::complex<double>’ is not derived from ‘const AutoDiff<W>’
                 )/uArray.size()           
                  ^
In file included from ../GaussNewton/Newton.h:10:0,
                 from OptionCalibration.h:9,
                 from test.cpp:11:
../AutoDiff/AutoDiff.h:180:6: note: candidate: template<class W, class Z> auto operator/(const W&, const AutoDiff<Z>&)
 auto operator/(const W& left, const AutoDiff<Z> &right){
      ^
../AutoDiff/AutoDiff.h:180:6: note:   template argument deduction/substitution failed:
In file included from test.cpp:11:0:
OptionCalibration.h:114:18: note:   mismatched types ‘const AutoDiff<Z>’ and ‘std::vector<double>::size_type {aka long unsigned int}’
                 )/uArray.size()           
                  ^
In file included from OptionPricing.h:3:0,
                 from test.cpp:5:
/usr/include/c++/5/complex:434:5: note: candidate: template<class _Tp> std::complex<_Tp> std::operator/(const _Tp&, const std::complex<_Tp>&)
     operator/(const _Tp& __x, const complex<_Tp>& __y)
     ^
/usr/include/c++/5/complex:434:5: note:   template argument deduction/substitution failed:
In file included from test.cpp:11:0:
OptionCalibration.h:114:18: note:   mismatched types ‘const std::complex<_Tp>’ and ‘std::vector<double>::size_type {aka long unsigned int}’
                 )/uArray.size()           
                  ^
In file included from OptionPricing.h:3:0,
                 from test.cpp:5:
/usr/include/c++/5/complex:425:5: note: candidate: template<class _Tp> std::complex<_Tp> std::operator/(const std::complex<_Tp>&, const _Tp&)
     operator/(const complex<_Tp>& __x, const _Tp& __y)
     ^
/usr/include/c++/5/complex:425:5: note:   template argument deduction/substitution failed:
In file included from test.cpp:11:0:
OptionCalibration.h:114:18: note:   deduced conflicting types for parameter ‘const _Tp’ (‘double’ and ‘std::vector<double>::size_type {aka long unsigned int}’)
                 )/uArray.size()           
                  ^
In file included from OptionPricing.h:3:0,
                 from test.cpp:5:
/usr/include/c++/5/complex:416:5: note: candidate: template<class _Tp> std::complex<_Tp> std::operator/(const std::complex<_Tp>&, const std::complex<_Tp>&)
     operator/(const complex<_Tp>& __x, const complex<_Tp>& __y)
     ^
/usr/include/c++/5/complex:416:5: note:   template argument deduction/substitution failed:
In file included from test.cpp:11:0:
OptionCalibration.h:114:18: note:   mismatched types ‘const std::complex<_Tp>’ and ‘std::vector<double>::size_type {aka long unsigned int}’
                 )/uArray.size()           
                  ^
test.cpp: In function ‘void ____C_A_T_C_H____T_E_S_T____1173()’:
test.cpp:1201:28: error: no match for ‘operator<<’ (operand types are ‘std::basic_ostream<char>’ and ‘void’)
     std::cout<<"guess=.4: "<<objFn(.4)<<std::endl;
                            ^
In file included from /usr/include/c++/5/istream:39:0,
                 from /usr/include/c++/5/sstream:38,
                 from ../FunctionalUtilities/catch.hpp:74,
                 from test.cpp:2:
/usr/include/c++/5/ostream:108:7: note: candidate: std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(std::basic_ostream<_CharT, _Traits>::__ostream_type& (*)(std::basic_ostream<_CharT, _Traits>::__ostream_type&)) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]
       operator<<(__ostream_type& (*__pf)(__ostream_type&))
       ^
/usr/include/c++/5/ostream:108:7: note:   no known conversion for argument 1 from ‘void’ to ‘std::basic_ostream<char>::__ostream_type& (*)(std::basic_ostream<char>::__ostream_type&) {aka std::basic_ostream<char>& (*)(std::basic_ostream<char>&)}’
/usr/include/c++/5/ostream:117:7: note: candidate: std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(std::basic_ostream<_CharT, _Traits>::__ios_type& (*)(std::basic_ostream<_CharT, _Traits>::__ios_type&)) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>; std::basic_ostream<_CharT, _Traits>::__ios_type = std::basic_ios<char>]
       operator<<(__ios_type& (*__pf)(__ios_type&))
       ^
/usr/include/c++/5/ostream:117:7: note:   no known conversion for argument 1 from ‘void’ to ‘std::basic_ostream<char>::__ios_type& (*)(std::basic_ostream<char>::__ios_type&) {aka std::basic_ios<char>& (*)(std::basic_ios<char>&)}’
/usr/include/c++/5/ostream:127:7: note: candidate: std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(std::ios_base& (*)(std::ios_base&)) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]
       operator<<(ios_base& (*__pf) (ios_base&))
       ^
/usr/include/c++/5/ostream:127:7: note:   no known conversion for argument 1 from ‘void’ to ‘std::ios_base& (*)(std::ios_base&)’
/usr/include/c++/5/ostream:166:7: note: candidate: std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(long int) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]
       operator<<(long __n)
       ^
/usr/include/c++/5/ostream:166:7: note:   no known conversion for argument 1 from ‘void’ to ‘long int’
/usr/include/c++/5/ostream:170:7: note: candidate: std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(long unsigned int) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]
       operator<<(unsigned long __n)
       ^
/usr/include/c++/5/ostream:170:7: note:   no known conversion for argument 1 from ‘void’ to ‘long unsigned int’
/usr/include/c++/5/ostream:174:7: note: candidate: std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(bool) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]
       operator<<(bool __n)
       ^
/usr/include/c++/5/ostream:174:7: note:   no known conversion for argument 1 from ‘void’ to ‘bool’
In file included from /usr/include/c++/5/ostream:638:0,
                 from /usr/include/c++/5/istream:39,
                 from /usr/include/c++/5/sstream:38,
                 from ../FunctionalUtilities/catch.hpp:74,
                 from test.cpp:2:
/usr/include/c++/5/bits/ostream.tcc:91:5: note: candidate: std::basic_ostream<_CharT, _Traits>& std::basic_ostream<_CharT, _Traits>::operator<<(short int) [with _CharT = char; _Traits = std::char_traits<char>]
     basic_ostream<_CharT, _Traits>::
     ^
/usr/include/c++/5/bits/ostream.tcc:91:5: note:   no known conversion for argument 1 from ‘void’ to ‘short int’
In file included from /usr/include/c++/5/istream:39:0,
                 from /usr/include/c++/5/sstream:38,
                 from ../FunctionalUtilities/catch.hpp:74,
                 from test.cpp:2:
/usr/include/c++/5/ostream:181:7: note: candidate: std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(short unsigned int) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]
       operator<<(unsigned short __n)
       ^
/usr/include/c++/5/ostream:181:7: note:   no known conversion for argument 1 from ‘void’ to ‘short unsigned int’
In file included from /usr/include/c++/5/ostream:638:0,
                 from /usr/include/c++/5/istream:39,
                 from /usr/include/c++/5/sstream:38,
                 from ../FunctionalUtilities/catch.hpp:74,
                 from test.cpp:2:
/usr/include/c++/5/bits/ostream.tcc:105:5: note: candidate: std::basic_ostream<_CharT, _Traits>& std::basic_ostream<_CharT, _Traits>::operator<<(int) [with _CharT = char; _Traits = std::char_traits<char>]
     basic_ostream<_CharT, _Traits>::
     ^
/usr/include/c++/5/bits/ostream.tcc:105:5: note:   no known conversion for argument 1 from ‘void’ to ‘int’
In file included from /usr/include/c++/5/istream:39:0,
                 from /usr/include/c++/5/sstream:38,
                 from ../FunctionalUtilities/catch.hpp:74,
                 from test.cpp:2:
/usr/include/c++/5/ostream:192:7: note: candidate: std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(unsigned int) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]
       operator<<(unsigned int __n)
       ^
/usr/include/c++/5/ostream:192:7: note:   no known conversion for argument 1 from ‘void’ to ‘unsigned int’
/usr/include/c++/5/ostream:201:7: note: candidate: std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(long long int) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]
       operator<<(long long __n)
       ^
/usr/include/c++/5/ostream:201:7: note:   no known conversion for argument 1 from ‘void’ to ‘long long int’
/usr/include/c++/5/ostream:205:7: note: candidate: std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(long long unsigned int) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]
       operator<<(unsigned long long __n)
       ^
/usr/include/c++/5/ostream:205:7: note:   no known conversion for argument 1 from ‘void’ to ‘long long unsigned int’
/usr/include/c++/5/ostream:220:7: note: candidate: std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(double) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]
       operator<<(double __f)
       ^
/usr/include/c++/5/ostream:220:7: note:   no known conversion for argument 1 from ‘void’ to ‘double’
/usr/include/c++/5/ostream:224:7: note: candidate: std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(float) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]
       operator<<(float __f)
       ^
/usr/include/c++/5/ostream:224:7: note:   no known conversion for argument 1 from ‘void’ to ‘float’
/usr/include/c++/5/ostream:232:7: note: candidate: std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(long double) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]
       operator<<(long double __f)
       ^
/usr/include/c++/5/ostream:232:7: note:   no known conversion for argument 1 from ‘void’ to ‘long double’
/usr/include/c++/5/ostream:245:7: note: candidate: std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(const void*) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]
       operator<<(const void* __p)
       ^
/usr/include/c++/5/ostream:245:7: note:   no known conversion for argument 1 from ‘void’ to ‘const void*’
In file included from /usr/include/c++/5/ostream:638:0,
                 from /usr/include/c++/5/istream:39,
                 from /usr/include/c++/5/sstream:38,
                 from ../FunctionalUtilities/catch.hpp:74,
                 from test.cpp:2:
/usr/include/c++/5/bits/ostream.tcc:119:5: note: candidate: std::basic_ostream<_CharT, _Traits>& std::basic_ostream<_CharT, _Traits>::operator<<(std::basic_ostream<_CharT, _Traits>::__streambuf_type*) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__streambuf_type = std::basic_streambuf<char>]
     basic_ostream<_CharT, _Traits>::
     ^
/usr/include/c++/5/bits/ostream.tcc:119:5: note:   no known conversion for argument 1 from ‘void’ to ‘std::basic_ostream<char>::__streambuf_type* {aka std::basic_streambuf<char>*}’
In file included from OptionPricing.h:3:0,
                 from test.cpp:5:
/usr/include/c++/5/complex:526:5: note: candidate: template<class _Tp, class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::complex<_Tp>&)
     operator<<(basic_ostream<_CharT, _Traits>& __os, const complex<_Tp>& __x)
     ^
/usr/include/c++/5/complex:526:5: note:   template argument deduction/substitution failed:
test.cpp:1201:38: note:   mismatched types ‘const std::complex<_Tp>’ and ‘void’
     std::cout<<"guess=.4: "<<objFn(.4)<<std::endl;
                                      ^
In file included from ../FunctionalUtilities/catch.hpp:1503:0,
                 from test.cpp:2:
/usr/include/c++/5/iomanip:363:5: note: candidate: template<class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, std::_Put_time<_CharT>)
     operator<<(basic_ostream<_CharT, _Traits>& __os, _Put_time<_CharT> __f)
     ^
/usr/include/c++/5/iomanip:363:5: note:   template argument deduction/substitution failed:
test.cpp:1201:38: note:   mismatched types ‘std::_Put_time<_CharT>’ and ‘void’
     std::cout<<"guess=.4: "<<objFn(.4)<<std::endl;
                                      ^
In file included from ../FunctionalUtilities/catch.hpp:1503:0,
                 from test.cpp:2:
/usr/include/c++/5/iomanip:311:5: note: candidate: template<class _CharT, class _Traits, class _MoneyT> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, std::_Put_money<_MoneyT>)
     operator<<(basic_ostream<_CharT, _Traits>& __os, _Put_money<_MoneyT> __f)
     ^
/usr/include/c++/5/iomanip:311:5: note:   template argument deduction/substitution failed:
test.cpp:1201:38: note:   mismatched types ‘std::_Put_money<_MoneyT>’ and ‘void’
     std::cout<<"guess=.4: "<<objFn(.4)<<std::endl;
                                      ^
In file included from ../FunctionalUtilities/catch.hpp:1503:0,
                 from test.cpp:2:
/usr/include/c++/5/iomanip:238:5: note: candidate: template<class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, std::_Setw)
     operator<<(basic_ostream<_CharT, _Traits>& __os, _Setw __f)
     ^
/usr/include/c++/5/iomanip:238:5: note:   template argument deduction/substitution failed:
test.cpp:1201:35: note:   cannot convert ‘objFn.optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&)::<lambda(const auto:176& ...)> [with auto:176 = {double}; PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1173()::<lambda(const auto:238&, const auto:239&)>; DiscreteU = std::vector<double>](4.0000000000000002e-1)’ (type ‘void’) to type ‘std::_Setw’
     std::cout<<"guess=.4: "<<objFn(.4)<<std::endl;
                                   ^
In file included from ../FunctionalUtilities/catch.hpp:1503:0,
                 from test.cpp:2:
/usr/include/c++/5/iomanip:208:5: note: candidate: template<class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, std::_Setprecision)
     operator<<(basic_ostream<_CharT, _Traits>& __os, _Setprecision __f)
     ^
/usr/include/c++/5/iomanip:208:5: note:   template argument deduction/substitution failed:
test.cpp:1201:35: note:   cannot convert ‘objFn.optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&)::<lambda(const auto:176& ...)> [with auto:176 = {double}; PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1173()::<lambda(const auto:238&, const auto:239&)>; DiscreteU = std::vector<double>](4.0000000000000002e-1)’ (type ‘void’) to type ‘std::_Setprecision’
     std::cout<<"guess=.4: "<<objFn(.4)<<std::endl;
                                   ^
In file included from ../FunctionalUtilities/catch.hpp:1503:0,
                 from test.cpp:2:
/usr/include/c++/5/iomanip:178:5: note: candidate: template<class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, std::_Setfill<_CharT>)
     operator<<(basic_ostream<_CharT, _Traits>& __os, _Setfill<_CharT> __f)
     ^
/usr/include/c++/5/iomanip:178:5: note:   template argument deduction/substitution failed:
test.cpp:1201:38: note:   mismatched types ‘std::_Setfill<_CharT>’ and ‘void’
     std::cout<<"guess=.4: "<<objFn(.4)<<std::endl;
                                      ^
In file included from ../FunctionalUtilities/catch.hpp:1503:0,
                 from test.cpp:2:
/usr/include/c++/5/iomanip:143:5: note: candidate: template<class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, std::_Setbase)
     operator<<(basic_ostream<_CharT, _Traits>& __os, _Setbase __f)
     ^
/usr/include/c++/5/iomanip:143:5: note:   template argument deduction/substitution failed:
test.cpp:1201:35: note:   cannot convert ‘objFn.optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&)::<lambda(const auto:176& ...)> [with auto:176 = {double}; PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1173()::<lambda(const auto:238&, const auto:239&)>; DiscreteU = std::vector<double>](4.0000000000000002e-1)’ (type ‘void’) to type ‘std::_Setbase’
     std::cout<<"guess=.4: "<<objFn(.4)<<std::endl;
                                   ^
In file included from ../FunctionalUtilities/catch.hpp:1503:0,
                 from test.cpp:2:
/usr/include/c++/5/iomanip:109:5: note: candidate: template<class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, std::_Setiosflags)
     operator<<(basic_ostream<_CharT, _Traits>& __os, _Setiosflags __f)
     ^
/usr/include/c++/5/iomanip:109:5: note:   template argument deduction/substitution failed:
test.cpp:1201:35: note:   cannot convert ‘objFn.optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&)::<lambda(const auto:176& ...)> [with auto:176 = {double}; PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1173()::<lambda(const auto:238&, const auto:239&)>; DiscreteU = std::vector<double>](4.0000000000000002e-1)’ (type ‘void’) to type ‘std::_Setiosflags’
     std::cout<<"guess=.4: "<<objFn(.4)<<std::endl;
                                   ^
In file included from ../FunctionalUtilities/catch.hpp:1503:0,
                 from test.cpp:2:
/usr/include/c++/5/iomanip:79:5: note: candidate: template<class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, std::_Resetiosflags)
     operator<<(basic_ostream<_CharT, _Traits>& __os, _Resetiosflags __f)
     ^
/usr/include/c++/5/iomanip:79:5: note:   template argument deduction/substitution failed:
test.cpp:1201:35: note:   cannot convert ‘objFn.optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&)::<lambda(const auto:176& ...)> [with auto:176 = {double}; PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1173()::<lambda(const auto:238&, const auto:239&)>; DiscreteU = std::vector<double>](4.0000000000000002e-1)’ (type ‘void’) to type ‘std::_Resetiosflags’
     std::cout<<"guess=.4: "<<objFn(.4)<<std::endl;
                                   ^
In file included from /usr/include/c++/5/memory:82:0,
                 from ../FunctionalUtilities/catch.hpp:568,
                 from test.cpp:2:
/usr/include/c++/5/bits/shared_ptr.h:66:5: note: candidate: template<class _Ch, class _Tr, class _Tp, __gnu_cxx::_Lock_policy _Lp> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::__shared_ptr<_Tp, _Lp>&)
     operator<<(std::basic_ostream<_Ch, _Tr>& __os,
     ^
/usr/include/c++/5/bits/shared_ptr.h:66:5: note:   template argument deduction/substitution failed:
test.cpp:1201:38: note:   mismatched types ‘const std::__shared_ptr<_Tp, _Lp>’ and ‘void’
     std::cout<<"guess=.4: "<<objFn(.4)<<std::endl;
                                      ^
In file included from /usr/include/c++/5/random:51:0,
                 from /usr/include/c++/5/bits/stl_algo.h:66,
                 from /usr/include/c++/5/algorithm:62,
                 from ../FunctionalUtilities/catch.hpp:76,
                 from test.cpp:2:
/usr/include/c++/5/bits/random.tcc:3160:5: note: candidate: template<class _RealType, class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::piecewise_linear_distribution<_RealType>&)
     operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     ^
/usr/include/c++/5/bits/random.tcc:3160:5: note:   template argument deduction/substitution failed:
test.cpp:1201:38: note:   mismatched types ‘const std::piecewise_linear_distribution<_RealType>’ and ‘void’
     std::cout<<"guess=.4: "<<objFn(.4)<<std::endl;
                                      ^
In file included from /usr/include/c++/5/random:51:0,
                 from /usr/include/c++/5/bits/stl_algo.h:66,
                 from /usr/include/c++/5/algorithm:62,
                 from ../FunctionalUtilities/catch.hpp:76,
                 from test.cpp:2:
/usr/include/c++/5/bits/random.tcc:2944:5: note: candidate: template<class _RealType, class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::piecewise_constant_distribution<_RealType>&)
     operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     ^
/usr/include/c++/5/bits/random.tcc:2944:5: note:   template argument deduction/substitution failed:
test.cpp:1201:38: note:   mismatched types ‘const std::piecewise_constant_distribution<_RealType>’ and ‘void’
     std::cout<<"guess=.4: "<<objFn(.4)<<std::endl;
                                      ^
In file included from /usr/include/c++/5/random:51:0,
                 from /usr/include/c++/5/bits/stl_algo.h:66,
                 from /usr/include/c++/5/algorithm:62,
                 from ../FunctionalUtilities/catch.hpp:76,
                 from test.cpp:2:
/usr/include/c++/5/bits/random.tcc:2734:5: note: candidate: template<class _IntType, class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::discrete_distribution<_IntType>&)
     operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     ^
/usr/include/c++/5/bits/random.tcc:2734:5: note:   template argument deduction/substitution failed:
test.cpp:1201:38: note:   mismatched types ‘const std::discrete_distribution<_IntType>’ and ‘void’
     std::cout<<"guess=.4: "<<objFn(.4)<<std::endl;
                                      ^
In file included from /usr/include/c++/5/random:51:0,
                 from /usr/include/c++/5/bits/stl_algo.h:66,
                 from /usr/include/c++/5/algorithm:62,
                 from ../FunctionalUtilities/catch.hpp:76,
                 from test.cpp:2:
/usr/include/c++/5/bits/random.tcc:2275:5: note: candidate: template<class _RealType, class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::student_t_distribution<_RealType>&)
     operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     ^
/usr/include/c++/5/bits/random.tcc:2275:5: note:   template argument deduction/substitution failed:
test.cpp:1201:38: note:   mismatched types ‘const std::student_t_distribution<_RealType>’ and ‘void’
     std::cout<<"guess=.4: "<<objFn(.4)<<std::endl;
                                      ^
In file included from /usr/include/c++/5/random:51:0,
                 from /usr/include/c++/5/bits/stl_algo.h:66,
                 from /usr/include/c++/5/algorithm:62,
                 from ../FunctionalUtilities/catch.hpp:76,
                 from test.cpp:2:
/usr/include/c++/5/bits/random.tcc:2200:5: note: candidate: template<class _RealType, class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::fisher_f_distribution<_RealType>&)
     operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     ^
/usr/include/c++/5/bits/random.tcc:2200:5: note:   template argument deduction/substitution failed:
test.cpp:1201:38: note:   mismatched types ‘const std::fisher_f_distribution<_RealType>’ and ‘void’
     std::cout<<"guess=.4: "<<objFn(.4)<<std::endl;
                                      ^
In file included from /usr/include/c++/5/random:51:0,
                 from /usr/include/c++/5/bits/stl_algo.h:66,
                 from /usr/include/c++/5/algorithm:62,
                 from ../FunctionalUtilities/catch.hpp:76,
                 from test.cpp:2:
/usr/include/c++/5/bits/random.tcc:2036:5: note: candidate: template<class _RealType, class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::chi_squared_distribution<_RealType>&)
     operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     ^
/usr/include/c++/5/bits/random.tcc:2036:5: note:   template argument deduction/substitution failed:
test.cpp:1201:38: note:   mismatched types ‘const std::chi_squared_distribution<_RealType>’ and ‘void’
     std::cout<<"guess=.4: "<<objFn(.4)<<std::endl;
                                      ^
In file included from /usr/include/c++/5/random:51:0,
                 from /usr/include/c++/5/bits/stl_algo.h:66,
                 from /usr/include/c++/5/algorithm:62,
                 from ../FunctionalUtilities/catch.hpp:76,
                 from test.cpp:2:
/usr/include/c++/5/bits/random.tcc:1963:5: note: candidate: template<class _RealType, class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::lognormal_distribution<_RealType>&)
     operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     ^
/usr/include/c++/5/bits/random.tcc:1963:5: note:   template argument deduction/substitution failed:
test.cpp:1201:38: note:   mismatched types ‘const std::lognormal_distribution<_RealType>’ and ‘void’
     std::cout<<"guess=.4: "<<objFn(.4)<<std::endl;
                                      ^
In file included from /usr/include/c++/5/random:51:0,
                 from /usr/include/c++/5/bits/stl_algo.h:66,
                 from /usr/include/c++/5/algorithm:62,
                 from ../FunctionalUtilities/catch.hpp:76,
                 from test.cpp:2:
/usr/include/c++/5/bits/random.tcc:1667:5: note: candidate: template<class _IntType, class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::binomial_distribution<_IntType>&)
     operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     ^
/usr/include/c++/5/bits/random.tcc:1667:5: note:   template argument deduction/substitution failed:
test.cpp:1201:38: note:   mismatched types ‘const std::binomial_distribution<_IntType>’ and ‘void’
     std::cout<<"guess=.4: "<<objFn(.4)<<std::endl;
                                      ^
In file included from /usr/include/c++/5/random:51:0,
                 from /usr/include/c++/5/bits/stl_algo.h:66,
                 from /usr/include/c++/5/algorithm:62,
                 from ../FunctionalUtilities/catch.hpp:76,
                 from test.cpp:2:
/usr/include/c++/5/bits/random.tcc:1400:5: note: candidate: template<class _IntType, class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::poisson_distribution<_IntType>&)
     operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     ^
/usr/include/c++/5/bits/random.tcc:1400:5: note:   template argument deduction/substitution failed:
test.cpp:1201:38: note:   mismatched types ‘const std::poisson_distribution<_IntType>’ and ‘void’
     std::cout<<"guess=.4: "<<objFn(.4)<<std::endl;
                                      ^
In file included from /usr/include/c++/5/random:51:0,
                 from /usr/include/c++/5/bits/stl_algo.h:66,
                 from /usr/include/c++/5/algorithm:62,
                 from ../FunctionalUtilities/catch.hpp:76,
                 from test.cpp:2:
/usr/include/c++/5/bits/random.tcc:1195:5: note: candidate: template<class _IntType, class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::negative_binomial_distribution<_IntType>&)
     operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     ^
/usr/include/c++/5/bits/random.tcc:1195:5: note:   template argument deduction/substitution failed:
test.cpp:1201:38: note:   mismatched types ‘const std::negative_binomial_distribution<_IntType>’ and ‘void’
     std::cout<<"guess=.4: "<<objFn(.4)<<std::endl;
                                      ^
In file included from /usr/include/c++/5/random:51:0,
                 from /usr/include/c++/5/bits/stl_algo.h:66,
                 from /usr/include/c++/5/algorithm:62,
                 from ../FunctionalUtilities/catch.hpp:76,
                 from test.cpp:2:
/usr/include/c++/5/bits/random.tcc:831:5: note: candidate: template<class _RandomNumberEngine, long unsigned int __k, class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::shuffle_order_engine<_RandomNumberEngine, __k>&)
     operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     ^
/usr/include/c++/5/bits/random.tcc:831:5: note:   template argument deduction/substitution failed:
test.cpp:1201:38: note:   mismatched types ‘const std::shuffle_order_engine<_RandomNumberEngine, __k>’ and ‘void’
     std::cout<<"guess=.4: "<<objFn(.4)<<std::endl;
                                      ^
In file included from /usr/include/c++/5/random:51:0,
                 from /usr/include/c++/5/bits/stl_algo.h:66,
                 from /usr/include/c++/5/algorithm:62,
                 from ../FunctionalUtilities/catch.hpp:76,
                 from test.cpp:2:
/usr/include/c++/5/bits/random.tcc:702:5: note: candidate: template<class _RandomNumberEngine, long unsigned int __p, long unsigned int __r, class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::discard_block_engine<_RandomNumberEngine, __p, __r>&)
     operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     ^
/usr/include/c++/5/bits/random.tcc:702:5: note:   template argument deduction/substitution failed:
test.cpp:1201:38: note:   mismatched types ‘const std::discard_block_engine<_RandomNumberEngine, __p, __r>’ and ‘void’
     std::cout<<"guess=.4: "<<objFn(.4)<<std::endl;
                                      ^
In file included from /usr/include/c++/5/random:51:0,
                 from /usr/include/c++/5/bits/stl_algo.h:66,
                 from /usr/include/c++/5/algorithm:62,
                 from ../FunctionalUtilities/catch.hpp:76,
                 from test.cpp:2:
/usr/include/c++/5/bits/random.tcc:632:5: note: candidate: template<class _UIntType, long unsigned int __w, long unsigned int __s, long unsigned int __r, class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::subtract_with_carry_engine<_UIntType, __w, __s, __r>&)
     operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     ^
/usr/include/c++/5/bits/random.tcc:632:5: note:   template argument deduction/substitution failed:
test.cpp:1201:38: note:   mismatched types ‘const std::subtract_with_carry_engine<_UIntType, __w, __s, __r>’ and ‘void’
     std::cout<<"guess=.4: "<<objFn(.4)<<std::endl;
                                      ^
In file included from /usr/include/c++/5/random:51:0,
                 from /usr/include/c++/5/bits/stl_algo.h:66,
                 from /usr/include/c++/5/algorithm:62,
                 from ../FunctionalUtilities/catch.hpp:76,
                 from test.cpp:2:
/usr/include/c++/5/bits/random.tcc:156:5: note: candidate: template<class _UIntType, _UIntType __a, _UIntType __c, _UIntType __m, class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::linear_congruential_engine<_UIntType, __a, __c, __m>&)
     operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     ^
/usr/include/c++/5/bits/random.tcc:156:5: note:   template argument deduction/substitution failed:
test.cpp:1201:38: note:   mismatched types ‘const std::linear_congruential_engine<_UIntType, __a, __c, __m>’ and ‘void’
     std::cout<<"guess=.4: "<<objFn(.4)<<std::endl;
                                      ^
In file included from /usr/include/c++/5/random:51:0,
                 from /usr/include/c++/5/bits/stl_algo.h:66,
                 from /usr/include/c++/5/algorithm:62,
                 from ../FunctionalUtilities/catch.hpp:76,
                 from test.cpp:2:
/usr/include/c++/5/bits/random.tcc:2598:5: note: candidate: template<class _RealType, class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::extreme_value_distribution<_RealType>&)
     operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     ^
/usr/include/c++/5/bits/random.tcc:2598:5: note:   template argument deduction/substitution failed:
test.cpp:1201:38: note:   mismatched types ‘const std::extreme_value_distribution<_RealType>’ and ‘void’
     std::cout<<"guess=.4: "<<objFn(.4)<<std::endl;
                                      ^
In file included from /usr/include/c++/5/random:51:0,
                 from /usr/include/c++/5/bits/stl_algo.h:66,
                 from /usr/include/c++/5/algorithm:62,
                 from ../FunctionalUtilities/catch.hpp:76,
                 from test.cpp:2:
/usr/include/c++/5/bits/random.tcc:2522:5: note: candidate: template<class _RealType, class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::weibull_distribution<_RealType>&)
     operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     ^
/usr/include/c++/5/bits/random.tcc:2522:5: note:   template argument deduction/substitution failed:
test.cpp:1201:38: note:   mismatched types ‘const std::weibull_distribution<_RealType>’ and ‘void’
     std::cout<<"guess=.4: "<<objFn(.4)<<std::endl;
                                      ^
In file included from /usr/include/c++/5/random:51:0,
                 from /usr/include/c++/5/bits/stl_algo.h:66,
                 from /usr/include/c++/5/algorithm:62,
                 from ../FunctionalUtilities/catch.hpp:76,
                 from test.cpp:2:
/usr/include/c++/5/bits/random.tcc:1731:5: note: candidate: template<class _RealType, class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::exponential_distribution<_RealType>&)
     operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     ^
/usr/include/c++/5/bits/random.tcc:1731:5: note:   template argument deduction/substitution failed:
test.cpp:1201:38: note:   mismatched types ‘const std::exponential_distribution<_RealType>’ and ‘void’
     std::cout<<"guess=.4: "<<objFn(.4)<<std::endl;
                                      ^
In file included from /usr/include/c++/5/random:51:0,
                 from /usr/include/c++/5/bits/stl_algo.h:66,
                 from /usr/include/c++/5/algorithm:62,
                 from ../FunctionalUtilities/catch.hpp:76,
                 from test.cpp:2:
/usr/include/c++/5/bits/random.tcc:2444:5: note: candidate: template<class _RealType1, class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::gamma_distribution<_RealType>&)
     operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     ^
/usr/include/c++/5/bits/random.tcc:2444:5: note:   template argument deduction/substitution failed:
test.cpp:1201:38: note:   mismatched types ‘const std::gamma_distribution<_RealType>’ and ‘void’
     std::cout<<"guess=.4: "<<objFn(.4)<<std::endl;
                                      ^
In file included from /usr/include/c++/5/random:51:0,
                 from /usr/include/c++/5/bits/stl_algo.h:66,
                 from /usr/include/c++/5/algorithm:62,
                 from ../FunctionalUtilities/catch.hpp:76,
                 from test.cpp:2:
/usr/include/c++/5/bits/random.tcc:1080:5: note: candidate: template<class _IntType, class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::geometric_distribution<_IntType>&)
     operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     ^
/usr/include/c++/5/bits/random.tcc:1080:5: note:   template argument deduction/substitution failed:
test.cpp:1201:38: note:   mismatched types ‘const std::geometric_distribution<_IntType>’ and ‘void’
     std::cout<<"guess=.4: "<<objFn(.4)<<std::endl;
                                      ^
In file included from /usr/include/c++/5/random:51:0,
                 from /usr/include/c++/5/bits/stl_algo.h:66,
                 from /usr/include/c++/5/algorithm:62,
                 from ../FunctionalUtilities/catch.hpp:76,
                 from test.cpp:2:
/usr/include/c++/5/bits/random.tcc:1898:5: note: candidate: template<class _RealType1, class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::normal_distribution<_RealType>&)
     operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     ^
/usr/include/c++/5/bits/random.tcc:1898:5: note:   template argument deduction/substitution failed:
test.cpp:1201:38: note:   mismatched types ‘const std::normal_distribution<_RealType>’ and ‘void’
     std::cout<<"guess=.4: "<<objFn(.4)<<std::endl;
                                      ^
In file included from /usr/include/c++/5/random:51:0,
                 from /usr/include/c++/5/bits/stl_algo.h:66,
                 from /usr/include/c++/5/algorithm:62,
                 from ../FunctionalUtilities/catch.hpp:76,
                 from test.cpp:2:
/usr/include/c++/5/bits/random.tcc:998:5: note: candidate: template<class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::bernoulli_distribution&)
     operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     ^
/usr/include/c++/5/bits/random.tcc:998:5: note:   template argument deduction/substitution failed:
test.cpp:1201:35: note:   cannot convert ‘objFn.optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&)::<lambda(const auto:176& ...)> [with auto:176 = {double}; PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1173()::<lambda(const auto:238&, const auto:239&)>; DiscreteU = std::vector<double>](4.0000000000000002e-1)’ (type ‘void’) to type ‘const std::bernoulli_distribution&’
     std::cout<<"guess=.4: "<<objFn(.4)<<std::endl;
                                   ^
In file included from /usr/include/c++/5/random:51:0,
                 from /usr/include/c++/5/bits/stl_algo.h:66,
                 from /usr/include/c++/5/algorithm:62,
                 from ../FunctionalUtilities/catch.hpp:76,
                 from test.cpp:2:
/usr/include/c++/5/bits/random.tcc:2123:5: note: candidate: template<class _RealType, class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::cauchy_distribution<_RealType>&)
     operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     ^
/usr/include/c++/5/bits/random.tcc:2123:5: note:   template argument deduction/substitution failed:
test.cpp:1201:38: note:   mismatched types ‘const std::cauchy_distribution<_RealType>’ and ‘void’
     std::cout<<"guess=.4: "<<objFn(.4)<<std::endl;
                                      ^
In file included from /usr/include/c++/5/random:51:0,
                 from /usr/include/c++/5/bits/stl_algo.h:66,
                 from /usr/include/c++/5/algorithm:62,
                 from ../FunctionalUtilities/catch.hpp:76,
                 from test.cpp:2:
/usr/include/c++/5/bits/random.tcc:936:5: note: candidate: template<class _RealType, class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::uniform_real_distribution<_IntType>&)
     operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     ^
/usr/include/c++/5/bits/random.tcc:936:5: note:   template argument deduction/substitution failed:
test.cpp:1201:38: note:   mismatched types ‘const std::uniform_real_distribution<_IntType>’ and ‘void’
     std::cout<<"guess=.4: "<<objFn(.4)<<std::endl;
                                      ^
In file included from /usr/include/c++/5/random:51:0,
                 from /usr/include/c++/5/bits/stl_algo.h:66,
                 from /usr/include/c++/5/algorithm:62,
                 from ../FunctionalUtilities/catch.hpp:76,
                 from test.cpp:2:
/usr/include/c++/5/bits/random.tcc:877:5: note: candidate: template<class _IntType, class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::uniform_int_distribution<_IntType>&)
     operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     ^
/usr/include/c++/5/bits/random.tcc:877:5: note:   template argument deduction/substitution failed:
test.cpp:1201:38: note:   mismatched types ‘const std::uniform_int_distribution<_IntType>’ and ‘void’
     std::cout<<"guess=.4: "<<objFn(.4)<<std::endl;
                                      ^
In file included from /usr/include/c++/5/random:51:0,
                 from /usr/include/c++/5/bits/stl_algo.h:66,
                 from /usr/include/c++/5/algorithm:62,
                 from ../FunctionalUtilities/catch.hpp:76,
                 from test.cpp:2:
/usr/include/c++/5/bits/random.tcc:477:5: note: candidate: template<class _UIntType1, long unsigned int __w1, long unsigned int __n1, long unsigned int __m1, long unsigned int __r1, _UIntType1 __a1, long unsigned int __u1, _UIntType1 __d1, long unsigned int __s1, _UIntType1 __b1, long unsigned int __t1, _UIntType1 __c1, long unsigned int __l1, _UIntType1 __f1, class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d, __s, __b, __t, __c, __l, __f>&)
     operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     ^
/usr/include/c++/5/bits/random.tcc:477:5: note:   template argument deduction/substitution failed:
test.cpp:1201:38: note:   mismatched types ‘const std::mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d, __s, __b, __t, __c, __l, __f>’ and ‘void’
     std::cout<<"guess=.4: "<<objFn(.4)<<std::endl;
                                      ^
In file included from /usr/include/c++/5/random:49:0,
                 from /usr/include/c++/5/bits/stl_algo.h:66,
                 from /usr/include/c++/5/algorithm:62,
                 from ../FunctionalUtilities/catch.hpp:76,
                 from test.cpp:2:
/usr/include/c++/5/bits/random.h:1269:5: note: candidate: template<class _RandomNumberEngine, long unsigned int __w, class _UIntType, class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::independent_bits_engine<_RandomNumberEngine, __w, _UIntType>&)
     operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     ^
/usr/include/c++/5/bits/random.h:1269:5: note:   template argument deduction/substitution failed:
test.cpp:1201:38: note:   mismatched types ‘const std::independent_bits_engine<_RandomNumberEngine, __w, _UIntType>’ and ‘void’
     std::cout<<"guess=.4: "<<objFn(.4)<<std::endl;
                                      ^
In file included from /usr/include/c++/5/istream:39:0,
                 from /usr/include/c++/5/sstream:38,
                 from ../FunctionalUtilities/catch.hpp:74,
                 from test.cpp:2:
/usr/include/c++/5/ostream:628:5: note: candidate: template<class _CharT, class _Traits, class _Tp> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&&, const _Tp&)
     operator<<(basic_ostream<_CharT, _Traits>&& __os, const _Tp& __x)
     ^
/usr/include/c++/5/ostream:628:5: note:   template argument deduction/substitution failed:
/usr/include/c++/5/ostream: In substitution of ‘template<class _CharT, class _Traits, class _Tp> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&&, const _Tp&) [with _CharT = char; _Traits = std::char_traits<char>; _Tp = void]’:
test.cpp:1201:38:   required from here
/usr/include/c++/5/ostream:628:5: error: forming reference to void
/usr/include/c++/5/ostream:574:5: note: candidate: template<class _Traits> std::basic_ostream<char, _Traits>& std::operator<<(std::basic_ostream<char, _Traits>&, const unsigned char*)
     operator<<(basic_ostream<char, _Traits>& __out, const unsigned char* __s)
     ^
/usr/include/c++/5/ostream:574:5: note:   template argument deduction/substitution failed:
test.cpp:1201:35: note:   cannot convert ‘objFn.optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&)::<lambda(const auto:176& ...)> [with auto:176 = {double}; PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1173()::<lambda(const auto:238&, const auto:239&)>; DiscreteU = std::vector<double>](4.0000000000000002e-1)’ (type ‘void’) to type ‘const unsigned char*’
     std::cout<<"guess=.4: "<<objFn(.4)<<std::endl;
                                   ^
In file included from /usr/include/c++/5/istream:39:0,
                 from /usr/include/c++/5/sstream:38,
                 from ../FunctionalUtilities/catch.hpp:74,
                 from test.cpp:2:
/usr/include/c++/5/ostream:569:5: note: candidate: template<class _Traits> std::basic_ostream<char, _Traits>& std::operator<<(std::basic_ostream<char, _Traits>&, const signed char*)
     operator<<(basic_ostream<char, _Traits>& __out, const signed char* __s)
     ^
/usr/include/c++/5/ostream:569:5: note:   template argument deduction/substitution failed:
test.cpp:1201:35: note:   cannot convert ‘objFn.optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&)::<lambda(const auto:176& ...)> [with auto:176 = {double}; PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1173()::<lambda(const auto:238&, const auto:239&)>; DiscreteU = std::vector<double>](4.0000000000000002e-1)’ (type ‘void’) to type ‘const signed char*’
     std::cout<<"guess=.4: "<<objFn(.4)<<std::endl;
                                   ^
In file included from /usr/include/c++/5/istream:39:0,
                 from /usr/include/c++/5/sstream:38,
                 from ../FunctionalUtilities/catch.hpp:74,
                 from test.cpp:2:
/usr/include/c++/5/ostream:556:5: note: candidate: template<class _Traits> std::basic_ostream<char, _Traits>& std::operator<<(std::basic_ostream<char, _Traits>&, const char*)
     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
     ^
/usr/include/c++/5/ostream:556:5: note:   template argument deduction/substitution failed:
test.cpp:1201:35: note:   cannot convert ‘objFn.optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&)::<lambda(const auto:176& ...)> [with auto:176 = {double}; PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1173()::<lambda(const auto:238&, const auto:239&)>; DiscreteU = std::vector<double>](4.0000000000000002e-1)’ (type ‘void’) to type ‘const char*’
     std::cout<<"guess=.4: "<<objFn(.4)<<std::endl;
                                   ^
In file included from /usr/include/c++/5/ostream:638:0,
                 from /usr/include/c++/5/istream:39,
                 from /usr/include/c++/5/sstream:38,
                 from ../FunctionalUtilities/catch.hpp:74,
                 from test.cpp:2:
/usr/include/c++/5/bits/ostream.tcc:321:5: note: candidate: template<class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const char*)
     operator<<(basic_ostream<_CharT, _Traits>& __out, const char* __s)
     ^
/usr/include/c++/5/bits/ostream.tcc:321:5: note:   template argument deduction/substitution failed:
test.cpp:1201:35: note:   cannot convert ‘objFn.optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&)::<lambda(const auto:176& ...)> [with auto:176 = {double}; PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1173()::<lambda(const auto:238&, const auto:239&)>; DiscreteU = std::vector<double>](4.0000000000000002e-1)’ (type ‘void’) to type ‘const char*’
     std::cout<<"guess=.4: "<<objFn(.4)<<std::endl;
                                   ^
In file included from /usr/include/c++/5/istream:39:0,
                 from /usr/include/c++/5/sstream:38,
                 from ../FunctionalUtilities/catch.hpp:74,
                 from test.cpp:2:
/usr/include/c++/5/ostream:539:5: note: candidate: template<class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const _CharT*)
     operator<<(basic_ostream<_CharT, _Traits>& __out, const _CharT* __s)
     ^
/usr/include/c++/5/ostream:539:5: note:   template argument deduction/substitution failed:
test.cpp:1201:38: note:   mismatched types ‘const _CharT*’ and ‘void’
     std::cout<<"guess=.4: "<<objFn(.4)<<std::endl;
                                      ^
In file included from /usr/include/c++/5/istream:39:0,
                 from /usr/include/c++/5/sstream:38,
                 from ../FunctionalUtilities/catch.hpp:74,
                 from test.cpp:2:
/usr/include/c++/5/ostream:519:5: note: candidate: template<class _Traits> std::basic_ostream<char, _Traits>& std::operator<<(std::basic_ostream<char, _Traits>&, unsigned char)
     operator<<(basic_ostream<char, _Traits>& __out, unsigned char __c)
     ^
/usr/include/c++/5/ostream:519:5: note:   template argument deduction/substitution failed:
test.cpp:1201:35: note:   cannot convert ‘objFn.optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&)::<lambda(const auto:176& ...)> [with auto:176 = {double}; PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1173()::<lambda(const auto:238&, const auto:239&)>; DiscreteU = std::vector<double>](4.0000000000000002e-1)’ (type ‘void’) to type ‘unsigned char’
     std::cout<<"guess=.4: "<<objFn(.4)<<std::endl;
                                   ^
In file included from /usr/include/c++/5/istream:39:0,
                 from /usr/include/c++/5/sstream:38,
                 from ../FunctionalUtilities/catch.hpp:74,
                 from test.cpp:2:
/usr/include/c++/5/ostream:514:5: note: candidate: template<class _Traits> std::basic_ostream<char, _Traits>& std::operator<<(std::basic_ostream<char, _Traits>&, signed char)
     operator<<(basic_ostream<char, _Traits>& __out, signed char __c)
     ^
/usr/include/c++/5/ostream:514:5: note:   template argument deduction/substitution failed:
test.cpp:1201:35: note:   cannot convert ‘objFn.optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&)::<lambda(const auto:176& ...)> [with auto:176 = {double}; PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1173()::<lambda(const auto:238&, const auto:239&)>; DiscreteU = std::vector<double>](4.0000000000000002e-1)’ (type ‘void’) to type ‘signed char’
     std::cout<<"guess=.4: "<<objFn(.4)<<std::endl;
                                   ^
In file included from /usr/include/c++/5/istream:39:0,
                 from /usr/include/c++/5/sstream:38,
                 from ../FunctionalUtilities/catch.hpp:74,
                 from test.cpp:2:
/usr/include/c++/5/ostream:508:5: note: candidate: template<class _Traits> std::basic_ostream<char, _Traits>& std::operator<<(std::basic_ostream<char, _Traits>&, char)
     operator<<(basic_ostream<char, _Traits>& __out, char __c)
     ^
/usr/include/c++/5/ostream:508:5: note:   template argument deduction/substitution failed:
test.cpp:1201:35: note:   cannot convert ‘objFn.optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&)::<lambda(const auto:176& ...)> [with auto:176 = {double}; PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1173()::<lambda(const auto:238&, const auto:239&)>; DiscreteU = std::vector<double>](4.0000000000000002e-1)’ (type ‘void’) to type ‘char’
     std::cout<<"guess=.4: "<<objFn(.4)<<std::endl;
                                   ^
In file included from /usr/include/c++/5/istream:39:0,
                 from /usr/include/c++/5/sstream:38,
                 from ../FunctionalUtilities/catch.hpp:74,
                 from test.cpp:2:
/usr/include/c++/5/ostream:502:5: note: candidate: template<class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, char)
     operator<<(basic_ostream<_CharT, _Traits>& __out, char __c)
     ^
/usr/include/c++/5/ostream:502:5: note:   template argument deduction/substitution failed:
test.cpp:1201:35: note:   cannot convert ‘objFn.optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&)::<lambda(const auto:176& ...)> [with auto:176 = {double}; PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1173()::<lambda(const auto:238&, const auto:239&)>; DiscreteU = std::vector<double>](4.0000000000000002e-1)’ (type ‘void’) to type ‘char’
     std::cout<<"guess=.4: "<<objFn(.4)<<std::endl;
                                   ^
In file included from /usr/include/c++/5/istream:39:0,
                 from /usr/include/c++/5/sstream:38,
                 from ../FunctionalUtilities/catch.hpp:74,
                 from test.cpp:2:
/usr/include/c++/5/ostream:497:5: note: candidate: template<class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, _CharT)
     operator<<(basic_ostream<_CharT, _Traits>& __out, _CharT __c)
     ^
/usr/include/c++/5/ostream:497:5: note:   template argument deduction/substitution failed:
test.cpp:1201:38: note:   deduced conflicting types for parameter ‘_CharT’ (‘char’ and ‘void’)
     std::cout<<"guess=.4: "<<objFn(.4)<<std::endl;
                                      ^
In file included from /usr/include/c++/5/bits/ios_base.h:46:0,
                 from /usr/include/c++/5/ios:42,
                 from /usr/include/c++/5/istream:38,
                 from /usr/include/c++/5/sstream:38,
                 from ../FunctionalUtilities/catch.hpp:74,
                 from test.cpp:2:
/usr/include/c++/5/system_error:209:5: note: candidate: template<class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::error_code&)
     operator<<(basic_ostream<_CharT, _Traits>& __os, const error_code& __e)
     ^
/usr/include/c++/5/system_error:209:5: note:   template argument deduction/substitution failed:
test.cpp:1201:35: note:   cannot convert ‘objFn.optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&)::<lambda(const auto:176& ...)> [with auto:176 = {double}; PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1173()::<lambda(const auto:238&, const auto:239&)>; DiscreteU = std::vector<double>](4.0000000000000002e-1)’ (type ‘void’) to type ‘const std::error_code&’
     std::cout<<"guess=.4: "<<objFn(.4)<<std::endl;
                                   ^
In file included from /usr/include/c++/5/string:52:0,
                 from /usr/include/c++/5/bits/locale_classes.h:40,
                 from /usr/include/c++/5/bits/ios_base.h:41,
                 from /usr/include/c++/5/ios:42,
                 from /usr/include/c++/5/istream:38,
                 from /usr/include/c++/5/sstream:38,
                 from ../FunctionalUtilities/catch.hpp:74,
                 from test.cpp:2:
/usr/include/c++/5/bits/basic_string.h:5172:5: note: candidate: template<class _CharT, class _Traits, class _Alloc> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&)
     operator<<(basic_ostream<_CharT, _Traits>& __os,
     ^
/usr/include/c++/5/bits/basic_string.h:5172:5: note:   template argument deduction/substitution failed:
test.cpp:1201:38: note:   mismatched types ‘const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>’ and ‘void’
     std::cout<<"guess=.4: "<<objFn(.4)<<std::endl;
                                      ^
test.cpp:1202:28: error: no match for ‘operator<<’ (operand types are ‘std::basic_ostream<char>’ and ‘void’)
     std::cout<<"guess=.3: "<<objFn(.3)<<std::endl;
                            ^
In file included from /usr/include/c++/5/istream:39:0,
                 from /usr/include/c++/5/sstream:38,
                 from ../FunctionalUtilities/catch.hpp:74,
                 from test.cpp:2:
/usr/include/c++/5/ostream:108:7: note: candidate: std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(std::basic_ostream<_CharT, _Traits>::__ostream_type& (*)(std::basic_ostream<_CharT, _Traits>::__ostream_type&)) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]
       operator<<(__ostream_type& (*__pf)(__ostream_type&))
       ^
/usr/include/c++/5/ostream:108:7: note:   no known conversion for argument 1 from ‘void’ to ‘std::basic_ostream<char>::__ostream_type& (*)(std::basic_ostream<char>::__ostream_type&) {aka std::basic_ostream<char>& (*)(std::basic_ostream<char>&)}’
/usr/include/c++/5/ostream:117:7: note: candidate: std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(std::basic_ostream<_CharT, _Traits>::__ios_type& (*)(std::basic_ostream<_CharT, _Traits>::__ios_type&)) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>; std::basic_ostream<_CharT, _Traits>::__ios_type = std::basic_ios<char>]
       operator<<(__ios_type& (*__pf)(__ios_type&))
       ^
/usr/include/c++/5/ostream:117:7: note:   no known conversion for argument 1 from ‘void’ to ‘std::basic_ostream<char>::__ios_type& (*)(std::basic_ostream<char>::__ios_type&) {aka std::basic_ios<char>& (*)(std::basic_ios<char>&)}’
/usr/include/c++/5/ostream:127:7: note: candidate: std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(std::ios_base& (*)(std::ios_base&)) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]
       operator<<(ios_base& (*__pf) (ios_base&))
       ^
/usr/include/c++/5/ostream:127:7: note:   no known conversion for argument 1 from ‘void’ to ‘std::ios_base& (*)(std::ios_base&)’
/usr/include/c++/5/ostream:166:7: note: candidate: std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(long int) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]
       operator<<(long __n)
       ^
/usr/include/c++/5/ostream:166:7: note:   no known conversion for argument 1 from ‘void’ to ‘long int’
/usr/include/c++/5/ostream:170:7: note: candidate: std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(long unsigned int) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]
       operator<<(unsigned long __n)
       ^
/usr/include/c++/5/ostream:170:7: note:   no known conversion for argument 1 from ‘void’ to ‘long unsigned int’
/usr/include/c++/5/ostream:174:7: note: candidate: std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(bool) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]
       operator<<(bool __n)
       ^
/usr/include/c++/5/ostream:174:7: note:   no known conversion for argument 1 from ‘void’ to ‘bool’
In file included from /usr/include/c++/5/ostream:638:0,
                 from /usr/include/c++/5/istream:39,
                 from /usr/include/c++/5/sstream:38,
                 from ../FunctionalUtilities/catch.hpp:74,
                 from test.cpp:2:
/usr/include/c++/5/bits/ostream.tcc:91:5: note: candidate: std::basic_ostream<_CharT, _Traits>& std::basic_ostream<_CharT, _Traits>::operator<<(short int) [with _CharT = char; _Traits = std::char_traits<char>]
     basic_ostream<_CharT, _Traits>::
     ^
/usr/include/c++/5/bits/ostream.tcc:91:5: note:   no known conversion for argument 1 from ‘void’ to ‘short int’
In file included from /usr/include/c++/5/istream:39:0,
                 from /usr/include/c++/5/sstream:38,
                 from ../FunctionalUtilities/catch.hpp:74,
                 from test.cpp:2:
/usr/include/c++/5/ostream:181:7: note: candidate: std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(short unsigned int) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]
       operator<<(unsigned short __n)
       ^
/usr/include/c++/5/ostream:181:7: note:   no known conversion for argument 1 from ‘void’ to ‘short unsigned int’
In file included from /usr/include/c++/5/ostream:638:0,
                 from /usr/include/c++/5/istream:39,
                 from /usr/include/c++/5/sstream:38,
                 from ../FunctionalUtilities/catch.hpp:74,
                 from test.cpp:2:
/usr/include/c++/5/bits/ostream.tcc:105:5: note: candidate: std::basic_ostream<_CharT, _Traits>& std::basic_ostream<_CharT, _Traits>::operator<<(int) [with _CharT = char; _Traits = std::char_traits<char>]
     basic_ostream<_CharT, _Traits>::
     ^
/usr/include/c++/5/bits/ostream.tcc:105:5: note:   no known conversion for argument 1 from ‘void’ to ‘int’
In file included from /usr/include/c++/5/istream:39:0,
                 from /usr/include/c++/5/sstream:38,
                 from ../FunctionalUtilities/catch.hpp:74,
                 from test.cpp:2:
/usr/include/c++/5/ostream:192:7: note: candidate: std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(unsigned int) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]
       operator<<(unsigned int __n)
       ^
/usr/include/c++/5/ostream:192:7: note:   no known conversion for argument 1 from ‘void’ to ‘unsigned int’
/usr/include/c++/5/ostream:201:7: note: candidate: std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(long long int) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]
       operator<<(long long __n)
       ^
/usr/include/c++/5/ostream:201:7: note:   no known conversion for argument 1 from ‘void’ to ‘long long int’
/usr/include/c++/5/ostream:205:7: note: candidate: std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(long long unsigned int) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]
       operator<<(unsigned long long __n)
       ^
/usr/include/c++/5/ostream:205:7: note:   no known conversion for argument 1 from ‘void’ to ‘long long unsigned int’
/usr/include/c++/5/ostream:220:7: note: candidate: std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(double) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]
       operator<<(double __f)
       ^
/usr/include/c++/5/ostream:220:7: note:   no known conversion for argument 1 from ‘void’ to ‘double’
/usr/include/c++/5/ostream:224:7: note: candidate: std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(float) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]
       operator<<(float __f)
       ^
/usr/include/c++/5/ostream:224:7: note:   no known conversion for argument 1 from ‘void’ to ‘float’
/usr/include/c++/5/ostream:232:7: note: candidate: std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(long double) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]
       operator<<(long double __f)
       ^
/usr/include/c++/5/ostream:232:7: note:   no known conversion for argument 1 from ‘void’ to ‘long double’
/usr/include/c++/5/ostream:245:7: note: candidate: std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(const void*) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]
       operator<<(const void* __p)
       ^
/usr/include/c++/5/ostream:245:7: note:   no known conversion for argument 1 from ‘void’ to ‘const void*’
In file included from /usr/include/c++/5/ostream:638:0,
                 from /usr/include/c++/5/istream:39,
                 from /usr/include/c++/5/sstream:38,
                 from ../FunctionalUtilities/catch.hpp:74,
                 from test.cpp:2:
/usr/include/c++/5/bits/ostream.tcc:119:5: note: candidate: std::basic_ostream<_CharT, _Traits>& std::basic_ostream<_CharT, _Traits>::operator<<(std::basic_ostream<_CharT, _Traits>::__streambuf_type*) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__streambuf_type = std::basic_streambuf<char>]
     basic_ostream<_CharT, _Traits>::
     ^
/usr/include/c++/5/bits/ostream.tcc:119:5: note:   no known conversion for argument 1 from ‘void’ to ‘std::basic_ostream<char>::__streambuf_type* {aka std::basic_streambuf<char>*}’
In file included from OptionPricing.h:3:0,
                 from test.cpp:5:
/usr/include/c++/5/complex:526:5: note: candidate: template<class _Tp, class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::complex<_Tp>&)
     operator<<(basic_ostream<_CharT, _Traits>& __os, const complex<_Tp>& __x)
     ^
/usr/include/c++/5/complex:526:5: note:   template argument deduction/substitution failed:
test.cpp:1202:38: note:   mismatched types ‘const std::complex<_Tp>’ and ‘void’
     std::cout<<"guess=.3: "<<objFn(.3)<<std::endl;
                                      ^
In file included from ../FunctionalUtilities/catch.hpp:1503:0,
                 from test.cpp:2:
/usr/include/c++/5/iomanip:363:5: note: candidate: template<class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, std::_Put_time<_CharT>)
     operator<<(basic_ostream<_CharT, _Traits>& __os, _Put_time<_CharT> __f)
     ^
/usr/include/c++/5/iomanip:363:5: note:   template argument deduction/substitution failed:
test.cpp:1202:38: note:   mismatched types ‘std::_Put_time<_CharT>’ and ‘void’
     std::cout<<"guess=.3: "<<objFn(.3)<<std::endl;
                                      ^
In file included from ../FunctionalUtilities/catch.hpp:1503:0,
                 from test.cpp:2:
/usr/include/c++/5/iomanip:311:5: note: candidate: template<class _CharT, class _Traits, class _MoneyT> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, std::_Put_money<_MoneyT>)
     operator<<(basic_ostream<_CharT, _Traits>& __os, _Put_money<_MoneyT> __f)
     ^
/usr/include/c++/5/iomanip:311:5: note:   template argument deduction/substitution failed:
test.cpp:1202:38: note:   mismatched types ‘std::_Put_money<_MoneyT>’ and ‘void’
     std::cout<<"guess=.3: "<<objFn(.3)<<std::endl;
                                      ^
In file included from ../FunctionalUtilities/catch.hpp:1503:0,
                 from test.cpp:2:
/usr/include/c++/5/iomanip:238:5: note: candidate: template<class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, std::_Setw)
     operator<<(basic_ostream<_CharT, _Traits>& __os, _Setw __f)
     ^
/usr/include/c++/5/iomanip:238:5: note:   template argument deduction/substitution failed:
test.cpp:1202:35: note:   cannot convert ‘objFn.optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&)::<lambda(const auto:176& ...)> [with auto:176 = {double}; PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1173()::<lambda(const auto:238&, const auto:239&)>; DiscreteU = std::vector<double>](2.9999999999999999e-1)’ (type ‘void’) to type ‘std::_Setw’
     std::cout<<"guess=.3: "<<objFn(.3)<<std::endl;
                                   ^
In file included from ../FunctionalUtilities/catch.hpp:1503:0,
                 from test.cpp:2:
/usr/include/c++/5/iomanip:208:5: note: candidate: template<class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, std::_Setprecision)
     operator<<(basic_ostream<_CharT, _Traits>& __os, _Setprecision __f)
     ^
/usr/include/c++/5/iomanip:208:5: note:   template argument deduction/substitution failed:
test.cpp:1202:35: note:   cannot convert ‘objFn.optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&)::<lambda(const auto:176& ...)> [with auto:176 = {double}; PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1173()::<lambda(const auto:238&, const auto:239&)>; DiscreteU = std::vector<double>](2.9999999999999999e-1)’ (type ‘void’) to type ‘std::_Setprecision’
     std::cout<<"guess=.3: "<<objFn(.3)<<std::endl;
                                   ^
In file included from ../FunctionalUtilities/catch.hpp:1503:0,
                 from test.cpp:2:
/usr/include/c++/5/iomanip:178:5: note: candidate: template<class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, std::_Setfill<_CharT>)
     operator<<(basic_ostream<_CharT, _Traits>& __os, _Setfill<_CharT> __f)
     ^
/usr/include/c++/5/iomanip:178:5: note:   template argument deduction/substitution failed:
test.cpp:1202:38: note:   mismatched types ‘std::_Setfill<_CharT>’ and ‘void’
     std::cout<<"guess=.3: "<<objFn(.3)<<std::endl;
                                      ^
In file included from ../FunctionalUtilities/catch.hpp:1503:0,
                 from test.cpp:2:
/usr/include/c++/5/iomanip:143:5: note: candidate: template<class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, std::_Setbase)
     operator<<(basic_ostream<_CharT, _Traits>& __os, _Setbase __f)
     ^
/usr/include/c++/5/iomanip:143:5: note:   template argument deduction/substitution failed:
test.cpp:1202:35: note:   cannot convert ‘objFn.optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&)::<lambda(const auto:176& ...)> [with auto:176 = {double}; PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1173()::<lambda(const auto:238&, const auto:239&)>; DiscreteU = std::vector<double>](2.9999999999999999e-1)’ (type ‘void’) to type ‘std::_Setbase’
     std::cout<<"guess=.3: "<<objFn(.3)<<std::endl;
                                   ^
In file included from ../FunctionalUtilities/catch.hpp:1503:0,
                 from test.cpp:2:
/usr/include/c++/5/iomanip:109:5: note: candidate: template<class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, std::_Setiosflags)
     operator<<(basic_ostream<_CharT, _Traits>& __os, _Setiosflags __f)
     ^
/usr/include/c++/5/iomanip:109:5: note:   template argument deduction/substitution failed:
test.cpp:1202:35: note:   cannot convert ‘objFn.optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&)::<lambda(const auto:176& ...)> [with auto:176 = {double}; PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1173()::<lambda(const auto:238&, const auto:239&)>; DiscreteU = std::vector<double>](2.9999999999999999e-1)’ (type ‘void’) to type ‘std::_Setiosflags’
     std::cout<<"guess=.3: "<<objFn(.3)<<std::endl;
                                   ^
In file included from ../FunctionalUtilities/catch.hpp:1503:0,
                 from test.cpp:2:
/usr/include/c++/5/iomanip:79:5: note: candidate: template<class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, std::_Resetiosflags)
     operator<<(basic_ostream<_CharT, _Traits>& __os, _Resetiosflags __f)
     ^
/usr/include/c++/5/iomanip:79:5: note:   template argument deduction/substitution failed:
test.cpp:1202:35: note:   cannot convert ‘objFn.optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&)::<lambda(const auto:176& ...)> [with auto:176 = {double}; PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1173()::<lambda(const auto:238&, const auto:239&)>; DiscreteU = std::vector<double>](2.9999999999999999e-1)’ (type ‘void’) to type ‘std::_Resetiosflags’
     std::cout<<"guess=.3: "<<objFn(.3)<<std::endl;
                                   ^
In file included from /usr/include/c++/5/memory:82:0,
                 from ../FunctionalUtilities/catch.hpp:568,
                 from test.cpp:2:
/usr/include/c++/5/bits/shared_ptr.h:66:5: note: candidate: template<class _Ch, class _Tr, class _Tp, __gnu_cxx::_Lock_policy _Lp> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::__shared_ptr<_Tp, _Lp>&)
     operator<<(std::basic_ostream<_Ch, _Tr>& __os,
     ^
/usr/include/c++/5/bits/shared_ptr.h:66:5: note:   template argument deduction/substitution failed:
test.cpp:1202:38: note:   mismatched types ‘const std::__shared_ptr<_Tp, _Lp>’ and ‘void’
     std::cout<<"guess=.3: "<<objFn(.3)<<std::endl;
                                      ^
In file included from /usr/include/c++/5/random:51:0,
                 from /usr/include/c++/5/bits/stl_algo.h:66,
                 from /usr/include/c++/5/algorithm:62,
                 from ../FunctionalUtilities/catch.hpp:76,
                 from test.cpp:2:
/usr/include/c++/5/bits/random.tcc:3160:5: note: candidate: template<class _RealType, class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::piecewise_linear_distribution<_RealType>&)
     operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     ^
/usr/include/c++/5/bits/random.tcc:3160:5: note:   template argument deduction/substitution failed:
test.cpp:1202:38: note:   mismatched types ‘const std::piecewise_linear_distribution<_RealType>’ and ‘void’
     std::cout<<"guess=.3: "<<objFn(.3)<<std::endl;
                                      ^
In file included from /usr/include/c++/5/random:51:0,
                 from /usr/include/c++/5/bits/stl_algo.h:66,
                 from /usr/include/c++/5/algorithm:62,
                 from ../FunctionalUtilities/catch.hpp:76,
                 from test.cpp:2:
/usr/include/c++/5/bits/random.tcc:2944:5: note: candidate: template<class _RealType, class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::piecewise_constant_distribution<_RealType>&)
     operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     ^
/usr/include/c++/5/bits/random.tcc:2944:5: note:   template argument deduction/substitution failed:
test.cpp:1202:38: note:   mismatched types ‘const std::piecewise_constant_distribution<_RealType>’ and ‘void’
     std::cout<<"guess=.3: "<<objFn(.3)<<std::endl;
                                      ^
In file included from /usr/include/c++/5/random:51:0,
                 from /usr/include/c++/5/bits/stl_algo.h:66,
                 from /usr/include/c++/5/algorithm:62,
                 from ../FunctionalUtilities/catch.hpp:76,
                 from test.cpp:2:
/usr/include/c++/5/bits/random.tcc:2734:5: note: candidate: template<class _IntType, class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::discrete_distribution<_IntType>&)
     operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     ^
/usr/include/c++/5/bits/random.tcc:2734:5: note:   template argument deduction/substitution failed:
test.cpp:1202:38: note:   mismatched types ‘const std::discrete_distribution<_IntType>’ and ‘void’
     std::cout<<"guess=.3: "<<objFn(.3)<<std::endl;
                                      ^
In file included from /usr/include/c++/5/random:51:0,
                 from /usr/include/c++/5/bits/stl_algo.h:66,
                 from /usr/include/c++/5/algorithm:62,
                 from ../FunctionalUtilities/catch.hpp:76,
                 from test.cpp:2:
/usr/include/c++/5/bits/random.tcc:2275:5: note: candidate: template<class _RealType, class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::student_t_distribution<_RealType>&)
     operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     ^
/usr/include/c++/5/bits/random.tcc:2275:5: note:   template argument deduction/substitution failed:
test.cpp:1202:38: note:   mismatched types ‘const std::student_t_distribution<_RealType>’ and ‘void’
     std::cout<<"guess=.3: "<<objFn(.3)<<std::endl;
                                      ^
In file included from /usr/include/c++/5/random:51:0,
                 from /usr/include/c++/5/bits/stl_algo.h:66,
                 from /usr/include/c++/5/algorithm:62,
                 from ../FunctionalUtilities/catch.hpp:76,
                 from test.cpp:2:
/usr/include/c++/5/bits/random.tcc:2200:5: note: candidate: template<class _RealType, class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::fisher_f_distribution<_RealType>&)
     operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     ^
/usr/include/c++/5/bits/random.tcc:2200:5: note:   template argument deduction/substitution failed:
test.cpp:1202:38: note:   mismatched types ‘const std::fisher_f_distribution<_RealType>’ and ‘void’
     std::cout<<"guess=.3: "<<objFn(.3)<<std::endl;
                                      ^
In file included from /usr/include/c++/5/random:51:0,
                 from /usr/include/c++/5/bits/stl_algo.h:66,
                 from /usr/include/c++/5/algorithm:62,
                 from ../FunctionalUtilities/catch.hpp:76,
                 from test.cpp:2:
/usr/include/c++/5/bits/random.tcc:2036:5: note: candidate: template<class _RealType, class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::chi_squared_distribution<_RealType>&)
     operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     ^
/usr/include/c++/5/bits/random.tcc:2036:5: note:   template argument deduction/substitution failed:
test.cpp:1202:38: note:   mismatched types ‘const std::chi_squared_distribution<_RealType>’ and ‘void’
     std::cout<<"guess=.3: "<<objFn(.3)<<std::endl;
                                      ^
In file included from /usr/include/c++/5/random:51:0,
                 from /usr/include/c++/5/bits/stl_algo.h:66,
                 from /usr/include/c++/5/algorithm:62,
                 from ../FunctionalUtilities/catch.hpp:76,
                 from test.cpp:2:
/usr/include/c++/5/bits/random.tcc:1963:5: note: candidate: template<class _RealType, class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::lognormal_distribution<_RealType>&)
     operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     ^
/usr/include/c++/5/bits/random.tcc:1963:5: note:   template argument deduction/substitution failed:
test.cpp:1202:38: note:   mismatched types ‘const std::lognormal_distribution<_RealType>’ and ‘void’
     std::cout<<"guess=.3: "<<objFn(.3)<<std::endl;
                                      ^
In file included from /usr/include/c++/5/random:51:0,
                 from /usr/include/c++/5/bits/stl_algo.h:66,
                 from /usr/include/c++/5/algorithm:62,
                 from ../FunctionalUtilities/catch.hpp:76,
                 from test.cpp:2:
/usr/include/c++/5/bits/random.tcc:1667:5: note: candidate: template<class _IntType, class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::binomial_distribution<_IntType>&)
     operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     ^
/usr/include/c++/5/bits/random.tcc:1667:5: note:   template argument deduction/substitution failed:
test.cpp:1202:38: note:   mismatched types ‘const std::binomial_distribution<_IntType>’ and ‘void’
     std::cout<<"guess=.3: "<<objFn(.3)<<std::endl;
                                      ^
In file included from /usr/include/c++/5/random:51:0,
                 from /usr/include/c++/5/bits/stl_algo.h:66,
                 from /usr/include/c++/5/algorithm:62,
                 from ../FunctionalUtilities/catch.hpp:76,
                 from test.cpp:2:
/usr/include/c++/5/bits/random.tcc:1400:5: note: candidate: template<class _IntType, class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::poisson_distribution<_IntType>&)
     operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     ^
/usr/include/c++/5/bits/random.tcc:1400:5: note:   template argument deduction/substitution failed:
test.cpp:1202:38: note:   mismatched types ‘const std::poisson_distribution<_IntType>’ and ‘void’
     std::cout<<"guess=.3: "<<objFn(.3)<<std::endl;
                                      ^
In file included from /usr/include/c++/5/random:51:0,
                 from /usr/include/c++/5/bits/stl_algo.h:66,
                 from /usr/include/c++/5/algorithm:62,
                 from ../FunctionalUtilities/catch.hpp:76,
                 from test.cpp:2:
/usr/include/c++/5/bits/random.tcc:1195:5: note: candidate: template<class _IntType, class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::negative_binomial_distribution<_IntType>&)
     operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     ^
/usr/include/c++/5/bits/random.tcc:1195:5: note:   template argument deduction/substitution failed:
test.cpp:1202:38: note:   mismatched types ‘const std::negative_binomial_distribution<_IntType>’ and ‘void’
     std::cout<<"guess=.3: "<<objFn(.3)<<std::endl;
                                      ^
In file included from /usr/include/c++/5/random:51:0,
                 from /usr/include/c++/5/bits/stl_algo.h:66,
                 from /usr/include/c++/5/algorithm:62,
                 from ../FunctionalUtilities/catch.hpp:76,
                 from test.cpp:2:
/usr/include/c++/5/bits/random.tcc:831:5: note: candidate: template<class _RandomNumberEngine, long unsigned int __k, class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::shuffle_order_engine<_RandomNumberEngine, __k>&)
     operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     ^
/usr/include/c++/5/bits/random.tcc:831:5: note:   template argument deduction/substitution failed:
test.cpp:1202:38: note:   mismatched types ‘const std::shuffle_order_engine<_RandomNumberEngine, __k>’ and ‘void’
     std::cout<<"guess=.3: "<<objFn(.3)<<std::endl;
                                      ^
In file included from /usr/include/c++/5/random:51:0,
                 from /usr/include/c++/5/bits/stl_algo.h:66,
                 from /usr/include/c++/5/algorithm:62,
                 from ../FunctionalUtilities/catch.hpp:76,
                 from test.cpp:2:
/usr/include/c++/5/bits/random.tcc:702:5: note: candidate: template<class _RandomNumberEngine, long unsigned int __p, long unsigned int __r, class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::discard_block_engine<_RandomNumberEngine, __p, __r>&)
     operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     ^
/usr/include/c++/5/bits/random.tcc:702:5: note:   template argument deduction/substitution failed:
test.cpp:1202:38: note:   mismatched types ‘const std::discard_block_engine<_RandomNumberEngine, __p, __r>’ and ‘void’
     std::cout<<"guess=.3: "<<objFn(.3)<<std::endl;
                                      ^
In file included from /usr/include/c++/5/random:51:0,
                 from /usr/include/c++/5/bits/stl_algo.h:66,
                 from /usr/include/c++/5/algorithm:62,
                 from ../FunctionalUtilities/catch.hpp:76,
                 from test.cpp:2:
/usr/include/c++/5/bits/random.tcc:632:5: note: candidate: template<class _UIntType, long unsigned int __w, long unsigned int __s, long unsigned int __r, class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::subtract_with_carry_engine<_UIntType, __w, __s, __r>&)
     operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     ^
/usr/include/c++/5/bits/random.tcc:632:5: note:   template argument deduction/substitution failed:
test.cpp:1202:38: note:   mismatched types ‘const std::subtract_with_carry_engine<_UIntType, __w, __s, __r>’ and ‘void’
     std::cout<<"guess=.3: "<<objFn(.3)<<std::endl;
                                      ^
In file included from /usr/include/c++/5/random:51:0,
                 from /usr/include/c++/5/bits/stl_algo.h:66,
                 from /usr/include/c++/5/algorithm:62,
                 from ../FunctionalUtilities/catch.hpp:76,
                 from test.cpp:2:
/usr/include/c++/5/bits/random.tcc:156:5: note: candidate: template<class _UIntType, _UIntType __a, _UIntType __c, _UIntType __m, class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::linear_congruential_engine<_UIntType, __a, __c, __m>&)
     operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     ^
/usr/include/c++/5/bits/random.tcc:156:5: note:   template argument deduction/substitution failed:
test.cpp:1202:38: note:   mismatched types ‘const std::linear_congruential_engine<_UIntType, __a, __c, __m>’ and ‘void’
     std::cout<<"guess=.3: "<<objFn(.3)<<std::endl;
                                      ^
In file included from /usr/include/c++/5/random:51:0,
                 from /usr/include/c++/5/bits/stl_algo.h:66,
                 from /usr/include/c++/5/algorithm:62,
                 from ../FunctionalUtilities/catch.hpp:76,
                 from test.cpp:2:
/usr/include/c++/5/bits/random.tcc:2598:5: note: candidate: template<class _RealType, class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::extreme_value_distribution<_RealType>&)
     operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     ^
/usr/include/c++/5/bits/random.tcc:2598:5: note:   template argument deduction/substitution failed:
test.cpp:1202:38: note:   mismatched types ‘const std::extreme_value_distribution<_RealType>’ and ‘void’
     std::cout<<"guess=.3: "<<objFn(.3)<<std::endl;
                                      ^
In file included from /usr/include/c++/5/random:51:0,
                 from /usr/include/c++/5/bits/stl_algo.h:66,
                 from /usr/include/c++/5/algorithm:62,
                 from ../FunctionalUtilities/catch.hpp:76,
                 from test.cpp:2:
/usr/include/c++/5/bits/random.tcc:2522:5: note: candidate: template<class _RealType, class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::weibull_distribution<_RealType>&)
     operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     ^
/usr/include/c++/5/bits/random.tcc:2522:5: note:   template argument deduction/substitution failed:
test.cpp:1202:38: note:   mismatched types ‘const std::weibull_distribution<_RealType>’ and ‘void’
     std::cout<<"guess=.3: "<<objFn(.3)<<std::endl;
                                      ^
In file included from /usr/include/c++/5/random:51:0,
                 from /usr/include/c++/5/bits/stl_algo.h:66,
                 from /usr/include/c++/5/algorithm:62,
                 from ../FunctionalUtilities/catch.hpp:76,
                 from test.cpp:2:
/usr/include/c++/5/bits/random.tcc:1731:5: note: candidate: template<class _RealType, class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::exponential_distribution<_RealType>&)
     operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     ^
/usr/include/c++/5/bits/random.tcc:1731:5: note:   template argument deduction/substitution failed:
test.cpp:1202:38: note:   mismatched types ‘const std::exponential_distribution<_RealType>’ and ‘void’
     std::cout<<"guess=.3: "<<objFn(.3)<<std::endl;
                                      ^
In file included from /usr/include/c++/5/random:51:0,
                 from /usr/include/c++/5/bits/stl_algo.h:66,
                 from /usr/include/c++/5/algorithm:62,
                 from ../FunctionalUtilities/catch.hpp:76,
                 from test.cpp:2:
/usr/include/c++/5/bits/random.tcc:2444:5: note: candidate: template<class _RealType1, class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::gamma_distribution<_RealType>&)
     operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     ^
/usr/include/c++/5/bits/random.tcc:2444:5: note:   template argument deduction/substitution failed:
test.cpp:1202:38: note:   mismatched types ‘const std::gamma_distribution<_RealType>’ and ‘void’
     std::cout<<"guess=.3: "<<objFn(.3)<<std::endl;
                                      ^
In file included from /usr/include/c++/5/random:51:0,
                 from /usr/include/c++/5/bits/stl_algo.h:66,
                 from /usr/include/c++/5/algorithm:62,
                 from ../FunctionalUtilities/catch.hpp:76,
                 from test.cpp:2:
/usr/include/c++/5/bits/random.tcc:1080:5: note: candidate: template<class _IntType, class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::geometric_distribution<_IntType>&)
     operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     ^
/usr/include/c++/5/bits/random.tcc:1080:5: note:   template argument deduction/substitution failed:
test.cpp:1202:38: note:   mismatched types ‘const std::geometric_distribution<_IntType>’ and ‘void’
     std::cout<<"guess=.3: "<<objFn(.3)<<std::endl;
                                      ^
In file included from /usr/include/c++/5/random:51:0,
                 from /usr/include/c++/5/bits/stl_algo.h:66,
                 from /usr/include/c++/5/algorithm:62,
                 from ../FunctionalUtilities/catch.hpp:76,
                 from test.cpp:2:
/usr/include/c++/5/bits/random.tcc:1898:5: note: candidate: template<class _RealType1, class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::normal_distribution<_RealType>&)
     operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     ^
/usr/include/c++/5/bits/random.tcc:1898:5: note:   template argument deduction/substitution failed:
test.cpp:1202:38: note:   mismatched types ‘const std::normal_distribution<_RealType>’ and ‘void’
     std::cout<<"guess=.3: "<<objFn(.3)<<std::endl;
                                      ^
In file included from /usr/include/c++/5/random:51:0,
                 from /usr/include/c++/5/bits/stl_algo.h:66,
                 from /usr/include/c++/5/algorithm:62,
                 from ../FunctionalUtilities/catch.hpp:76,
                 from test.cpp:2:
/usr/include/c++/5/bits/random.tcc:998:5: note: candidate: template<class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::bernoulli_distribution&)
     operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     ^
/usr/include/c++/5/bits/random.tcc:998:5: note:   template argument deduction/substitution failed:
test.cpp:1202:35: note:   cannot convert ‘objFn.optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&)::<lambda(const auto:176& ...)> [with auto:176 = {double}; PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1173()::<lambda(const auto:238&, const auto:239&)>; DiscreteU = std::vector<double>](2.9999999999999999e-1)’ (type ‘void’) to type ‘const std::bernoulli_distribution&’
     std::cout<<"guess=.3: "<<objFn(.3)<<std::endl;
                                   ^
In file included from /usr/include/c++/5/random:51:0,
                 from /usr/include/c++/5/bits/stl_algo.h:66,
                 from /usr/include/c++/5/algorithm:62,
                 from ../FunctionalUtilities/catch.hpp:76,
                 from test.cpp:2:
/usr/include/c++/5/bits/random.tcc:2123:5: note: candidate: template<class _RealType, class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::cauchy_distribution<_RealType>&)
     operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     ^
/usr/include/c++/5/bits/random.tcc:2123:5: note:   template argument deduction/substitution failed:
test.cpp:1202:38: note:   mismatched types ‘const std::cauchy_distribution<_RealType>’ and ‘void’
     std::cout<<"guess=.3: "<<objFn(.3)<<std::endl;
                                      ^
In file included from /usr/include/c++/5/random:51:0,
                 from /usr/include/c++/5/bits/stl_algo.h:66,
                 from /usr/include/c++/5/algorithm:62,
                 from ../FunctionalUtilities/catch.hpp:76,
                 from test.cpp:2:
/usr/include/c++/5/bits/random.tcc:936:5: note: candidate: template<class _RealType, class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::uniform_real_distribution<_IntType>&)
     operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     ^
/usr/include/c++/5/bits/random.tcc:936:5: note:   template argument deduction/substitution failed:
test.cpp:1202:38: note:   mismatched types ‘const std::uniform_real_distribution<_IntType>’ and ‘void’
     std::cout<<"guess=.3: "<<objFn(.3)<<std::endl;
                                      ^
In file included from /usr/include/c++/5/random:51:0,
                 from /usr/include/c++/5/bits/stl_algo.h:66,
                 from /usr/include/c++/5/algorithm:62,
                 from ../FunctionalUtilities/catch.hpp:76,
                 from test.cpp:2:
/usr/include/c++/5/bits/random.tcc:877:5: note: candidate: template<class _IntType, class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::uniform_int_distribution<_IntType>&)
     operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     ^
/usr/include/c++/5/bits/random.tcc:877:5: note:   template argument deduction/substitution failed:
test.cpp:1202:38: note:   mismatched types ‘const std::uniform_int_distribution<_IntType>’ and ‘void’
     std::cout<<"guess=.3: "<<objFn(.3)<<std::endl;
                                      ^
In file included from /usr/include/c++/5/random:51:0,
                 from /usr/include/c++/5/bits/stl_algo.h:66,
                 from /usr/include/c++/5/algorithm:62,
                 from ../FunctionalUtilities/catch.hpp:76,
                 from test.cpp:2:
/usr/include/c++/5/bits/random.tcc:477:5: note: candidate: template<class _UIntType1, long unsigned int __w1, long unsigned int __n1, long unsigned int __m1, long unsigned int __r1, _UIntType1 __a1, long unsigned int __u1, _UIntType1 __d1, long unsigned int __s1, _UIntType1 __b1, long unsigned int __t1, _UIntType1 __c1, long unsigned int __l1, _UIntType1 __f1, class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d, __s, __b, __t, __c, __l, __f>&)
     operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     ^
/usr/include/c++/5/bits/random.tcc:477:5: note:   template argument deduction/substitution failed:
test.cpp:1202:38: note:   mismatched types ‘const std::mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d, __s, __b, __t, __c, __l, __f>’ and ‘void’
     std::cout<<"guess=.3: "<<objFn(.3)<<std::endl;
                                      ^
In file included from /usr/include/c++/5/random:49:0,
                 from /usr/include/c++/5/bits/stl_algo.h:66,
                 from /usr/include/c++/5/algorithm:62,
                 from ../FunctionalUtilities/catch.hpp:76,
                 from test.cpp:2:
/usr/include/c++/5/bits/random.h:1269:5: note: candidate: template<class _RandomNumberEngine, long unsigned int __w, class _UIntType, class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::independent_bits_engine<_RandomNumberEngine, __w, _UIntType>&)
     operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     ^
/usr/include/c++/5/bits/random.h:1269:5: note:   template argument deduction/substitution failed:
test.cpp:1202:38: note:   mismatched types ‘const std::independent_bits_engine<_RandomNumberEngine, __w, _UIntType>’ and ‘void’
     std::cout<<"guess=.3: "<<objFn(.3)<<std::endl;
                                      ^
In file included from /usr/include/c++/5/istream:39:0,
                 from /usr/include/c++/5/sstream:38,
                 from ../FunctionalUtilities/catch.hpp:74,
                 from test.cpp:2:
/usr/include/c++/5/ostream:628:5: note: candidate: template<class _CharT, class _Traits, class _Tp> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&&, const _Tp&)
     operator<<(basic_ostream<_CharT, _Traits>&& __os, const _Tp& __x)
     ^
/usr/include/c++/5/ostream:628:5: note:   template argument deduction/substitution failed:
/usr/include/c++/5/ostream:574:5: note: candidate: template<class _Traits> std::basic_ostream<char, _Traits>& std::operator<<(std::basic_ostream<char, _Traits>&, const unsigned char*)
     operator<<(basic_ostream<char, _Traits>& __out, const unsigned char* __s)
     ^
/usr/include/c++/5/ostream:574:5: note:   template argument deduction/substitution failed:
test.cpp:1202:35: note:   cannot convert ‘objFn.optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&)::<lambda(const auto:176& ...)> [with auto:176 = {double}; PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1173()::<lambda(const auto:238&, const auto:239&)>; DiscreteU = std::vector<double>](2.9999999999999999e-1)’ (type ‘void’) to type ‘const unsigned char*’
     std::cout<<"guess=.3: "<<objFn(.3)<<std::endl;
                                   ^
In file included from /usr/include/c++/5/istream:39:0,
                 from /usr/include/c++/5/sstream:38,
                 from ../FunctionalUtilities/catch.hpp:74,
                 from test.cpp:2:
/usr/include/c++/5/ostream:569:5: note: candidate: template<class _Traits> std::basic_ostream<char, _Traits>& std::operator<<(std::basic_ostream<char, _Traits>&, const signed char*)
     operator<<(basic_ostream<char, _Traits>& __out, const signed char* __s)
     ^
/usr/include/c++/5/ostream:569:5: note:   template argument deduction/substitution failed:
test.cpp:1202:35: note:   cannot convert ‘objFn.optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&)::<lambda(const auto:176& ...)> [with auto:176 = {double}; PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1173()::<lambda(const auto:238&, const auto:239&)>; DiscreteU = std::vector<double>](2.9999999999999999e-1)’ (type ‘void’) to type ‘const signed char*’
     std::cout<<"guess=.3: "<<objFn(.3)<<std::endl;
                                   ^
In file included from /usr/include/c++/5/istream:39:0,
                 from /usr/include/c++/5/sstream:38,
                 from ../FunctionalUtilities/catch.hpp:74,
                 from test.cpp:2:
/usr/include/c++/5/ostream:556:5: note: candidate: template<class _Traits> std::basic_ostream<char, _Traits>& std::operator<<(std::basic_ostream<char, _Traits>&, const char*)
     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
     ^
/usr/include/c++/5/ostream:556:5: note:   template argument deduction/substitution failed:
test.cpp:1202:35: note:   cannot convert ‘objFn.optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&)::<lambda(const auto:176& ...)> [with auto:176 = {double}; PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1173()::<lambda(const auto:238&, const auto:239&)>; DiscreteU = std::vector<double>](2.9999999999999999e-1)’ (type ‘void’) to type ‘const char*’
     std::cout<<"guess=.3: "<<objFn(.3)<<std::endl;
                                   ^
In file included from /usr/include/c++/5/ostream:638:0,
                 from /usr/include/c++/5/istream:39,
                 from /usr/include/c++/5/sstream:38,
                 from ../FunctionalUtilities/catch.hpp:74,
                 from test.cpp:2:
/usr/include/c++/5/bits/ostream.tcc:321:5: note: candidate: template<class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const char*)
     operator<<(basic_ostream<_CharT, _Traits>& __out, const char* __s)
     ^
/usr/include/c++/5/bits/ostream.tcc:321:5: note:   template argument deduction/substitution failed:
test.cpp:1202:35: note:   cannot convert ‘objFn.optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&)::<lambda(const auto:176& ...)> [with auto:176 = {double}; PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1173()::<lambda(const auto:238&, const auto:239&)>; DiscreteU = std::vector<double>](2.9999999999999999e-1)’ (type ‘void’) to type ‘const char*’
     std::cout<<"guess=.3: "<<objFn(.3)<<std::endl;
                                   ^
In file included from /usr/include/c++/5/istream:39:0,
                 from /usr/include/c++/5/sstream:38,
                 from ../FunctionalUtilities/catch.hpp:74,
                 from test.cpp:2:
/usr/include/c++/5/ostream:539:5: note: candidate: template<class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const _CharT*)
     operator<<(basic_ostream<_CharT, _Traits>& __out, const _CharT* __s)
     ^
/usr/include/c++/5/ostream:539:5: note:   template argument deduction/substitution failed:
test.cpp:1202:38: note:   mismatched types ‘const _CharT*’ and ‘void’
     std::cout<<"guess=.3: "<<objFn(.3)<<std::endl;
                                      ^
In file included from /usr/include/c++/5/istream:39:0,
                 from /usr/include/c++/5/sstream:38,
                 from ../FunctionalUtilities/catch.hpp:74,
                 from test.cpp:2:
/usr/include/c++/5/ostream:519:5: note: candidate: template<class _Traits> std::basic_ostream<char, _Traits>& std::operator<<(std::basic_ostream<char, _Traits>&, unsigned char)
     operator<<(basic_ostream<char, _Traits>& __out, unsigned char __c)
     ^
/usr/include/c++/5/ostream:519:5: note:   template argument deduction/substitution failed:
test.cpp:1202:35: note:   cannot convert ‘objFn.optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&)::<lambda(const auto:176& ...)> [with auto:176 = {double}; PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1173()::<lambda(const auto:238&, const auto:239&)>; DiscreteU = std::vector<double>](2.9999999999999999e-1)’ (type ‘void’) to type ‘unsigned char’
     std::cout<<"guess=.3: "<<objFn(.3)<<std::endl;
                                   ^
In file included from /usr/include/c++/5/istream:39:0,
                 from /usr/include/c++/5/sstream:38,
                 from ../FunctionalUtilities/catch.hpp:74,
                 from test.cpp:2:
/usr/include/c++/5/ostream:514:5: note: candidate: template<class _Traits> std::basic_ostream<char, _Traits>& std::operator<<(std::basic_ostream<char, _Traits>&, signed char)
     operator<<(basic_ostream<char, _Traits>& __out, signed char __c)
     ^
/usr/include/c++/5/ostream:514:5: note:   template argument deduction/substitution failed:
test.cpp:1202:35: note:   cannot convert ‘objFn.optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&)::<lambda(const auto:176& ...)> [with auto:176 = {double}; PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1173()::<lambda(const auto:238&, const auto:239&)>; DiscreteU = std::vector<double>](2.9999999999999999e-1)’ (type ‘void’) to type ‘signed char’
     std::cout<<"guess=.3: "<<objFn(.3)<<std::endl;
                                   ^
In file included from /usr/include/c++/5/istream:39:0,
                 from /usr/include/c++/5/sstream:38,
                 from ../FunctionalUtilities/catch.hpp:74,
                 from test.cpp:2:
/usr/include/c++/5/ostream:508:5: note: candidate: template<class _Traits> std::basic_ostream<char, _Traits>& std::operator<<(std::basic_ostream<char, _Traits>&, char)
     operator<<(basic_ostream<char, _Traits>& __out, char __c)
     ^
/usr/include/c++/5/ostream:508:5: note:   template argument deduction/substitution failed:
test.cpp:1202:35: note:   cannot convert ‘objFn.optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&)::<lambda(const auto:176& ...)> [with auto:176 = {double}; PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1173()::<lambda(const auto:238&, const auto:239&)>; DiscreteU = std::vector<double>](2.9999999999999999e-1)’ (type ‘void’) to type ‘char’
     std::cout<<"guess=.3: "<<objFn(.3)<<std::endl;
                                   ^
In file included from /usr/include/c++/5/istream:39:0,
                 from /usr/include/c++/5/sstream:38,
                 from ../FunctionalUtilities/catch.hpp:74,
                 from test.cpp:2:
/usr/include/c++/5/ostream:502:5: note: candidate: template<class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, char)
     operator<<(basic_ostream<_CharT, _Traits>& __out, char __c)
     ^
/usr/include/c++/5/ostream:502:5: note:   template argument deduction/substitution failed:
test.cpp:1202:35: note:   cannot convert ‘objFn.optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&)::<lambda(const auto:176& ...)> [with auto:176 = {double}; PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1173()::<lambda(const auto:238&, const auto:239&)>; DiscreteU = std::vector<double>](2.9999999999999999e-1)’ (type ‘void’) to type ‘char’
     std::cout<<"guess=.3: "<<objFn(.3)<<std::endl;
                                   ^
In file included from /usr/include/c++/5/istream:39:0,
                 from /usr/include/c++/5/sstream:38,
                 from ../FunctionalUtilities/catch.hpp:74,
                 from test.cpp:2:
/usr/include/c++/5/ostream:497:5: note: candidate: template<class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, _CharT)
     operator<<(basic_ostream<_CharT, _Traits>& __out, _CharT __c)
     ^
/usr/include/c++/5/ostream:497:5: note:   template argument deduction/substitution failed:
test.cpp:1202:38: note:   deduced conflicting types for parameter ‘_CharT’ (‘char’ and ‘void’)
     std::cout<<"guess=.3: "<<objFn(.3)<<std::endl;
                                      ^
In file included from /usr/include/c++/5/bits/ios_base.h:46:0,
                 from /usr/include/c++/5/ios:42,
                 from /usr/include/c++/5/istream:38,
                 from /usr/include/c++/5/sstream:38,
                 from ../FunctionalUtilities/catch.hpp:74,
                 from test.cpp:2:
/usr/include/c++/5/system_error:209:5: note: candidate: template<class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::error_code&)
     operator<<(basic_ostream<_CharT, _Traits>& __os, const error_code& __e)
     ^
/usr/include/c++/5/system_error:209:5: note:   template argument deduction/substitution failed:
test.cpp:1202:35: note:   cannot convert ‘objFn.optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&)::<lambda(const auto:176& ...)> [with auto:176 = {double}; PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1173()::<lambda(const auto:238&, const auto:239&)>; DiscreteU = std::vector<double>](2.9999999999999999e-1)’ (type ‘void’) to type ‘const std::error_code&’
     std::cout<<"guess=.3: "<<objFn(.3)<<std::endl;
                                   ^
In file included from /usr/include/c++/5/string:52:0,
                 from /usr/include/c++/5/bits/locale_classes.h:40,
                 from /usr/include/c++/5/bits/ios_base.h:41,
                 from /usr/include/c++/5/ios:42,
                 from /usr/include/c++/5/istream:38,
                 from /usr/include/c++/5/sstream:38,
                 from ../FunctionalUtilities/catch.hpp:74,
                 from test.cpp:2:
/usr/include/c++/5/bits/basic_string.h:5172:5: note: candidate: template<class _CharT, class _Traits, class _Alloc> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&)
     operator<<(basic_ostream<_CharT, _Traits>& __os,
     ^
/usr/include/c++/5/bits/basic_string.h:5172:5: note:   template argument deduction/substitution failed:
test.cpp:1202:38: note:   mismatched types ‘const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>’ and ‘void’
     std::cout<<"guess=.3: "<<objFn(.3)<<std::endl;
                                      ^
In file included from test.cpp:11:0:
OptionCalibration.h: In instantiation of ‘optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&)::<lambda(const auto:176& ...)> [with auto:176 = {double}; PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1207()::<lambda(const auto:244&, const auto:245&)>; DiscreteU = std::vector<double>]’:
../TupleUtilities/TupleUtilities.h:15:35:   required from ‘decltype(auto) tutilities::apply_tuple_impl(F&&, Tuple&&, std::index_sequence<S ...>) [with F = const optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1207()::<lambda(const auto:244&, const auto:245&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>&; Tuple = const std::tuple<double>&; long unsigned int ...S = {0ul}; std::index_sequence<S ...> = std::integer_sequence<long unsigned int, 0ul>]’
../TupleUtilities/TupleUtilities.h:23:32:   required from ‘decltype(auto) tutilities::apply_tuple(F&&, Tuple&&) [with F = const optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1207()::<lambda(const auto:244&, const auto:245&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>&; Tuple = const std::tuple<double>&]’
../GaussNewton/Newton.h:239:37:   required from ‘newton::gradientDescentGeneric(const GFN&, const FNC&, const Index&, const Precision&, const T&, const Params& ...)::<lambda(const auto:156&)> [with auto:156 = std::tuple<double>; FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1207()::<lambda(const auto:244&, const auto:245&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; GFN = newton::gradientDescentApprox(const FNC&, const Index&, const Precision&, const Precision&, const T&, const Params& ...) [with FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1207()::<lambda(const auto:244&, const auto:245&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; Index = int; Precision = double; T = double; Params = {double}]::<lambda(const auto:166&, const auto:167&)>; Index = int; Precision = double; T = double; Params = {double}]’
../GaussNewton/Newton.h:190:13:   required from ‘newton::gradientIterateApprox(FNC&&, const T&, double)::<lambda(const auto:152&, const auto:153&, auto:154&&, auto:155&&)> [with auto:152 = double; auto:153 = long unsigned int; auto:154 = std::tuple<>; auto:155 = std::tuple<>; FNC = const newton::gradientDescentGeneric(const GFN&, const FNC&, const Index&, const Precision&, const T&, const Params& ...) [with FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1207()::<lambda(const auto:244&, const auto:245&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; GFN = newton::gradientDescentApprox(const FNC&, const Index&, const Precision&, const Precision&, const T&, const Params& ...) [with FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1207()::<lambda(const auto:244&, const auto:245&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; Index = int; Precision = double; T = double; Params = {double}]::<lambda(const auto:166&, const auto:167&)>; Index = int; Precision = double; T = double; Params = {double}]::<lambda(const auto:156&)>&; T = std::tuple<double>]’
../TupleUtilities/TupleUtilities.h:51:33:   required from ‘auto tutilities::for_each_impl(Tuple&&, F&&, std::index_sequence<S ...>) [with Tuple = const std::tuple<double>&; F = newton::gradientIterateApprox(FNC&&, const T&, double) [with FNC = const newton::gradientDescentGeneric(const GFN&, const FNC&, const Index&, const Precision&, const T&, const Params& ...) [with FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1207()::<lambda(const auto:244&, const auto:245&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; GFN = newton::gradientDescentApprox(const FNC&, const Index&, const Precision&, const Precision&, const T&, const Params& ...) [with FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1207()::<lambda(const auto:244&, const auto:245&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; Index = int; Precision = double; T = double; Params = {double}]::<lambda(const auto:166&, const auto:167&)>; Index = int; Precision = double; T = double; Params = {double}]::<lambda(const auto:156&)>&; T = std::tuple<double>]::<lambda(const auto:152&, const auto:153&, auto:154&&, auto:155&&)>; long unsigned int ...Indices = {0ul}; std::index_sequence<S ...> = std::integer_sequence<long unsigned int, 0ul>]’
../TupleUtilities/TupleUtilities.h:58:29:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
../GaussNewton/Newton.h:250:23:   required from ‘newton::gradientDescentGeneric(const GFN&, const FNC&, const Index&, const Precision&, const T&, const Params& ...)::<lambda(auto:157&&, const auto:158&)> [with auto:157 = std::tuple<std::tuple<double>, double, double>&; auto:158 = int; FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1207()::<lambda(const auto:244&, const auto:245&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; GFN = newton::gradientDescentApprox(const FNC&, const Index&, const Precision&, const Precision&, const T&, const Params& ...) [with FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1207()::<lambda(const auto:244&, const auto:245&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; Index = int; Precision = double; T = double; Params = {double}]::<lambda(const auto:166&, const auto:167&)>; Index = int; Precision = double; T = double; Params = {double}]’
../FunctionalUtilities/FunctionalUtilities.h:430:25:   required from ‘auto futilities::recurse_move(const incr&, init&&, fnToApply&&, keepGoing&&) [with incr = int; init = std::tuple<std::tuple<double>, double, double>; fnToApply = newton::gradientDescentGeneric(const GFN&, const FNC&, const Index&, const Precision&, const T&, const Params& ...) [with FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1207()::<lambda(const auto:244&, const auto:245&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; GFN = newton::gradientDescentApprox(const FNC&, const Index&, const Precision&, const Precision&, const T&, const Params& ...) [with FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1207()::<lambda(const auto:244&, const auto:245&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; Index = int; Precision = double; T = double; Params = {double}]::<lambda(const auto:166&, const auto:167&)>; Index = int; Precision = double; T = double; Params = {double}]::<lambda(auto:157&&, const auto:158&)>; keepGoing = newton::gradientDescentGeneric(const GFN&, const FNC&, const Index&, const Precision&, const T&, const Params& ...) [with FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1207()::<lambda(const auto:244&, const auto:245&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; GFN = newton::gradientDescentApprox(const FNC&, const Index&, const Precision&, const Precision&, const T&, const Params& ...) [with FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1207()::<lambda(const auto:244&, const auto:245&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; Index = int; Precision = double; T = double; Params = {double}]::<lambda(const auto:166&, const auto:167&)>; Index = int; Precision = double; T = double; Params = {double}]::<lambda(const auto:163&)>]’
../GaussNewton/Newton.h:241:56:   required from ‘auto newton::gradientDescentGeneric(const GFN&, const FNC&, const Index&, const Precision&, const T&, const Params& ...) [with FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1207()::<lambda(const auto:244&, const auto:245&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; GFN = newton::gradientDescentApprox(const FNC&, const Index&, const Precision&, const Precision&, const T&, const Params& ...) [with FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1207()::<lambda(const auto:244&, const auto:245&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; Index = int; Precision = double; T = double; Params = {double}]::<lambda(const auto:166&, const auto:167&)>; Index = int; Precision = double; T = double; Params = {double}]’
../GaussNewton/Newton.h:284:34:   required from ‘auto newton::gradientDescentApprox(const FNC&, const Index&, const Precision&, const Precision&, const T&, const Params& ...) [with FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1207()::<lambda(const auto:244&, const auto:245&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; Index = int; Precision = double; T = double; Params = {double}]’
OptionCalibration.h:126:45:   required from ‘auto optioncal::calibrate(const FN&, const Params& ...) [with FN = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1207()::<lambda(const auto:244&, const auto:245&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; Params = {double}]’
test.cpp:1245:51:   required from here
OptionCalibration.h:114:18: error: no match for ‘operator/’ (operand types are ‘std::complex<double>’ and ‘std::vector<double>::size_type {aka long unsigned int}’)
                 )/uArray.size()           
                  ^
In file included from ../GaussNewton/Newton.h:10:0,
                 from OptionCalibration.h:9,
                 from test.cpp:11:
../AutoDiff/AutoDiff.h:172:6: note: candidate: template<class W, class Z> auto operator/(const AutoDiff<W>&, const AutoDiff<Z>&)
 auto operator/(const AutoDiff<W> &left, const AutoDiff<Z> &right){
      ^
../AutoDiff/AutoDiff.h:172:6: note:   template argument deduction/substitution failed:
In file included from test.cpp:11:0:
OptionCalibration.h:114:18: note:   ‘std::complex<double>’ is not derived from ‘const AutoDiff<W>’
                 )/uArray.size()           
                  ^
In file included from ../GaussNewton/Newton.h:10:0,
                 from OptionCalibration.h:9,
                 from test.cpp:11:
../AutoDiff/AutoDiff.h:176:6: note: candidate: template<class W, class Z> auto operator/(const AutoDiff<W>&, const Z&)
 auto operator/(const AutoDiff<W> &left, const Z& right){
      ^
../AutoDiff/AutoDiff.h:176:6: note:   template argument deduction/substitution failed:
In file included from test.cpp:11:0:
OptionCalibration.h:114:18: note:   ‘std::complex<double>’ is not derived from ‘const AutoDiff<W>’
                 )/uArray.size()           
                  ^
In file included from ../GaussNewton/Newton.h:10:0,
                 from OptionCalibration.h:9,
                 from test.cpp:11:
../AutoDiff/AutoDiff.h:180:6: note: candidate: template<class W, class Z> auto operator/(const W&, const AutoDiff<Z>&)
 auto operator/(const W& left, const AutoDiff<Z> &right){
      ^
../AutoDiff/AutoDiff.h:180:6: note:   template argument deduction/substitution failed:
In file included from test.cpp:11:0:
OptionCalibration.h:114:18: note:   mismatched types ‘const AutoDiff<Z>’ and ‘std::vector<double>::size_type {aka long unsigned int}’
                 )/uArray.size()           
                  ^
In file included from OptionPricing.h:3:0,
                 from test.cpp:5:
/usr/include/c++/5/complex:434:5: note: candidate: template<class _Tp> std::complex<_Tp> std::operator/(const _Tp&, const std::complex<_Tp>&)
     operator/(const _Tp& __x, const complex<_Tp>& __y)
     ^
/usr/include/c++/5/complex:434:5: note:   template argument deduction/substitution failed:
In file included from test.cpp:11:0:
OptionCalibration.h:114:18: note:   mismatched types ‘const std::complex<_Tp>’ and ‘std::vector<double>::size_type {aka long unsigned int}’
                 )/uArray.size()           
                  ^
In file included from OptionPricing.h:3:0,
                 from test.cpp:5:
/usr/include/c++/5/complex:425:5: note: candidate: template<class _Tp> std::complex<_Tp> std::operator/(const std::complex<_Tp>&, const _Tp&)
     operator/(const complex<_Tp>& __x, const _Tp& __y)
     ^
/usr/include/c++/5/complex:425:5: note:   template argument deduction/substitution failed:
In file included from test.cpp:11:0:
OptionCalibration.h:114:18: note:   deduced conflicting types for parameter ‘const _Tp’ (‘double’ and ‘std::vector<double>::size_type {aka long unsigned int}’)
                 )/uArray.size()           
                  ^
In file included from OptionPricing.h:3:0,
                 from test.cpp:5:
/usr/include/c++/5/complex:416:5: note: candidate: template<class _Tp> std::complex<_Tp> std::operator/(const std::complex<_Tp>&, const std::complex<_Tp>&)
     operator/(const complex<_Tp>& __x, const complex<_Tp>& __y)
     ^
/usr/include/c++/5/complex:416:5: note:   template argument deduction/substitution failed:
In file included from test.cpp:11:0:
OptionCalibration.h:114:18: note:   mismatched types ‘const std::complex<_Tp>’ and ‘std::vector<double>::size_type {aka long unsigned int}’
                 )/uArray.size()           
                  ^
In file included from OptionCalibration.h:9:0,
                 from test.cpp:11:
../GaussNewton/Newton.h: In instantiation of ‘newton::gradientIterateApprox(FNC&&, const T&, double)::<lambda(const auto:152&, const auto:153&, auto:154&&, auto:155&&)> [with auto:152 = double; auto:153 = long unsigned int; auto:154 = std::tuple<>; auto:155 = std::tuple<>; FNC = const newton::gradientDescentGeneric(const GFN&, const FNC&, const Index&, const Precision&, const T&, const Params& ...) [with FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1207()::<lambda(const auto:244&, const auto:245&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; GFN = newton::gradientDescentApprox(const FNC&, const Index&, const Precision&, const Precision&, const T&, const Params& ...) [with FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1207()::<lambda(const auto:244&, const auto:245&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; Index = int; Precision = double; T = double; Params = {double}]::<lambda(const auto:166&, const auto:167&)>; Index = int; Precision = double; T = double; Params = {double}]::<lambda(const auto:156&)>&; T = std::tuple<double>]’:
../TupleUtilities/TupleUtilities.h:51:33:   required from ‘auto tutilities::for_each_impl(Tuple&&, F&&, std::index_sequence<S ...>) [with Tuple = const std::tuple<double>&; F = newton::gradientIterateApprox(FNC&&, const T&, double) [with FNC = const newton::gradientDescentGeneric(const GFN&, const FNC&, const Index&, const Precision&, const T&, const Params& ...) [with FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1207()::<lambda(const auto:244&, const auto:245&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; GFN = newton::gradientDescentApprox(const FNC&, const Index&, const Precision&, const Precision&, const T&, const Params& ...) [with FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1207()::<lambda(const auto:244&, const auto:245&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; Index = int; Precision = double; T = double; Params = {double}]::<lambda(const auto:166&, const auto:167&)>; Index = int; Precision = double; T = double; Params = {double}]::<lambda(const auto:156&)>&; T = std::tuple<double>]::<lambda(const auto:152&, const auto:153&, auto:154&&, auto:155&&)>; long unsigned int ...Indices = {0ul}; std::index_sequence<S ...> = std::integer_sequence<long unsigned int, 0ul>]’
../TupleUtilities/TupleUtilities.h:58:29:   required from ‘auto tutilities::for_each(Tuple&&, F&&) [with Tuple = const std::tuple<double>&; F = newton::gradientIterateApprox(FNC&&, const T&, double) [with FNC = const newton::gradientDescentGeneric(const GFN&, const FNC&, const Index&, const Precision&, const T&, const Params& ...) [with FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1207()::<lambda(const auto:244&, const auto:245&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; GFN = newton::gradientDescentApprox(const FNC&, const Index&, const Precision&, const Precision&, const T&, const Params& ...) [with FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1207()::<lambda(const auto:244&, const auto:245&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; Index = int; Precision = double; T = double; Params = {double}]::<lambda(const auto:166&, const auto:167&)>; Index = int; Precision = double; T = double; Params = {double}]::<lambda(const auto:156&)>&; T = std::tuple<double>]::<lambda(const auto:152&, const auto:153&, auto:154&&, auto:155&&)>]’
../GaussNewton/Newton.h:188:32:   required from ‘auto newton::gradientIterateApprox(FNC&&, const T&, double) [with FNC = const newton::gradientDescentGeneric(const GFN&, const FNC&, const Index&, const Precision&, const T&, const Params& ...) [with FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1207()::<lambda(const auto:244&, const auto:245&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; GFN = newton::gradientDescentApprox(const FNC&, const Index&, const Precision&, const Precision&, const T&, const Params& ...) [with FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1207()::<lambda(const auto:244&, const auto:245&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; Index = int; Precision = double; T = double; Params = {double}]::<lambda(const auto:166&, const auto:167&)>; Index = int; Precision = double; T = double; Params = {double}]::<lambda(const auto:156&)>&; T = std::tuple<double>]’
../GaussNewton/Newton.h:286:37:   required from ‘newton::gradientDescentApprox(const FNC&, const Index&, const Precision&, const Precision&, const T&, const Params& ...)::<lambda(const auto:166&, const auto:167&)> [with auto:166 = newton::gradientDescentGeneric(const GFN&, const FNC&, const Index&, const Precision&, const T&, const Params& ...) [with FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1207()::<lambda(const auto:244&, const auto:245&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; GFN = newton::gradientDescentApprox(const FNC&, const Index&, const Precision&, const Precision&, const T&, const Params& ...) [with FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1207()::<lambda(const auto:244&, const auto:245&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; Index = int; Precision = double; T = double; Params = {double}]::<lambda(const auto:166&, const auto:167&)>; Index = int; Precision = double; T = double; Params = {double}]::<lambda(const auto:156&)>; auto:167 = std::tuple<double>; FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1207()::<lambda(const auto:244&, const auto:245&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; Index = int; Precision = double; T = double; Params = {double}]’
../GaussNewton/Newton.h:250:23:   required from ‘newton::gradientDescentGeneric(const GFN&, const FNC&, const Index&, const Precision&, const T&, const Params& ...)::<lambda(auto:157&&, const auto:158&)> [with auto:157 = std::tuple<std::tuple<double>, double, double>&; auto:158 = int; FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1207()::<lambda(const auto:244&, const auto:245&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; GFN = newton::gradientDescentApprox(const FNC&, const Index&, const Precision&, const Precision&, const T&, const Params& ...) [with FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1207()::<lambda(const auto:244&, const auto:245&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; Index = int; Precision = double; T = double; Params = {double}]::<lambda(const auto:166&, const auto:167&)>; Index = int; Precision = double; T = double; Params = {double}]’
../FunctionalUtilities/FunctionalUtilities.h:430:25:   required from ‘auto futilities::recurse_move(const incr&, init&&, fnToApply&&, keepGoing&&) [with incr = int; init = std::tuple<std::tuple<double>, double, double>; fnToApply = newton::gradientDescentGeneric(const GFN&, const FNC&, const Index&, const Precision&, const T&, const Params& ...) [with FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1207()::<lambda(const auto:244&, const auto:245&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; GFN = newton::gradientDescentApprox(const FNC&, const Index&, const Precision&, const Precision&, const T&, const Params& ...) [with FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1207()::<lambda(const auto:244&, const auto:245&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; Index = int; Precision = double; T = double; Params = {double}]::<lambda(const auto:166&, const auto:167&)>; Index = int; Precision = double; T = double; Params = {double}]::<lambda(auto:157&&, const auto:158&)>; keepGoing = newton::gradientDescentGeneric(const GFN&, const FNC&, const Index&, const Precision&, const T&, const Params& ...) [with FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1207()::<lambda(const auto:244&, const auto:245&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; GFN = newton::gradientDescentApprox(const FNC&, const Index&, const Precision&, const Precision&, const T&, const Params& ...) [with FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1207()::<lambda(const auto:244&, const auto:245&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; Index = int; Precision = double; T = double; Params = {double}]::<lambda(const auto:166&, const auto:167&)>; Index = int; Precision = double; T = double; Params = {double}]::<lambda(const auto:163&)>]’
../GaussNewton/Newton.h:241:56:   required from ‘auto newton::gradientDescentGeneric(const GFN&, const FNC&, const Index&, const Precision&, const T&, const Params& ...) [with FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1207()::<lambda(const auto:244&, const auto:245&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; GFN = newton::gradientDescentApprox(const FNC&, const Index&, const Precision&, const Precision&, const T&, const Params& ...) [with FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1207()::<lambda(const auto:244&, const auto:245&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; Index = int; Precision = double; T = double; Params = {double}]::<lambda(const auto:166&, const auto:167&)>; Index = int; Precision = double; T = double; Params = {double}]’
../GaussNewton/Newton.h:284:34:   required from ‘auto newton::gradientDescentApprox(const FNC&, const Index&, const Precision&, const Precision&, const T&, const Params& ...) [with FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1207()::<lambda(const auto:244&, const auto:245&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; Index = int; Precision = double; T = double; Params = {double}]’
OptionCalibration.h:126:45:   required from ‘auto optioncal::calibrate(const FN&, const Params& ...) [with FN = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1207()::<lambda(const auto:244&, const auto:245&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; Params = {double}]’
test.cpp:1245:51:   required from here
../GaussNewton/Newton.h:196:10: error: invalid operands of types ‘void’ and ‘void’ to binary ‘operator-’
         )-fnc(
          ^
In file included from ../GaussNewton/Newton.h:9:0,
                 from OptionCalibration.h:9,
                 from test.cpp:11:
../TupleUtilities/TupleUtilities.h: In instantiation of ‘auto tutilities::for_each_impl(Tuple&&, F&&, std::index_sequence<S ...>) [with Tuple = const std::tuple<double>&; F = newton::gradientIterateApprox(FNC&&, const T&, double) [with FNC = const newton::gradientDescentGeneric(const GFN&, const FNC&, const Index&, const Precision&, const T&, const Params& ...) [with FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1207()::<lambda(const auto:244&, const auto:245&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; GFN = newton::gradientDescentApprox(const FNC&, const Index&, const Precision&, const Precision&, const T&, const Params& ...) [with FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1207()::<lambda(const auto:244&, const auto:245&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; Index = int; Precision = double; T = double; Params = {double}]::<lambda(const auto:166&, const auto:167&)>; Index = int; Precision = double; T = double; Params = {double}]::<lambda(const auto:156&)>&; T = std::tuple<double>]::<lambda(const auto:152&, const auto:153&, auto:154&&, auto:155&&)>; long unsigned int ...Indices = {0ul}; std::index_sequence<S ...> = std::integer_sequence<long unsigned int, 0ul>]’:
../TupleUtilities/TupleUtilities.h:58:29:   required from ‘auto tutilities::for_each(Tuple&&, F&&) [with Tuple = const std::tuple<double>&; F = newton::gradientIterateApprox(FNC&&, const T&, double) [with FNC = const newton::gradientDescentGeneric(const GFN&, const FNC&, const Index&, const Precision&, const T&, const Params& ...) [with FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1207()::<lambda(const auto:244&, const auto:245&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; GFN = newton::gradientDescentApprox(const FNC&, const Index&, const Precision&, const Precision&, const T&, const Params& ...) [with FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1207()::<lambda(const auto:244&, const auto:245&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; Index = int; Precision = double; T = double; Params = {double}]::<lambda(const auto:166&, const auto:167&)>; Index = int; Precision = double; T = double; Params = {double}]::<lambda(const auto:156&)>&; T = std::tuple<double>]::<lambda(const auto:152&, const auto:153&, auto:154&&, auto:155&&)>]’
../GaussNewton/Newton.h:188:32:   required from ‘auto newton::gradientIterateApprox(FNC&&, const T&, double) [with FNC = const newton::gradientDescentGeneric(const GFN&, const FNC&, const Index&, const Precision&, const T&, const Params& ...) [with FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1207()::<lambda(const auto:244&, const auto:245&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; GFN = newton::gradientDescentApprox(const FNC&, const Index&, const Precision&, const Precision&, const T&, const Params& ...) [with FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1207()::<lambda(const auto:244&, const auto:245&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; Index = int; Precision = double; T = double; Params = {double}]::<lambda(const auto:166&, const auto:167&)>; Index = int; Precision = double; T = double; Params = {double}]::<lambda(const auto:156&)>&; T = std::tuple<double>]’
../GaussNewton/Newton.h:286:37:   required from ‘newton::gradientDescentApprox(const FNC&, const Index&, const Precision&, const Precision&, const T&, const Params& ...)::<lambda(const auto:166&, const auto:167&)> [with auto:166 = newton::gradientDescentGeneric(const GFN&, const FNC&, const Index&, const Precision&, const T&, const Params& ...) [with FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1207()::<lambda(const auto:244&, const auto:245&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; GFN = newton::gradientDescentApprox(const FNC&, const Index&, const Precision&, const Precision&, const T&, const Params& ...) [with FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1207()::<lambda(const auto:244&, const auto:245&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; Index = int; Precision = double; T = double; Params = {double}]::<lambda(const auto:166&, const auto:167&)>; Index = int; Precision = double; T = double; Params = {double}]::<lambda(const auto:156&)>; auto:167 = std::tuple<double>; FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1207()::<lambda(const auto:244&, const auto:245&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; Index = int; Precision = double; T = double; Params = {double}]’
../GaussNewton/Newton.h:250:23:   required from ‘newton::gradientDescentGeneric(const GFN&, const FNC&, const Index&, const Precision&, const T&, const Params& ...)::<lambda(auto:157&&, const auto:158&)> [with auto:157 = std::tuple<std::tuple<double>, double, double>&; auto:158 = int; FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1207()::<lambda(const auto:244&, const auto:245&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; GFN = newton::gradientDescentApprox(const FNC&, const Index&, const Precision&, const Precision&, const T&, const Params& ...) [with FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1207()::<lambda(const auto:244&, const auto:245&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; Index = int; Precision = double; T = double; Params = {double}]::<lambda(const auto:166&, const auto:167&)>; Index = int; Precision = double; T = double; Params = {double}]’
../FunctionalUtilities/FunctionalUtilities.h:430:25:   required from ‘auto futilities::recurse_move(const incr&, init&&, fnToApply&&, keepGoing&&) [with incr = int; init = std::tuple<std::tuple<double>, double, double>; fnToApply = newton::gradientDescentGeneric(const GFN&, const FNC&, const Index&, const Precision&, const T&, const Params& ...) [with FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1207()::<lambda(const auto:244&, const auto:245&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; GFN = newton::gradientDescentApprox(const FNC&, const Index&, const Precision&, const Precision&, const T&, const Params& ...) [with FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1207()::<lambda(const auto:244&, const auto:245&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; Index = int; Precision = double; T = double; Params = {double}]::<lambda(const auto:166&, const auto:167&)>; Index = int; Precision = double; T = double; Params = {double}]::<lambda(auto:157&&, const auto:158&)>; keepGoing = newton::gradientDescentGeneric(const GFN&, const FNC&, const Index&, const Precision&, const T&, const Params& ...) [with FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1207()::<lambda(const auto:244&, const auto:245&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; GFN = newton::gradientDescentApprox(const FNC&, const Index&, const Precision&, const Precision&, const T&, const Params& ...) [with FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1207()::<lambda(const auto:244&, const auto:245&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; Index = int; Precision = double; T = double; Params = {double}]::<lambda(const auto:166&, const auto:167&)>; Index = int; Precision = double; T = double; Params = {double}]::<lambda(const auto:163&)>]’
../GaussNewton/Newton.h:241:56:   required from ‘auto newton::gradientDescentGeneric(const GFN&, const FNC&, const Index&, const Precision&, const T&, const Params& ...) [with FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1207()::<lambda(const auto:244&, const auto:245&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; GFN = newton::gradientDescentApprox(const FNC&, const Index&, const Precision&, const Precision&, const T&, const Params& ...) [with FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1207()::<lambda(const auto:244&, const auto:245&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; Index = int; Precision = double; T = double; Params = {double}]::<lambda(const auto:166&, const auto:167&)>; Index = int; Precision = double; T = double; Params = {double}]’
../GaussNewton/Newton.h:284:34:   required from ‘auto newton::gradientDescentApprox(const FNC&, const Index&, const Precision&, const Precision&, const T&, const Params& ...) [with FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1207()::<lambda(const auto:244&, const auto:245&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; Index = int; Precision = double; T = double; Params = {double}]’
OptionCalibration.h:126:45:   required from ‘auto optioncal::calibrate(const FN&, const Params& ...) [with FN = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1207()::<lambda(const auto:244&, const auto:245&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; Params = {double}]’
test.cpp:1245:51:   required from here
../TupleUtilities/TupleUtilities.h:51:31: error: invalid use of void expression
         return std::make_tuple(f(std::get<Indices>(std::forward<Tuple>(tuple)), Indices, tuple_slice<0, Indices>(tuple), tuple_slice<Indices+1, std::tuple_size<std::remove_reference_t<Tuple>>::value>(tuple))...);
                               ^
In file included from OptionCalibration.h:9:0,
                 from test.cpp:11:
../GaussNewton/Newton.h: In instantiation of ‘newton::gradientDescentGeneric(const GFN&, const FNC&, const Index&, const Precision&, const T&, const Params& ...)::<lambda(auto:157&&, const auto:158&)> [with auto:157 = std::tuple<std::tuple<double>, double, double>&; auto:158 = int; FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1207()::<lambda(const auto:244&, const auto:245&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; GFN = newton::gradientDescentApprox(const FNC&, const Index&, const Precision&, const Precision&, const T&, const Params& ...) [with FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1207()::<lambda(const auto:244&, const auto:245&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; Index = int; Precision = double; T = double; Params = {double}]::<lambda(const auto:166&, const auto:167&)>; Index = int; Precision = double; T = double; Params = {double}]’:
../FunctionalUtilities/FunctionalUtilities.h:430:25:   required from ‘auto futilities::recurse_move(const incr&, init&&, fnToApply&&, keepGoing&&) [with incr = int; init = std::tuple<std::tuple<double>, double, double>; fnToApply = newton::gradientDescentGeneric(const GFN&, const FNC&, const Index&, const Precision&, const T&, const Params& ...) [with FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1207()::<lambda(const auto:244&, const auto:245&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; GFN = newton::gradientDescentApprox(const FNC&, const Index&, const Precision&, const Precision&, const T&, const Params& ...) [with FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1207()::<lambda(const auto:244&, const auto:245&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; Index = int; Precision = double; T = double; Params = {double}]::<lambda(const auto:166&, const auto:167&)>; Index = int; Precision = double; T = double; Params = {double}]::<lambda(auto:157&&, const auto:158&)>; keepGoing = newton::gradientDescentGeneric(const GFN&, const FNC&, const Index&, const Precision&, const T&, const Params& ...) [with FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1207()::<lambda(const auto:244&, const auto:245&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; GFN = newton::gradientDescentApprox(const FNC&, const Index&, const Precision&, const Precision&, const T&, const Params& ...) [with FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1207()::<lambda(const auto:244&, const auto:245&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; Index = int; Precision = double; T = double; Params = {double}]::<lambda(const auto:166&, const auto:167&)>; Index = int; Precision = double; T = double; Params = {double}]::<lambda(const auto:163&)>]’
../GaussNewton/Newton.h:241:56:   required from ‘auto newton::gradientDescentGeneric(const GFN&, const FNC&, const Index&, const Precision&, const T&, const Params& ...) [with FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1207()::<lambda(const auto:244&, const auto:245&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; GFN = newton::gradientDescentApprox(const FNC&, const Index&, const Precision&, const Precision&, const T&, const Params& ...) [with FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1207()::<lambda(const auto:244&, const auto:245&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; Index = int; Precision = double; T = double; Params = {double}]::<lambda(const auto:166&, const auto:167&)>; Index = int; Precision = double; T = double; Params = {double}]’
../GaussNewton/Newton.h:284:34:   required from ‘auto newton::gradientDescentApprox(const FNC&, const Index&, const Precision&, const Precision&, const T&, const Params& ...) [with FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1207()::<lambda(const auto:244&, const auto:245&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; Index = int; Precision = double; T = double; Params = {double}]’
OptionCalibration.h:126:45:   required from ‘auto optioncal::calibrate(const FN&, const Params& ...) [with FN = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1207()::<lambda(const auto:244&, const auto:245&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; Params = {double}]’
test.cpp:1245:51:   required from here
../GaussNewton/Newton.h:249:52: error: invalid use of void expression
         return std::make_tuple(tutilities::for_each(
                                                    ^
In file included from test.cpp:3:0:
../FunctionalUtilities/FunctionalUtilities.h: In instantiation of ‘auto futilities::recurse_move(const incr&, init&&, fnToApply&&, keepGoing&&) [with incr = int; init = std::tuple<std::tuple<double>, double, double>; fnToApply = newton::gradientDescentGeneric(const GFN&, const FNC&, const Index&, const Precision&, const T&, const Params& ...) [with FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1207()::<lambda(const auto:244&, const auto:245&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; GFN = newton::gradientDescentApprox(const FNC&, const Index&, const Precision&, const Precision&, const T&, const Params& ...) [with FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1207()::<lambda(const auto:244&, const auto:245&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; Index = int; Precision = double; T = double; Params = {double}]::<lambda(const auto:166&, const auto:167&)>; Index = int; Precision = double; T = double; Params = {double}]::<lambda(auto:157&&, const auto:158&)>; keepGoing = newton::gradientDescentGeneric(const GFN&, const FNC&, const Index&, const Precision&, const T&, const Params& ...) [with FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1207()::<lambda(const auto:244&, const auto:245&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; GFN = newton::gradientDescentApprox(const FNC&, const Index&, const Precision&, const Precision&, const T&, const Params& ...) [with FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1207()::<lambda(const auto:244&, const auto:245&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; Index = int; Precision = double; T = double; Params = {double}]::<lambda(const auto:166&, const auto:167&)>; Index = int; Precision = double; T = double; Params = {double}]::<lambda(const auto:163&)>]’:
../GaussNewton/Newton.h:241:56:   required from ‘auto newton::gradientDescentGeneric(const GFN&, const FNC&, const Index&, const Precision&, const T&, const Params& ...) [with FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1207()::<lambda(const auto:244&, const auto:245&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; GFN = newton::gradientDescentApprox(const FNC&, const Index&, const Precision&, const Precision&, const T&, const Params& ...) [with FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1207()::<lambda(const auto:244&, const auto:245&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; Index = int; Precision = double; T = double; Params = {double}]::<lambda(const auto:166&, const auto:167&)>; Index = int; Precision = double; T = double; Params = {double}]’
../GaussNewton/Newton.h:284:34:   required from ‘auto newton::gradientDescentApprox(const FNC&, const Index&, const Precision&, const Precision&, const T&, const Params& ...) [with FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1207()::<lambda(const auto:244&, const auto:245&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; Index = int; Precision = double; T = double; Params = {double}]’
OptionCalibration.h:126:45:   required from ‘auto optioncal::calibrate(const FN&, const Params& ...) [with FN = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1207()::<lambda(const auto:244&, const auto:245&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; Params = {double}]’
test.cpp:1245:51:   required from here
../FunctionalUtilities/FunctionalUtilities.h:430:22: error: no match for ‘operator=’ (operand types are ‘std::tuple<std::tuple<double>, double, double>’ and ‘void’)
             initValue=fn(initValue, i);
                      ^
In file included from /usr/include/c++/5/functional:55:0,
                 from /usr/include/c++/5/memory:79,
                 from ../FunctionalUtilities/catch.hpp:568,
                 from test.cpp:2:
/usr/include/c++/5/tuple:545:7: note: candidate: std::tuple< <template-parameter-1-1> >& std::tuple< <template-parameter-1-1> >::operator=(const std::tuple< <template-parameter-1-1> >&) [with _Elements = {std::tuple<double>, double, double}]
       operator=(const tuple& __in)
       ^
/usr/include/c++/5/tuple:545:7: note:   no known conversion for argument 1 from ‘void’ to ‘const std::tuple<std::tuple<double>, double, double>&’
/usr/include/c++/5/tuple:552:7: note: candidate: std::tuple< <template-parameter-1-1> >& std::tuple< <template-parameter-1-1> >::operator=(std::tuple< <template-parameter-1-1> >&&) [with _Elements = {std::tuple<double>, double, double}]
       operator=(tuple&& __in)
       ^
/usr/include/c++/5/tuple:552:7: note:   no known conversion for argument 1 from ‘void’ to ‘std::tuple<std::tuple<double>, double, double>&&’
/usr/include/c++/5/tuple:563:9: note: candidate: template<class ... _UElements, class> std::tuple< <template-parameter-1-1> >& std::tuple< <template-parameter-1-1> >::operator=(const std::tuple<_Args1 ...>&) [with _UElements = {_UElements ...}; <template-parameter-2-2> = <template-parameter-1-2>; _Elements = {std::tuple<double>, double, double}]
         operator=(const tuple<_UElements...>& __in)
         ^
/usr/include/c++/5/tuple:563:9: note:   template argument deduction/substitution failed:
In file included from test.cpp:3:0:
../FunctionalUtilities/FunctionalUtilities.h:430:22: note:   mismatched types ‘const std::tuple<_Elements ...>’ and ‘void’
             initValue=fn(initValue, i);
                      ^
In file included from /usr/include/c++/5/functional:55:0,
                 from /usr/include/c++/5/memory:79,
                 from ../FunctionalUtilities/catch.hpp:568,
                 from test.cpp:2:
/usr/include/c++/5/tuple:573:9: note: candidate: template<class ... _UElements, class> std::tuple< <template-parameter-1-1> >& std::tuple< <template-parameter-1-1> >::operator=(std::tuple<_Args1 ...>&&) [with _UElements = {_UElements ...}; <template-parameter-2-2> = <template-parameter-1-2>; _Elements = {std::tuple<double>, double, double}]
         operator=(tuple<_UElements...>&& __in)
         ^
/usr/include/c++/5/tuple:573:9: note:   template argument deduction/substitution failed:
In file included from test.cpp:3:0:
../FunctionalUtilities/FunctionalUtilities.h:430:22: note:   mismatched types ‘std::tuple<_Elements ...>’ and ‘void’
             initValue=fn(initValue, i);
                      ^
test.cpp: In function ‘void ____C_A_T_C_H____T_E_S_T____1207()’:
test.cpp:1247:35: error: no match for ‘operator<<’ (operand types are ‘std::basic_ostream<char>’ and ‘void’)
     std::cout<<"value at actual: "<<objFn(sigma)<<std::endl;
                                   ^
In file included from /usr/include/c++/5/istream:39:0,
                 from /usr/include/c++/5/sstream:38,
                 from ../FunctionalUtilities/catch.hpp:74,
                 from test.cpp:2:
/usr/include/c++/5/ostream:108:7: note: candidate: std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(std::basic_ostream<_CharT, _Traits>::__ostream_type& (*)(std::basic_ostream<_CharT, _Traits>::__ostream_type&)) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]
       operator<<(__ostream_type& (*__pf)(__ostream_type&))
       ^
/usr/include/c++/5/ostream:108:7: note:   no known conversion for argument 1 from ‘void’ to ‘std::basic_ostream<char>::__ostream_type& (*)(std::basic_ostream<char>::__ostream_type&) {aka std::basic_ostream<char>& (*)(std::basic_ostream<char>&)}’
/usr/include/c++/5/ostream:117:7: note: candidate: std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(std::basic_ostream<_CharT, _Traits>::__ios_type& (*)(std::basic_ostream<_CharT, _Traits>::__ios_type&)) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>; std::basic_ostream<_CharT, _Traits>::__ios_type = std::basic_ios<char>]
       operator<<(__ios_type& (*__pf)(__ios_type&))
       ^
/usr/include/c++/5/ostream:117:7: note:   no known conversion for argument 1 from ‘void’ to ‘std::basic_ostream<char>::__ios_type& (*)(std::basic_ostream<char>::__ios_type&) {aka std::basic_ios<char>& (*)(std::basic_ios<char>&)}’
/usr/include/c++/5/ostream:127:7: note: candidate: std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(std::ios_base& (*)(std::ios_base&)) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]
       operator<<(ios_base& (*__pf) (ios_base&))
       ^
/usr/include/c++/5/ostream:127:7: note:   no known conversion for argument 1 from ‘void’ to ‘std::ios_base& (*)(std::ios_base&)’
/usr/include/c++/5/ostream:166:7: note: candidate: std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(long int) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]
       operator<<(long __n)
       ^
/usr/include/c++/5/ostream:166:7: note:   no known conversion for argument 1 from ‘void’ to ‘long int’
/usr/include/c++/5/ostream:170:7: note: candidate: std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(long unsigned int) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]
       operator<<(unsigned long __n)
       ^
/usr/include/c++/5/ostream:170:7: note:   no known conversion for argument 1 from ‘void’ to ‘long unsigned int’
/usr/include/c++/5/ostream:174:7: note: candidate: std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(bool) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]
       operator<<(bool __n)
       ^
/usr/include/c++/5/ostream:174:7: note:   no known conversion for argument 1 from ‘void’ to ‘bool’
In file included from /usr/include/c++/5/ostream:638:0,
                 from /usr/include/c++/5/istream:39,
                 from /usr/include/c++/5/sstream:38,
                 from ../FunctionalUtilities/catch.hpp:74,
                 from test.cpp:2:
/usr/include/c++/5/bits/ostream.tcc:91:5: note: candidate: std::basic_ostream<_CharT, _Traits>& std::basic_ostream<_CharT, _Traits>::operator<<(short int) [with _CharT = char; _Traits = std::char_traits<char>]
     basic_ostream<_CharT, _Traits>::
     ^
/usr/include/c++/5/bits/ostream.tcc:91:5: note:   no known conversion for argument 1 from ‘void’ to ‘short int’
In file included from /usr/include/c++/5/istream:39:0,
                 from /usr/include/c++/5/sstream:38,
                 from ../FunctionalUtilities/catch.hpp:74,
                 from test.cpp:2:
/usr/include/c++/5/ostream:181:7: note: candidate: std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(short unsigned int) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]
       operator<<(unsigned short __n)
       ^
/usr/include/c++/5/ostream:181:7: note:   no known conversion for argument 1 from ‘void’ to ‘short unsigned int’
In file included from /usr/include/c++/5/ostream:638:0,
                 from /usr/include/c++/5/istream:39,
                 from /usr/include/c++/5/sstream:38,
                 from ../FunctionalUtilities/catch.hpp:74,
                 from test.cpp:2:
/usr/include/c++/5/bits/ostream.tcc:105:5: note: candidate: std::basic_ostream<_CharT, _Traits>& std::basic_ostream<_CharT, _Traits>::operator<<(int) [with _CharT = char; _Traits = std::char_traits<char>]
     basic_ostream<_CharT, _Traits>::
     ^
/usr/include/c++/5/bits/ostream.tcc:105:5: note:   no known conversion for argument 1 from ‘void’ to ‘int’
In file included from /usr/include/c++/5/istream:39:0,
                 from /usr/include/c++/5/sstream:38,
                 from ../FunctionalUtilities/catch.hpp:74,
                 from test.cpp:2:
/usr/include/c++/5/ostream:192:7: note: candidate: std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(unsigned int) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]
       operator<<(unsigned int __n)
       ^
/usr/include/c++/5/ostream:192:7: note:   no known conversion for argument 1 from ‘void’ to ‘unsigned int’
/usr/include/c++/5/ostream:201:7: note: candidate: std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(long long int) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]
       operator<<(long long __n)
       ^
/usr/include/c++/5/ostream:201:7: note:   no known conversion for argument 1 from ‘void’ to ‘long long int’
/usr/include/c++/5/ostream:205:7: note: candidate: std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(long long unsigned int) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]
       operator<<(unsigned long long __n)
       ^
/usr/include/c++/5/ostream:205:7: note:   no known conversion for argument 1 from ‘void’ to ‘long long unsigned int’
/usr/include/c++/5/ostream:220:7: note: candidate: std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(double) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]
       operator<<(double __f)
       ^
/usr/include/c++/5/ostream:220:7: note:   no known conversion for argument 1 from ‘void’ to ‘double’
/usr/include/c++/5/ostream:224:7: note: candidate: std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(float) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]
       operator<<(float __f)
       ^
/usr/include/c++/5/ostream:224:7: note:   no known conversion for argument 1 from ‘void’ to ‘float’
/usr/include/c++/5/ostream:232:7: note: candidate: std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(long double) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]
       operator<<(long double __f)
       ^
/usr/include/c++/5/ostream:232:7: note:   no known conversion for argument 1 from ‘void’ to ‘long double’
/usr/include/c++/5/ostream:245:7: note: candidate: std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(const void*) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]
       operator<<(const void* __p)
       ^
/usr/include/c++/5/ostream:245:7: note:   no known conversion for argument 1 from ‘void’ to ‘const void*’
In file included from /usr/include/c++/5/ostream:638:0,
                 from /usr/include/c++/5/istream:39,
                 from /usr/include/c++/5/sstream:38,
                 from ../FunctionalUtilities/catch.hpp:74,
                 from test.cpp:2:
/usr/include/c++/5/bits/ostream.tcc:119:5: note: candidate: std::basic_ostream<_CharT, _Traits>& std::basic_ostream<_CharT, _Traits>::operator<<(std::basic_ostream<_CharT, _Traits>::__streambuf_type*) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__streambuf_type = std::basic_streambuf<char>]
     basic_ostream<_CharT, _Traits>::
     ^
/usr/include/c++/5/bits/ostream.tcc:119:5: note:   no known conversion for argument 1 from ‘void’ to ‘std::basic_ostream<char>::__streambuf_type* {aka std::basic_streambuf<char>*}’
In file included from OptionPricing.h:3:0,
                 from test.cpp:5:
/usr/include/c++/5/complex:526:5: note: candidate: template<class _Tp, class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::complex<_Tp>&)
     operator<<(basic_ostream<_CharT, _Traits>& __os, const complex<_Tp>& __x)
     ^
/usr/include/c++/5/complex:526:5: note:   template argument deduction/substitution failed:
test.cpp:1247:48: note:   mismatched types ‘const std::complex<_Tp>’ and ‘void’
     std::cout<<"value at actual: "<<objFn(sigma)<<std::endl;
                                                ^
In file included from ../FunctionalUtilities/catch.hpp:1503:0,
                 from test.cpp:2:
/usr/include/c++/5/iomanip:363:5: note: candidate: template<class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, std::_Put_time<_CharT>)
     operator<<(basic_ostream<_CharT, _Traits>& __os, _Put_time<_CharT> __f)
     ^
/usr/include/c++/5/iomanip:363:5: note:   template argument deduction/substitution failed:
test.cpp:1247:48: note:   mismatched types ‘std::_Put_time<_CharT>’ and ‘void’
     std::cout<<"value at actual: "<<objFn(sigma)<<std::endl;
                                                ^
In file included from ../FunctionalUtilities/catch.hpp:1503:0,
                 from test.cpp:2:
/usr/include/c++/5/iomanip:311:5: note: candidate: template<class _CharT, class _Traits, class _MoneyT> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, std::_Put_money<_MoneyT>)
     operator<<(basic_ostream<_CharT, _Traits>& __os, _Put_money<_MoneyT> __f)
     ^
/usr/include/c++/5/iomanip:311:5: note:   template argument deduction/substitution failed:
test.cpp:1247:48: note:   mismatched types ‘std::_Put_money<_MoneyT>’ and ‘void’
     std::cout<<"value at actual: "<<objFn(sigma)<<std::endl;
                                                ^
In file included from ../FunctionalUtilities/catch.hpp:1503:0,
                 from test.cpp:2:
/usr/include/c++/5/iomanip:238:5: note: candidate: template<class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, std::_Setw)
     operator<<(basic_ostream<_CharT, _Traits>& __os, _Setw __f)
     ^
/usr/include/c++/5/iomanip:238:5: note:   template argument deduction/substitution failed:
test.cpp:1247:42: note:   cannot convert ‘objFn.optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&)::<lambda(const auto:176& ...)> [with auto:176 = {double}; PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1207()::<lambda(const auto:244&, const auto:245&)>; DiscreteU = std::vector<double>](sigma)’ (type ‘void’) to type ‘std::_Setw’
     std::cout<<"value at actual: "<<objFn(sigma)<<std::endl;
                                          ^
In file included from ../FunctionalUtilities/catch.hpp:1503:0,
                 from test.cpp:2:
/usr/include/c++/5/iomanip:208:5: note: candidate: template<class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, std::_Setprecision)
     operator<<(basic_ostream<_CharT, _Traits>& __os, _Setprecision __f)
     ^
/usr/include/c++/5/iomanip:208:5: note:   template argument deduction/substitution failed:
test.cpp:1247:42: note:   cannot convert ‘objFn.optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&)::<lambda(const auto:176& ...)> [with auto:176 = {double}; PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1207()::<lambda(const auto:244&, const auto:245&)>; DiscreteU = std::vector<double>](sigma)’ (type ‘void’) to type ‘std::_Setprecision’
     std::cout<<"value at actual: "<<objFn(sigma)<<std::endl;
                                          ^
In file included from ../FunctionalUtilities/catch.hpp:1503:0,
                 from test.cpp:2:
/usr/include/c++/5/iomanip:178:5: note: candidate: template<class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, std::_Setfill<_CharT>)
     operator<<(basic_ostream<_CharT, _Traits>& __os, _Setfill<_CharT> __f)
     ^
/usr/include/c++/5/iomanip:178:5: note:   template argument deduction/substitution failed:
test.cpp:1247:48: note:   mismatched types ‘std::_Setfill<_CharT>’ and ‘void’
     std::cout<<"value at actual: "<<objFn(sigma)<<std::endl;
                                                ^
In file included from ../FunctionalUtilities/catch.hpp:1503:0,
                 from test.cpp:2:
/usr/include/c++/5/iomanip:143:5: note: candidate: template<class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, std::_Setbase)
     operator<<(basic_ostream<_CharT, _Traits>& __os, _Setbase __f)
     ^
/usr/include/c++/5/iomanip:143:5: note:   template argument deduction/substitution failed:
test.cpp:1247:42: note:   cannot convert ‘objFn.optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&)::<lambda(const auto:176& ...)> [with auto:176 = {double}; PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1207()::<lambda(const auto:244&, const auto:245&)>; DiscreteU = std::vector<double>](sigma)’ (type ‘void’) to type ‘std::_Setbase’
     std::cout<<"value at actual: "<<objFn(sigma)<<std::endl;
                                          ^
In file included from ../FunctionalUtilities/catch.hpp:1503:0,
                 from test.cpp:2:
/usr/include/c++/5/iomanip:109:5: note: candidate: template<class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, std::_Setiosflags)
     operator<<(basic_ostream<_CharT, _Traits>& __os, _Setiosflags __f)
     ^
/usr/include/c++/5/iomanip:109:5: note:   template argument deduction/substitution failed:
test.cpp:1247:42: note:   cannot convert ‘objFn.optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&)::<lambda(const auto:176& ...)> [with auto:176 = {double}; PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1207()::<lambda(const auto:244&, const auto:245&)>; DiscreteU = std::vector<double>](sigma)’ (type ‘void’) to type ‘std::_Setiosflags’
     std::cout<<"value at actual: "<<objFn(sigma)<<std::endl;
                                          ^
In file included from ../FunctionalUtilities/catch.hpp:1503:0,
                 from test.cpp:2:
/usr/include/c++/5/iomanip:79:5: note: candidate: template<class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, std::_Resetiosflags)
     operator<<(basic_ostream<_CharT, _Traits>& __os, _Resetiosflags __f)
     ^
/usr/include/c++/5/iomanip:79:5: note:   template argument deduction/substitution failed:
test.cpp:1247:42: note:   cannot convert ‘objFn.optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&)::<lambda(const auto:176& ...)> [with auto:176 = {double}; PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1207()::<lambda(const auto:244&, const auto:245&)>; DiscreteU = std::vector<double>](sigma)’ (type ‘void’) to type ‘std::_Resetiosflags’
     std::cout<<"value at actual: "<<objFn(sigma)<<std::endl;
                                          ^
In file included from /usr/include/c++/5/memory:82:0,
                 from ../FunctionalUtilities/catch.hpp:568,
                 from test.cpp:2:
/usr/include/c++/5/bits/shared_ptr.h:66:5: note: candidate: template<class _Ch, class _Tr, class _Tp, __gnu_cxx::_Lock_policy _Lp> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::__shared_ptr<_Tp, _Lp>&)
     operator<<(std::basic_ostream<_Ch, _Tr>& __os,
     ^
/usr/include/c++/5/bits/shared_ptr.h:66:5: note:   template argument deduction/substitution failed:
test.cpp:1247:48: note:   mismatched types ‘const std::__shared_ptr<_Tp, _Lp>’ and ‘void’
     std::cout<<"value at actual: "<<objFn(sigma)<<std::endl;
                                                ^
In file included from /usr/include/c++/5/random:51:0,
                 from /usr/include/c++/5/bits/stl_algo.h:66,
                 from /usr/include/c++/5/algorithm:62,
                 from ../FunctionalUtilities/catch.hpp:76,
                 from test.cpp:2:
/usr/include/c++/5/bits/random.tcc:3160:5: note: candidate: template<class _RealType, class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::piecewise_linear_distribution<_RealType>&)
     operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     ^
/usr/include/c++/5/bits/random.tcc:3160:5: note:   template argument deduction/substitution failed:
test.cpp:1247:48: note:   mismatched types ‘const std::piecewise_linear_distribution<_RealType>’ and ‘void’
     std::cout<<"value at actual: "<<objFn(sigma)<<std::endl;
                                                ^
In file included from /usr/include/c++/5/random:51:0,
                 from /usr/include/c++/5/bits/stl_algo.h:66,
                 from /usr/include/c++/5/algorithm:62,
                 from ../FunctionalUtilities/catch.hpp:76,
                 from test.cpp:2:
/usr/include/c++/5/bits/random.tcc:2944:5: note: candidate: template<class _RealType, class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::piecewise_constant_distribution<_RealType>&)
     operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     ^
/usr/include/c++/5/bits/random.tcc:2944:5: note:   template argument deduction/substitution failed:
test.cpp:1247:48: note:   mismatched types ‘const std::piecewise_constant_distribution<_RealType>’ and ‘void’
     std::cout<<"value at actual: "<<objFn(sigma)<<std::endl;
                                                ^
In file included from /usr/include/c++/5/random:51:0,
                 from /usr/include/c++/5/bits/stl_algo.h:66,
                 from /usr/include/c++/5/algorithm:62,
                 from ../FunctionalUtilities/catch.hpp:76,
                 from test.cpp:2:
/usr/include/c++/5/bits/random.tcc:2734:5: note: candidate: template<class _IntType, class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::discrete_distribution<_IntType>&)
     operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     ^
/usr/include/c++/5/bits/random.tcc:2734:5: note:   template argument deduction/substitution failed:
test.cpp:1247:48: note:   mismatched types ‘const std::discrete_distribution<_IntType>’ and ‘void’
     std::cout<<"value at actual: "<<objFn(sigma)<<std::endl;
                                                ^
In file included from /usr/include/c++/5/random:51:0,
                 from /usr/include/c++/5/bits/stl_algo.h:66,
                 from /usr/include/c++/5/algorithm:62,
                 from ../FunctionalUtilities/catch.hpp:76,
                 from test.cpp:2:
/usr/include/c++/5/bits/random.tcc:2275:5: note: candidate: template<class _RealType, class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::student_t_distribution<_RealType>&)
     operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     ^
/usr/include/c++/5/bits/random.tcc:2275:5: note:   template argument deduction/substitution failed:
test.cpp:1247:48: note:   mismatched types ‘const std::student_t_distribution<_RealType>’ and ‘void’
     std::cout<<"value at actual: "<<objFn(sigma)<<std::endl;
                                                ^
In file included from /usr/include/c++/5/random:51:0,
                 from /usr/include/c++/5/bits/stl_algo.h:66,
                 from /usr/include/c++/5/algorithm:62,
                 from ../FunctionalUtilities/catch.hpp:76,
                 from test.cpp:2:
/usr/include/c++/5/bits/random.tcc:2200:5: note: candidate: template<class _RealType, class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::fisher_f_distribution<_RealType>&)
     operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     ^
/usr/include/c++/5/bits/random.tcc:2200:5: note:   template argument deduction/substitution failed:
test.cpp:1247:48: note:   mismatched types ‘const std::fisher_f_distribution<_RealType>’ and ‘void’
     std::cout<<"value at actual: "<<objFn(sigma)<<std::endl;
                                                ^
In file included from /usr/include/c++/5/random:51:0,
                 from /usr/include/c++/5/bits/stl_algo.h:66,
                 from /usr/include/c++/5/algorithm:62,
                 from ../FunctionalUtilities/catch.hpp:76,
                 from test.cpp:2:
/usr/include/c++/5/bits/random.tcc:2036:5: note: candidate: template<class _RealType, class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::chi_squared_distribution<_RealType>&)
     operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     ^
/usr/include/c++/5/bits/random.tcc:2036:5: note:   template argument deduction/substitution failed:
test.cpp:1247:48: note:   mismatched types ‘const std::chi_squared_distribution<_RealType>’ and ‘void’
     std::cout<<"value at actual: "<<objFn(sigma)<<std::endl;
                                                ^
In file included from /usr/include/c++/5/random:51:0,
                 from /usr/include/c++/5/bits/stl_algo.h:66,
                 from /usr/include/c++/5/algorithm:62,
                 from ../FunctionalUtilities/catch.hpp:76,
                 from test.cpp:2:
/usr/include/c++/5/bits/random.tcc:1963:5: note: candidate: template<class _RealType, class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::lognormal_distribution<_RealType>&)
     operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     ^
/usr/include/c++/5/bits/random.tcc:1963:5: note:   template argument deduction/substitution failed:
test.cpp:1247:48: note:   mismatched types ‘const std::lognormal_distribution<_RealType>’ and ‘void’
     std::cout<<"value at actual: "<<objFn(sigma)<<std::endl;
                                                ^
In file included from /usr/include/c++/5/random:51:0,
                 from /usr/include/c++/5/bits/stl_algo.h:66,
                 from /usr/include/c++/5/algorithm:62,
                 from ../FunctionalUtilities/catch.hpp:76,
                 from test.cpp:2:
/usr/include/c++/5/bits/random.tcc:1667:5: note: candidate: template<class _IntType, class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::binomial_distribution<_IntType>&)
     operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     ^
/usr/include/c++/5/bits/random.tcc:1667:5: note:   template argument deduction/substitution failed:
test.cpp:1247:48: note:   mismatched types ‘const std::binomial_distribution<_IntType>’ and ‘void’
     std::cout<<"value at actual: "<<objFn(sigma)<<std::endl;
                                                ^
In file included from /usr/include/c++/5/random:51:0,
                 from /usr/include/c++/5/bits/stl_algo.h:66,
                 from /usr/include/c++/5/algorithm:62,
                 from ../FunctionalUtilities/catch.hpp:76,
                 from test.cpp:2:
/usr/include/c++/5/bits/random.tcc:1400:5: note: candidate: template<class _IntType, class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::poisson_distribution<_IntType>&)
     operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     ^
/usr/include/c++/5/bits/random.tcc:1400:5: note:   template argument deduction/substitution failed:
test.cpp:1247:48: note:   mismatched types ‘const std::poisson_distribution<_IntType>’ and ‘void’
     std::cout<<"value at actual: "<<objFn(sigma)<<std::endl;
                                                ^
In file included from /usr/include/c++/5/random:51:0,
                 from /usr/include/c++/5/bits/stl_algo.h:66,
                 from /usr/include/c++/5/algorithm:62,
                 from ../FunctionalUtilities/catch.hpp:76,
                 from test.cpp:2:
/usr/include/c++/5/bits/random.tcc:1195:5: note: candidate: template<class _IntType, class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::negative_binomial_distribution<_IntType>&)
     operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     ^
/usr/include/c++/5/bits/random.tcc:1195:5: note:   template argument deduction/substitution failed:
test.cpp:1247:48: note:   mismatched types ‘const std::negative_binomial_distribution<_IntType>’ and ‘void’
     std::cout<<"value at actual: "<<objFn(sigma)<<std::endl;
                                                ^
In file included from /usr/include/c++/5/random:51:0,
                 from /usr/include/c++/5/bits/stl_algo.h:66,
                 from /usr/include/c++/5/algorithm:62,
                 from ../FunctionalUtilities/catch.hpp:76,
                 from test.cpp:2:
/usr/include/c++/5/bits/random.tcc:831:5: note: candidate: template<class _RandomNumberEngine, long unsigned int __k, class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::shuffle_order_engine<_RandomNumberEngine, __k>&)
     operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     ^
/usr/include/c++/5/bits/random.tcc:831:5: note:   template argument deduction/substitution failed:
test.cpp:1247:48: note:   mismatched types ‘const std::shuffle_order_engine<_RandomNumberEngine, __k>’ and ‘void’
     std::cout<<"value at actual: "<<objFn(sigma)<<std::endl;
                                                ^
In file included from /usr/include/c++/5/random:51:0,
                 from /usr/include/c++/5/bits/stl_algo.h:66,
                 from /usr/include/c++/5/algorithm:62,
                 from ../FunctionalUtilities/catch.hpp:76,
                 from test.cpp:2:
/usr/include/c++/5/bits/random.tcc:702:5: note: candidate: template<class _RandomNumberEngine, long unsigned int __p, long unsigned int __r, class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::discard_block_engine<_RandomNumberEngine, __p, __r>&)
     operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     ^
/usr/include/c++/5/bits/random.tcc:702:5: note:   template argument deduction/substitution failed:
test.cpp:1247:48: note:   mismatched types ‘const std::discard_block_engine<_RandomNumberEngine, __p, __r>’ and ‘void’
     std::cout<<"value at actual: "<<objFn(sigma)<<std::endl;
                                                ^
In file included from /usr/include/c++/5/random:51:0,
                 from /usr/include/c++/5/bits/stl_algo.h:66,
                 from /usr/include/c++/5/algorithm:62,
                 from ../FunctionalUtilities/catch.hpp:76,
                 from test.cpp:2:
/usr/include/c++/5/bits/random.tcc:632:5: note: candidate: template<class _UIntType, long unsigned int __w, long unsigned int __s, long unsigned int __r, class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::subtract_with_carry_engine<_UIntType, __w, __s, __r>&)
     operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     ^
/usr/include/c++/5/bits/random.tcc:632:5: note:   template argument deduction/substitution failed:
test.cpp:1247:48: note:   mismatched types ‘const std::subtract_with_carry_engine<_UIntType, __w, __s, __r>’ and ‘void’
     std::cout<<"value at actual: "<<objFn(sigma)<<std::endl;
                                                ^
In file included from /usr/include/c++/5/random:51:0,
                 from /usr/include/c++/5/bits/stl_algo.h:66,
                 from /usr/include/c++/5/algorithm:62,
                 from ../FunctionalUtilities/catch.hpp:76,
                 from test.cpp:2:
/usr/include/c++/5/bits/random.tcc:156:5: note: candidate: template<class _UIntType, _UIntType __a, _UIntType __c, _UIntType __m, class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::linear_congruential_engine<_UIntType, __a, __c, __m>&)
     operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     ^
/usr/include/c++/5/bits/random.tcc:156:5: note:   template argument deduction/substitution failed:
test.cpp:1247:48: note:   mismatched types ‘const std::linear_congruential_engine<_UIntType, __a, __c, __m>’ and ‘void’
     std::cout<<"value at actual: "<<objFn(sigma)<<std::endl;
                                                ^
In file included from /usr/include/c++/5/random:51:0,
                 from /usr/include/c++/5/bits/stl_algo.h:66,
                 from /usr/include/c++/5/algorithm:62,
                 from ../FunctionalUtilities/catch.hpp:76,
                 from test.cpp:2:
/usr/include/c++/5/bits/random.tcc:2598:5: note: candidate: template<class _RealType, class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::extreme_value_distribution<_RealType>&)
     operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     ^
/usr/include/c++/5/bits/random.tcc:2598:5: note:   template argument deduction/substitution failed:
test.cpp:1247:48: note:   mismatched types ‘const std::extreme_value_distribution<_RealType>’ and ‘void’
     std::cout<<"value at actual: "<<objFn(sigma)<<std::endl;
                                                ^
In file included from /usr/include/c++/5/random:51:0,
                 from /usr/include/c++/5/bits/stl_algo.h:66,
                 from /usr/include/c++/5/algorithm:62,
                 from ../FunctionalUtilities/catch.hpp:76,
                 from test.cpp:2:
/usr/include/c++/5/bits/random.tcc:2522:5: note: candidate: template<class _RealType, class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::weibull_distribution<_RealType>&)
     operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     ^
/usr/include/c++/5/bits/random.tcc:2522:5: note:   template argument deduction/substitution failed:
test.cpp:1247:48: note:   mismatched types ‘const std::weibull_distribution<_RealType>’ and ‘void’
     std::cout<<"value at actual: "<<objFn(sigma)<<std::endl;
                                                ^
In file included from /usr/include/c++/5/random:51:0,
                 from /usr/include/c++/5/bits/stl_algo.h:66,
                 from /usr/include/c++/5/algorithm:62,
                 from ../FunctionalUtilities/catch.hpp:76,
                 from test.cpp:2:
/usr/include/c++/5/bits/random.tcc:1731:5: note: candidate: template<class _RealType, class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::exponential_distribution<_RealType>&)
     operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     ^
/usr/include/c++/5/bits/random.tcc:1731:5: note:   template argument deduction/substitution failed:
test.cpp:1247:48: note:   mismatched types ‘const std::exponential_distribution<_RealType>’ and ‘void’
     std::cout<<"value at actual: "<<objFn(sigma)<<std::endl;
                                                ^
In file included from /usr/include/c++/5/random:51:0,
                 from /usr/include/c++/5/bits/stl_algo.h:66,
                 from /usr/include/c++/5/algorithm:62,
                 from ../FunctionalUtilities/catch.hpp:76,
                 from test.cpp:2:
/usr/include/c++/5/bits/random.tcc:2444:5: note: candidate: template<class _RealType1, class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::gamma_distribution<_RealType>&)
     operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     ^
/usr/include/c++/5/bits/random.tcc:2444:5: note:   template argument deduction/substitution failed:
test.cpp:1247:48: note:   mismatched types ‘const std::gamma_distribution<_RealType>’ and ‘void’
     std::cout<<"value at actual: "<<objFn(sigma)<<std::endl;
                                                ^
In file included from /usr/include/c++/5/random:51:0,
                 from /usr/include/c++/5/bits/stl_algo.h:66,
                 from /usr/include/c++/5/algorithm:62,
                 from ../FunctionalUtilities/catch.hpp:76,
                 from test.cpp:2:
/usr/include/c++/5/bits/random.tcc:1080:5: note: candidate: template<class _IntType, class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::geometric_distribution<_IntType>&)
     operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     ^
/usr/include/c++/5/bits/random.tcc:1080:5: note:   template argument deduction/substitution failed:
test.cpp:1247:48: note:   mismatched types ‘const std::geometric_distribution<_IntType>’ and ‘void’
     std::cout<<"value at actual: "<<objFn(sigma)<<std::endl;
                                                ^
In file included from /usr/include/c++/5/random:51:0,
                 from /usr/include/c++/5/bits/stl_algo.h:66,
                 from /usr/include/c++/5/algorithm:62,
                 from ../FunctionalUtilities/catch.hpp:76,
                 from test.cpp:2:
/usr/include/c++/5/bits/random.tcc:1898:5: note: candidate: template<class _RealType1, class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::normal_distribution<_RealType>&)
     operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     ^
/usr/include/c++/5/bits/random.tcc:1898:5: note:   template argument deduction/substitution failed:
test.cpp:1247:48: note:   mismatched types ‘const std::normal_distribution<_RealType>’ and ‘void’
     std::cout<<"value at actual: "<<objFn(sigma)<<std::endl;
                                                ^
In file included from /usr/include/c++/5/random:51:0,
                 from /usr/include/c++/5/bits/stl_algo.h:66,
                 from /usr/include/c++/5/algorithm:62,
                 from ../FunctionalUtilities/catch.hpp:76,
                 from test.cpp:2:
/usr/include/c++/5/bits/random.tcc:998:5: note: candidate: template<class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::bernoulli_distribution&)
     operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     ^
/usr/include/c++/5/bits/random.tcc:998:5: note:   template argument deduction/substitution failed:
test.cpp:1247:42: note:   cannot convert ‘objFn.optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&)::<lambda(const auto:176& ...)> [with auto:176 = {double}; PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1207()::<lambda(const auto:244&, const auto:245&)>; DiscreteU = std::vector<double>](sigma)’ (type ‘void’) to type ‘const std::bernoulli_distribution&’
     std::cout<<"value at actual: "<<objFn(sigma)<<std::endl;
                                          ^
In file included from /usr/include/c++/5/random:51:0,
                 from /usr/include/c++/5/bits/stl_algo.h:66,
                 from /usr/include/c++/5/algorithm:62,
                 from ../FunctionalUtilities/catch.hpp:76,
                 from test.cpp:2:
/usr/include/c++/5/bits/random.tcc:2123:5: note: candidate: template<class _RealType, class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::cauchy_distribution<_RealType>&)
     operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     ^
/usr/include/c++/5/bits/random.tcc:2123:5: note:   template argument deduction/substitution failed:
test.cpp:1247:48: note:   mismatched types ‘const std::cauchy_distribution<_RealType>’ and ‘void’
     std::cout<<"value at actual: "<<objFn(sigma)<<std::endl;
                                                ^
In file included from /usr/include/c++/5/random:51:0,
                 from /usr/include/c++/5/bits/stl_algo.h:66,
                 from /usr/include/c++/5/algorithm:62,
                 from ../FunctionalUtilities/catch.hpp:76,
                 from test.cpp:2:
/usr/include/c++/5/bits/random.tcc:936:5: note: candidate: template<class _RealType, class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::uniform_real_distribution<_IntType>&)
     operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     ^
/usr/include/c++/5/bits/random.tcc:936:5: note:   template argument deduction/substitution failed:
test.cpp:1247:48: note:   mismatched types ‘const std::uniform_real_distribution<_IntType>’ and ‘void’
     std::cout<<"value at actual: "<<objFn(sigma)<<std::endl;
                                                ^
In file included from /usr/include/c++/5/random:51:0,
                 from /usr/include/c++/5/bits/stl_algo.h:66,
                 from /usr/include/c++/5/algorithm:62,
                 from ../FunctionalUtilities/catch.hpp:76,
                 from test.cpp:2:
/usr/include/c++/5/bits/random.tcc:877:5: note: candidate: template<class _IntType, class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::uniform_int_distribution<_IntType>&)
     operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     ^
/usr/include/c++/5/bits/random.tcc:877:5: note:   template argument deduction/substitution failed:
test.cpp:1247:48: note:   mismatched types ‘const std::uniform_int_distribution<_IntType>’ and ‘void’
     std::cout<<"value at actual: "<<objFn(sigma)<<std::endl;
                                                ^
In file included from /usr/include/c++/5/random:51:0,
                 from /usr/include/c++/5/bits/stl_algo.h:66,
                 from /usr/include/c++/5/algorithm:62,
                 from ../FunctionalUtilities/catch.hpp:76,
                 from test.cpp:2:
/usr/include/c++/5/bits/random.tcc:477:5: note: candidate: template<class _UIntType1, long unsigned int __w1, long unsigned int __n1, long unsigned int __m1, long unsigned int __r1, _UIntType1 __a1, long unsigned int __u1, _UIntType1 __d1, long unsigned int __s1, _UIntType1 __b1, long unsigned int __t1, _UIntType1 __c1, long unsigned int __l1, _UIntType1 __f1, class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d, __s, __b, __t, __c, __l, __f>&)
     operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     ^
/usr/include/c++/5/bits/random.tcc:477:5: note:   template argument deduction/substitution failed:
test.cpp:1247:48: note:   mismatched types ‘const std::mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d, __s, __b, __t, __c, __l, __f>’ and ‘void’
     std::cout<<"value at actual: "<<objFn(sigma)<<std::endl;
                                                ^
In file included from /usr/include/c++/5/random:49:0,
                 from /usr/include/c++/5/bits/stl_algo.h:66,
                 from /usr/include/c++/5/algorithm:62,
                 from ../FunctionalUtilities/catch.hpp:76,
                 from test.cpp:2:
/usr/include/c++/5/bits/random.h:1269:5: note: candidate: template<class _RandomNumberEngine, long unsigned int __w, class _UIntType, class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::independent_bits_engine<_RandomNumberEngine, __w, _UIntType>&)
     operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     ^
/usr/include/c++/5/bits/random.h:1269:5: note:   template argument deduction/substitution failed:
test.cpp:1247:48: note:   mismatched types ‘const std::independent_bits_engine<_RandomNumberEngine, __w, _UIntType>’ and ‘void’
     std::cout<<"value at actual: "<<objFn(sigma)<<std::endl;
                                                ^
In file included from /usr/include/c++/5/istream:39:0,
                 from /usr/include/c++/5/sstream:38,
                 from ../FunctionalUtilities/catch.hpp:74,
                 from test.cpp:2:
/usr/include/c++/5/ostream:628:5: note: candidate: template<class _CharT, class _Traits, class _Tp> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&&, const _Tp&)
     operator<<(basic_ostream<_CharT, _Traits>&& __os, const _Tp& __x)
     ^
/usr/include/c++/5/ostream:628:5: note:   template argument deduction/substitution failed:
/usr/include/c++/5/ostream:574:5: note: candidate: template<class _Traits> std::basic_ostream<char, _Traits>& std::operator<<(std::basic_ostream<char, _Traits>&, const unsigned char*)
     operator<<(basic_ostream<char, _Traits>& __out, const unsigned char* __s)
     ^
/usr/include/c++/5/ostream:574:5: note:   template argument deduction/substitution failed:
test.cpp:1247:42: note:   cannot convert ‘objFn.optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&)::<lambda(const auto:176& ...)> [with auto:176 = {double}; PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1207()::<lambda(const auto:244&, const auto:245&)>; DiscreteU = std::vector<double>](sigma)’ (type ‘void’) to type ‘const unsigned char*’
     std::cout<<"value at actual: "<<objFn(sigma)<<std::endl;
                                          ^
In file included from /usr/include/c++/5/istream:39:0,
                 from /usr/include/c++/5/sstream:38,
                 from ../FunctionalUtilities/catch.hpp:74,
                 from test.cpp:2:
/usr/include/c++/5/ostream:569:5: note: candidate: template<class _Traits> std::basic_ostream<char, _Traits>& std::operator<<(std::basic_ostream<char, _Traits>&, const signed char*)
     operator<<(basic_ostream<char, _Traits>& __out, const signed char* __s)
     ^
/usr/include/c++/5/ostream:569:5: note:   template argument deduction/substitution failed:
test.cpp:1247:42: note:   cannot convert ‘objFn.optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&)::<lambda(const auto:176& ...)> [with auto:176 = {double}; PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1207()::<lambda(const auto:244&, const auto:245&)>; DiscreteU = std::vector<double>](sigma)’ (type ‘void’) to type ‘const signed char*’
     std::cout<<"value at actual: "<<objFn(sigma)<<std::endl;
                                          ^
In file included from /usr/include/c++/5/istream:39:0,
                 from /usr/include/c++/5/sstream:38,
                 from ../FunctionalUtilities/catch.hpp:74,
                 from test.cpp:2:
/usr/include/c++/5/ostream:556:5: note: candidate: template<class _Traits> std::basic_ostream<char, _Traits>& std::operator<<(std::basic_ostream<char, _Traits>&, const char*)
     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
     ^
/usr/include/c++/5/ostream:556:5: note:   template argument deduction/substitution failed:
test.cpp:1247:42: note:   cannot convert ‘objFn.optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&)::<lambda(const auto:176& ...)> [with auto:176 = {double}; PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1207()::<lambda(const auto:244&, const auto:245&)>; DiscreteU = std::vector<double>](sigma)’ (type ‘void’) to type ‘const char*’
     std::cout<<"value at actual: "<<objFn(sigma)<<std::endl;
                                          ^
In file included from /usr/include/c++/5/ostream:638:0,
                 from /usr/include/c++/5/istream:39,
                 from /usr/include/c++/5/sstream:38,
                 from ../FunctionalUtilities/catch.hpp:74,
                 from test.cpp:2:
/usr/include/c++/5/bits/ostream.tcc:321:5: note: candidate: template<class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const char*)
     operator<<(basic_ostream<_CharT, _Traits>& __out, const char* __s)
     ^
/usr/include/c++/5/bits/ostream.tcc:321:5: note:   template argument deduction/substitution failed:
test.cpp:1247:42: note:   cannot convert ‘objFn.optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&)::<lambda(const auto:176& ...)> [with auto:176 = {double}; PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1207()::<lambda(const auto:244&, const auto:245&)>; DiscreteU = std::vector<double>](sigma)’ (type ‘void’) to type ‘const char*’
     std::cout<<"value at actual: "<<objFn(sigma)<<std::endl;
                                          ^
In file included from /usr/include/c++/5/istream:39:0,
                 from /usr/include/c++/5/sstream:38,
                 from ../FunctionalUtilities/catch.hpp:74,
                 from test.cpp:2:
/usr/include/c++/5/ostream:539:5: note: candidate: template<class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const _CharT*)
     operator<<(basic_ostream<_CharT, _Traits>& __out, const _CharT* __s)
     ^
/usr/include/c++/5/ostream:539:5: note:   template argument deduction/substitution failed:
test.cpp:1247:48: note:   mismatched types ‘const _CharT*’ and ‘void’
     std::cout<<"value at actual: "<<objFn(sigma)<<std::endl;
                                                ^
In file included from /usr/include/c++/5/istream:39:0,
                 from /usr/include/c++/5/sstream:38,
                 from ../FunctionalUtilities/catch.hpp:74,
                 from test.cpp:2:
/usr/include/c++/5/ostream:519:5: note: candidate: template<class _Traits> std::basic_ostream<char, _Traits>& std::operator<<(std::basic_ostream<char, _Traits>&, unsigned char)
     operator<<(basic_ostream<char, _Traits>& __out, unsigned char __c)
     ^
/usr/include/c++/5/ostream:519:5: note:   template argument deduction/substitution failed:
test.cpp:1247:42: note:   cannot convert ‘objFn.optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&)::<lambda(const auto:176& ...)> [with auto:176 = {double}; PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1207()::<lambda(const auto:244&, const auto:245&)>; DiscreteU = std::vector<double>](sigma)’ (type ‘void’) to type ‘unsigned char’
     std::cout<<"value at actual: "<<objFn(sigma)<<std::endl;
                                          ^
In file included from /usr/include/c++/5/istream:39:0,
                 from /usr/include/c++/5/sstream:38,
                 from ../FunctionalUtilities/catch.hpp:74,
                 from test.cpp:2:
/usr/include/c++/5/ostream:514:5: note: candidate: template<class _Traits> std::basic_ostream<char, _Traits>& std::operator<<(std::basic_ostream<char, _Traits>&, signed char)
     operator<<(basic_ostream<char, _Traits>& __out, signed char __c)
     ^
/usr/include/c++/5/ostream:514:5: note:   template argument deduction/substitution failed:
test.cpp:1247:42: note:   cannot convert ‘objFn.optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&)::<lambda(const auto:176& ...)> [with auto:176 = {double}; PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1207()::<lambda(const auto:244&, const auto:245&)>; DiscreteU = std::vector<double>](sigma)’ (type ‘void’) to type ‘signed char’
     std::cout<<"value at actual: "<<objFn(sigma)<<std::endl;
                                          ^
In file included from /usr/include/c++/5/istream:39:0,
                 from /usr/include/c++/5/sstream:38,
                 from ../FunctionalUtilities/catch.hpp:74,
                 from test.cpp:2:
/usr/include/c++/5/ostream:508:5: note: candidate: template<class _Traits> std::basic_ostream<char, _Traits>& std::operator<<(std::basic_ostream<char, _Traits>&, char)
     operator<<(basic_ostream<char, _Traits>& __out, char __c)
     ^
/usr/include/c++/5/ostream:508:5: note:   template argument deduction/substitution failed:
test.cpp:1247:42: note:   cannot convert ‘objFn.optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&)::<lambda(const auto:176& ...)> [with auto:176 = {double}; PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1207()::<lambda(const auto:244&, const auto:245&)>; DiscreteU = std::vector<double>](sigma)’ (type ‘void’) to type ‘char’
     std::cout<<"value at actual: "<<objFn(sigma)<<std::endl;
                                          ^
In file included from /usr/include/c++/5/istream:39:0,
                 from /usr/include/c++/5/sstream:38,
                 from ../FunctionalUtilities/catch.hpp:74,
                 from test.cpp:2:
/usr/include/c++/5/ostream:502:5: note: candidate: template<class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, char)
     operator<<(basic_ostream<_CharT, _Traits>& __out, char __c)
     ^
/usr/include/c++/5/ostream:502:5: note:   template argument deduction/substitution failed:
test.cpp:1247:42: note:   cannot convert ‘objFn.optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&)::<lambda(const auto:176& ...)> [with auto:176 = {double}; PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1207()::<lambda(const auto:244&, const auto:245&)>; DiscreteU = std::vector<double>](sigma)’ (type ‘void’) to type ‘char’
     std::cout<<"value at actual: "<<objFn(sigma)<<std::endl;
                                          ^
In file included from /usr/include/c++/5/istream:39:0,
                 from /usr/include/c++/5/sstream:38,
                 from ../FunctionalUtilities/catch.hpp:74,
                 from test.cpp:2:
/usr/include/c++/5/ostream:497:5: note: candidate: template<class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, _CharT)
     operator<<(basic_ostream<_CharT, _Traits>& __out, _CharT __c)
     ^
/usr/include/c++/5/ostream:497:5: note:   template argument deduction/substitution failed:
test.cpp:1247:48: note:   deduced conflicting types for parameter ‘_CharT’ (‘char’ and ‘void’)
     std::cout<<"value at actual: "<<objFn(sigma)<<std::endl;
                                                ^
In file included from /usr/include/c++/5/bits/ios_base.h:46:0,
                 from /usr/include/c++/5/ios:42,
                 from /usr/include/c++/5/istream:38,
                 from /usr/include/c++/5/sstream:38,
                 from ../FunctionalUtilities/catch.hpp:74,
                 from test.cpp:2:
/usr/include/c++/5/system_error:209:5: note: candidate: template<class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::error_code&)
     operator<<(basic_ostream<_CharT, _Traits>& __os, const error_code& __e)
     ^
/usr/include/c++/5/system_error:209:5: note:   template argument deduction/substitution failed:
test.cpp:1247:42: note:   cannot convert ‘objFn.optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&)::<lambda(const auto:176& ...)> [with auto:176 = {double}; PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1207()::<lambda(const auto:244&, const auto:245&)>; DiscreteU = std::vector<double>](sigma)’ (type ‘void’) to type ‘const std::error_code&’
     std::cout<<"value at actual: "<<objFn(sigma)<<std::endl;
                                          ^
In file included from /usr/include/c++/5/string:52:0,
                 from /usr/include/c++/5/bits/locale_classes.h:40,
                 from /usr/include/c++/5/bits/ios_base.h:41,
                 from /usr/include/c++/5/ios:42,
                 from /usr/include/c++/5/istream:38,
                 from /usr/include/c++/5/sstream:38,
                 from ../FunctionalUtilities/catch.hpp:74,
                 from test.cpp:2:
/usr/include/c++/5/bits/basic_string.h:5172:5: note: candidate: template<class _CharT, class _Traits, class _Alloc> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&)
     operator<<(basic_ostream<_CharT, _Traits>& __os,
     ^
/usr/include/c++/5/bits/basic_string.h:5172:5: note:   template argument deduction/substitution failed:
test.cpp:1247:48: note:   mismatched types ‘const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>’ and ‘void’
     std::cout<<"value at actual: "<<objFn(sigma)<<std::endl;
                                                ^
In file included from test.cpp:11:0:
OptionCalibration.h: In instantiation of ‘optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&)::<lambda(const auto:176& ...)> [with auto:176 = {double, double, double, double, double}; PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1253()::<lambda(const auto:246&, const auto:247&, const auto:248&, const auto:249&, const auto:250&, const auto:251&)>; DiscreteU = std::vector<double>]’:
../TupleUtilities/TupleUtilities.h:15:35:   required from ‘decltype(auto) tutilities::apply_tuple_impl(F&&, Tuple&&, std::index_sequence<S ...>) [with F = const optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1253()::<lambda(const auto:246&, const auto:247&, const auto:248&, const auto:249&, const auto:250&, const auto:251&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>&; Tuple = const std::tuple<double, const double&, const double&, const double&, const double&>&; long unsigned int ...S = {0ul, 1ul, 2ul, 3ul, 4ul}; std::index_sequence<S ...> = std::integer_sequence<long unsigned int, 0ul, 1ul, 2ul, 3ul, 4ul>]’
../TupleUtilities/TupleUtilities.h:23:32:   required from ‘decltype(auto) tutilities::apply_tuple(F&&, Tuple&&) [with F = const optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1253()::<lambda(const auto:246&, const auto:247&, const auto:248&, const auto:249&, const auto:250&, const auto:251&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>&; Tuple = const std::tuple<double, const double&, const double&, const double&, const double&>&]’
../GaussNewton/Newton.h:239:37:   required from ‘newton::gradientDescentGeneric(const GFN&, const FNC&, const Index&, const Precision&, const T&, const Params& ...)::<lambda(const auto:156&)> [with auto:156 = std::tuple<double, const double&, const double&, const double&, const double&>; FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1253()::<lambda(const auto:246&, const auto:247&, const auto:248&, const auto:249&, const auto:250&, const auto:251&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; GFN = newton::gradientDescentApprox(const FNC&, const Index&, const Precision&, const Precision&, const T&, const Params& ...) [with FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1253()::<lambda(const auto:246&, const auto:247&, const auto:248&, const auto:249&, const auto:250&, const auto:251&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; Index = int; Precision = double; T = double; Params = {double, double, double, double, double}]::<lambda(const auto:166&, const auto:167&)>; Index = int; Precision = double; T = double; Params = {double, double, double, double, double}]’
../GaussNewton/Newton.h:190:13:   required from ‘newton::gradientIterateApprox(FNC&&, const T&, double)::<lambda(const auto:152&, const auto:153&, auto:154&&, auto:155&&)> [with auto:152 = double; auto:153 = long unsigned int; auto:154 = std::tuple<>; auto:155 = std::tuple<const double&, const double&, const double&, const double&>; FNC = const newton::gradientDescentGeneric(const GFN&, const FNC&, const Index&, const Precision&, const T&, const Params& ...) [with FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1253()::<lambda(const auto:246&, const auto:247&, const auto:248&, const auto:249&, const auto:250&, const auto:251&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; GFN = newton::gradientDescentApprox(const FNC&, const Index&, const Precision&, const Precision&, const T&, const Params& ...) [with FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1253()::<lambda(const auto:246&, const auto:247&, const auto:248&, const auto:249&, const auto:250&, const auto:251&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; Index = int; Precision = double; T = double; Params = {double, double, double, double, double}]::<lambda(const auto:166&, const auto:167&)>; Index = int; Precision = double; T = double; Params = {double, double, double, double, double}]::<lambda(const auto:156&)>&; T = std::tuple<double, double, double, double, double>]’
../TupleUtilities/TupleUtilities.h:51:33:   required from ‘auto tutilities::for_each_impl(Tuple&&, F&&, std::index_sequence<S ...>) [with Tuple = const std::tuple<double, double, double, double, double>&; F = newton::gradientIterateApprox(FNC&&, const T&, double) [with FNC = const newton::gradientDescentGeneric(const GFN&, const FNC&, const Index&, const Precision&, const T&, const Params& ...) [with FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1253()::<lambda(const auto:246&, const auto:247&, const auto:248&, const auto:249&, const auto:250&, const auto:251&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; GFN = newton::gradientDescentApprox(const FNC&, const Index&, const Precision&, const Precision&, const T&, const Params& ...) [with FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1253()::<lambda(const auto:246&, const auto:247&, const auto:248&, const auto:249&, const auto:250&, const auto:251&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; Index = int; Precision = double; T = double; Params = {double, double, double, double, double}]::<lambda(const auto:166&, const auto:167&)>; Index = int; Precision = double; T = double; Params = {double, double, double, double, double}]::<lambda(const auto:156&)>&; T = std::tuple<double, double, double, double, double>]::<lambda(const auto:152&, const auto:153&, auto:154&&, auto:155&&)>; long unsigned int ...Indices = {0ul, 1ul, 2ul, 3ul, 4ul}; std::index_sequence<S ...> = std::integer_sequence<long unsigned int, 0ul, 1ul, 2ul, 3ul, 4ul>]’
../TupleUtilities/TupleUtilities.h:58:29:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
../GaussNewton/Newton.h:250:23:   required from ‘newton::gradientDescentGeneric(const GFN&, const FNC&, const Index&, const Precision&, const T&, const Params& ...)::<lambda(auto:157&&, const auto:158&)> [with auto:157 = std::tuple<std::tuple<double, double, double, double, double>, double, double>&; auto:158 = int; FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1253()::<lambda(const auto:246&, const auto:247&, const auto:248&, const auto:249&, const auto:250&, const auto:251&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; GFN = newton::gradientDescentApprox(const FNC&, const Index&, const Precision&, const Precision&, const T&, const Params& ...) [with FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1253()::<lambda(const auto:246&, const auto:247&, const auto:248&, const auto:249&, const auto:250&, const auto:251&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; Index = int; Precision = double; T = double; Params = {double, double, double, double, double}]::<lambda(const auto:166&, const auto:167&)>; Index = int; Precision = double; T = double; Params = {double, double, double, double, double}]’
../FunctionalUtilities/FunctionalUtilities.h:430:25:   required from ‘auto futilities::recurse_move(const incr&, init&&, fnToApply&&, keepGoing&&) [with incr = int; init = std::tuple<std::tuple<double, double, double, double, double>, double, double>; fnToApply = newton::gradientDescentGeneric(const GFN&, const FNC&, const Index&, const Precision&, const T&, const Params& ...) [with FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1253()::<lambda(const auto:246&, const auto:247&, const auto:248&, const auto:249&, const auto:250&, const auto:251&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; GFN = newton::gradientDescentApprox(const FNC&, const Index&, const Precision&, const Precision&, const T&, const Params& ...) [with FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1253()::<lambda(const auto:246&, const auto:247&, const auto:248&, const auto:249&, const auto:250&, const auto:251&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; Index = int; Precision = double; T = double; Params = {double, double, double, double, double}]::<lambda(const auto:166&, const auto:167&)>; Index = int; Precision = double; T = double; Params = {double, double, double, double, double}]::<lambda(auto:157&&, const auto:158&)>; keepGoing = newton::gradientDescentGeneric(const GFN&, const FNC&, const Index&, const Precision&, const T&, const Params& ...) [with FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1253()::<lambda(const auto:246&, const auto:247&, const auto:248&, const auto:249&, const auto:250&, const auto:251&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; GFN = newton::gradientDescentApprox(const FNC&, const Index&, const Precision&, const Precision&, const T&, const Params& ...) [with FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1253()::<lambda(const auto:246&, const auto:247&, const auto:248&, const auto:249&, const auto:250&, const auto:251&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; Index = int; Precision = double; T = double; Params = {double, double, double, double, double}]::<lambda(const auto:166&, const auto:167&)>; Index = int; Precision = double; T = double; Params = {double, double, double, double, double}]::<lambda(const auto:163&)>]’
../GaussNewton/Newton.h:241:56:   required from ‘auto newton::gradientDescentGeneric(const GFN&, const FNC&, const Index&, const Precision&, const T&, const Params& ...) [with FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1253()::<lambda(const auto:246&, const auto:247&, const auto:248&, const auto:249&, const auto:250&, const auto:251&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; GFN = newton::gradientDescentApprox(const FNC&, const Index&, const Precision&, const Precision&, const T&, const Params& ...) [with FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1253()::<lambda(const auto:246&, const auto:247&, const auto:248&, const auto:249&, const auto:250&, const auto:251&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; Index = int; Precision = double; T = double; Params = {double, double, double, double, double}]::<lambda(const auto:166&, const auto:167&)>; Index = int; Precision = double; T = double; Params = {double, double, double, double, double}]’
../GaussNewton/Newton.h:284:34:   required from ‘auto newton::gradientDescentApprox(const FNC&, const Index&, const Precision&, const Precision&, const T&, const Params& ...) [with FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1253()::<lambda(const auto:246&, const auto:247&, const auto:248&, const auto:249&, const auto:250&, const auto:251&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; Index = int; Precision = double; T = double; Params = {double, double, double, double, double}]’
OptionCalibration.h:126:45:   required from ‘auto optioncal::calibrate(const FN&, const Params& ...) [with FN = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1253()::<lambda(const auto:246&, const auto:247&, const auto:248&, const auto:249&, const auto:250&, const auto:251&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; Params = {double, double, double, double, double}]’
test.cpp:1345:98:   required from here
OptionCalibration.h:114:18: error: no match for ‘operator/’ (operand types are ‘std::complex<double>’ and ‘std::vector<double>::size_type {aka long unsigned int}’)
                 )/uArray.size()           
                  ^
In file included from ../GaussNewton/Newton.h:10:0,
                 from OptionCalibration.h:9,
                 from test.cpp:11:
../AutoDiff/AutoDiff.h:172:6: note: candidate: template<class W, class Z> auto operator/(const AutoDiff<W>&, const AutoDiff<Z>&)
 auto operator/(const AutoDiff<W> &left, const AutoDiff<Z> &right){
      ^
../AutoDiff/AutoDiff.h:172:6: note:   template argument deduction/substitution failed:
In file included from test.cpp:11:0:
OptionCalibration.h:114:18: note:   ‘std::complex<double>’ is not derived from ‘const AutoDiff<W>’
                 )/uArray.size()           
                  ^
In file included from ../GaussNewton/Newton.h:10:0,
                 from OptionCalibration.h:9,
                 from test.cpp:11:
../AutoDiff/AutoDiff.h:176:6: note: candidate: template<class W, class Z> auto operator/(const AutoDiff<W>&, const Z&)
 auto operator/(const AutoDiff<W> &left, const Z& right){
      ^
../AutoDiff/AutoDiff.h:176:6: note:   template argument deduction/substitution failed:
In file included from test.cpp:11:0:
OptionCalibration.h:114:18: note:   ‘std::complex<double>’ is not derived from ‘const AutoDiff<W>’
                 )/uArray.size()           
                  ^
In file included from ../GaussNewton/Newton.h:10:0,
                 from OptionCalibration.h:9,
                 from test.cpp:11:
../AutoDiff/AutoDiff.h:180:6: note: candidate: template<class W, class Z> auto operator/(const W&, const AutoDiff<Z>&)
 auto operator/(const W& left, const AutoDiff<Z> &right){
      ^
../AutoDiff/AutoDiff.h:180:6: note:   template argument deduction/substitution failed:
In file included from test.cpp:11:0:
OptionCalibration.h:114:18: note:   mismatched types ‘const AutoDiff<Z>’ and ‘std::vector<double>::size_type {aka long unsigned int}’
                 )/uArray.size()           
                  ^
In file included from OptionPricing.h:3:0,
                 from test.cpp:5:
/usr/include/c++/5/complex:434:5: note: candidate: template<class _Tp> std::complex<_Tp> std::operator/(const _Tp&, const std::complex<_Tp>&)
     operator/(const _Tp& __x, const complex<_Tp>& __y)
     ^
/usr/include/c++/5/complex:434:5: note:   template argument deduction/substitution failed:
In file included from test.cpp:11:0:
OptionCalibration.h:114:18: note:   mismatched types ‘const std::complex<_Tp>’ and ‘std::vector<double>::size_type {aka long unsigned int}’
                 )/uArray.size()           
                  ^
In file included from OptionPricing.h:3:0,
                 from test.cpp:5:
/usr/include/c++/5/complex:425:5: note: candidate: template<class _Tp> std::complex<_Tp> std::operator/(const std::complex<_Tp>&, const _Tp&)
     operator/(const complex<_Tp>& __x, const _Tp& __y)
     ^
/usr/include/c++/5/complex:425:5: note:   template argument deduction/substitution failed:
In file included from test.cpp:11:0:
OptionCalibration.h:114:18: note:   deduced conflicting types for parameter ‘const _Tp’ (‘double’ and ‘std::vector<double>::size_type {aka long unsigned int}’)
                 )/uArray.size()           
                  ^
In file included from OptionPricing.h:3:0,
                 from test.cpp:5:
/usr/include/c++/5/complex:416:5: note: candidate: template<class _Tp> std::complex<_Tp> std::operator/(const std::complex<_Tp>&, const std::complex<_Tp>&)
     operator/(const complex<_Tp>& __x, const complex<_Tp>& __y)
     ^
/usr/include/c++/5/complex:416:5: note:   template argument deduction/substitution failed:
In file included from test.cpp:11:0:
OptionCalibration.h:114:18: note:   mismatched types ‘const std::complex<_Tp>’ and ‘std::vector<double>::size_type {aka long unsigned int}’
                 )/uArray.size()           
                  ^
In file included from OptionCalibration.h:9:0,
                 from test.cpp:11:
../GaussNewton/Newton.h: In instantiation of ‘newton::gradientIterateApprox(FNC&&, const T&, double)::<lambda(const auto:152&, const auto:153&, auto:154&&, auto:155&&)> [with auto:152 = double; auto:153 = long unsigned int; auto:154 = std::tuple<>; auto:155 = std::tuple<const double&, const double&, const double&, const double&>; FNC = const newton::gradientDescentGeneric(const GFN&, const FNC&, const Index&, const Precision&, const T&, const Params& ...) [with FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1253()::<lambda(const auto:246&, const auto:247&, const auto:248&, const auto:249&, const auto:250&, const auto:251&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; GFN = newton::gradientDescentApprox(const FNC&, const Index&, const Precision&, const Precision&, const T&, const Params& ...) [with FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1253()::<lambda(const auto:246&, const auto:247&, const auto:248&, const auto:249&, const auto:250&, const auto:251&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; Index = int; Precision = double; T = double; Params = {double, double, double, double, double}]::<lambda(const auto:166&, const auto:167&)>; Index = int; Precision = double; T = double; Params = {double, double, double, double, double}]::<lambda(const auto:156&)>&; T = std::tuple<double, double, double, double, double>]’:
../TupleUtilities/TupleUtilities.h:51:33:   required from ‘auto tutilities::for_each_impl(Tuple&&, F&&, std::index_sequence<S ...>) [with Tuple = const std::tuple<double, double, double, double, double>&; F = newton::gradientIterateApprox(FNC&&, const T&, double) [with FNC = const newton::gradientDescentGeneric(const GFN&, const FNC&, const Index&, const Precision&, const T&, const Params& ...) [with FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1253()::<lambda(const auto:246&, const auto:247&, const auto:248&, const auto:249&, const auto:250&, const auto:251&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; GFN = newton::gradientDescentApprox(const FNC&, const Index&, const Precision&, const Precision&, const T&, const Params& ...) [with FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1253()::<lambda(const auto:246&, const auto:247&, const auto:248&, const auto:249&, const auto:250&, const auto:251&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; Index = int; Precision = double; T = double; Params = {double, double, double, double, double}]::<lambda(const auto:166&, const auto:167&)>; Index = int; Precision = double; T = double; Params = {double, double, double, double, double}]::<lambda(const auto:156&)>&; T = std::tuple<double, double, double, double, double>]::<lambda(const auto:152&, const auto:153&, auto:154&&, auto:155&&)>; long unsigned int ...Indices = {0ul, 1ul, 2ul, 3ul, 4ul}; std::index_sequence<S ...> = std::integer_sequence<long unsigned int, 0ul, 1ul, 2ul, 3ul, 4ul>]’
../TupleUtilities/TupleUtilities.h:58:29:   required from ‘auto tutilities::for_each(Tuple&&, F&&) [with Tuple = const std::tuple<double, double, double, double, double>&; F = newton::gradientIterateApprox(FNC&&, const T&, double) [with FNC = const newton::gradientDescentGeneric(const GFN&, const FNC&, const Index&, const Precision&, const T&, const Params& ...) [with FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1253()::<lambda(const auto:246&, const auto:247&, const auto:248&, const auto:249&, const auto:250&, const auto:251&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; GFN = newton::gradientDescentApprox(const FNC&, const Index&, const Precision&, const Precision&, const T&, const Params& ...) [with FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1253()::<lambda(const auto:246&, const auto:247&, const auto:248&, const auto:249&, const auto:250&, const auto:251&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; Index = int; Precision = double; T = double; Params = {double, double, double, double, double}]::<lambda(const auto:166&, const auto:167&)>; Index = int; Precision = double; T = double; Params = {double, double, double, double, double}]::<lambda(const auto:156&)>&; T = std::tuple<double, double, double, double, double>]::<lambda(const auto:152&, const auto:153&, auto:154&&, auto:155&&)>]’
../GaussNewton/Newton.h:188:32:   required from ‘auto newton::gradientIterateApprox(FNC&&, const T&, double) [with FNC = const newton::gradientDescentGeneric(const GFN&, const FNC&, const Index&, const Precision&, const T&, const Params& ...) [with FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1253()::<lambda(const auto:246&, const auto:247&, const auto:248&, const auto:249&, const auto:250&, const auto:251&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; GFN = newton::gradientDescentApprox(const FNC&, const Index&, const Precision&, const Precision&, const T&, const Params& ...) [with FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1253()::<lambda(const auto:246&, const auto:247&, const auto:248&, const auto:249&, const auto:250&, const auto:251&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; Index = int; Precision = double; T = double; Params = {double, double, double, double, double}]::<lambda(const auto:166&, const auto:167&)>; Index = int; Precision = double; T = double; Params = {double, double, double, double, double}]::<lambda(const auto:156&)>&; T = std::tuple<double, double, double, double, double>]’
../GaussNewton/Newton.h:286:37:   required from ‘newton::gradientDescentApprox(const FNC&, const Index&, const Precision&, const Precision&, const T&, const Params& ...)::<lambda(const auto:166&, const auto:167&)> [with auto:166 = newton::gradientDescentGeneric(const GFN&, const FNC&, const Index&, const Precision&, const T&, const Params& ...) [with FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1253()::<lambda(const auto:246&, const auto:247&, const auto:248&, const auto:249&, const auto:250&, const auto:251&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; GFN = newton::gradientDescentApprox(const FNC&, const Index&, const Precision&, const Precision&, const T&, const Params& ...) [with FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1253()::<lambda(const auto:246&, const auto:247&, const auto:248&, const auto:249&, const auto:250&, const auto:251&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; Index = int; Precision = double; T = double; Params = {double, double, double, double, double}]::<lambda(const auto:166&, const auto:167&)>; Index = int; Precision = double; T = double; Params = {double, double, double, double, double}]::<lambda(const auto:156&)>; auto:167 = std::tuple<double, double, double, double, double>; FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1253()::<lambda(const auto:246&, const auto:247&, const auto:248&, const auto:249&, const auto:250&, const auto:251&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; Index = int; Precision = double; T = double; Params = {double, double, double, double, double}]’
../GaussNewton/Newton.h:250:23:   required from ‘newton::gradientDescentGeneric(const GFN&, const FNC&, const Index&, const Precision&, const T&, const Params& ...)::<lambda(auto:157&&, const auto:158&)> [with auto:157 = std::tuple<std::tuple<double, double, double, double, double>, double, double>&; auto:158 = int; FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1253()::<lambda(const auto:246&, const auto:247&, const auto:248&, const auto:249&, const auto:250&, const auto:251&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; GFN = newton::gradientDescentApprox(const FNC&, const Index&, const Precision&, const Precision&, const T&, const Params& ...) [with FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1253()::<lambda(const auto:246&, const auto:247&, const auto:248&, const auto:249&, const auto:250&, const auto:251&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; Index = int; Precision = double; T = double; Params = {double, double, double, double, double}]::<lambda(const auto:166&, const auto:167&)>; Index = int; Precision = double; T = double; Params = {double, double, double, double, double}]’
../FunctionalUtilities/FunctionalUtilities.h:430:25:   required from ‘auto futilities::recurse_move(const incr&, init&&, fnToApply&&, keepGoing&&) [with incr = int; init = std::tuple<std::tuple<double, double, double, double, double>, double, double>; fnToApply = newton::gradientDescentGeneric(const GFN&, const FNC&, const Index&, const Precision&, const T&, const Params& ...) [with FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1253()::<lambda(const auto:246&, const auto:247&, const auto:248&, const auto:249&, const auto:250&, const auto:251&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; GFN = newton::gradientDescentApprox(const FNC&, const Index&, const Precision&, const Precision&, const T&, const Params& ...) [with FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1253()::<lambda(const auto:246&, const auto:247&, const auto:248&, const auto:249&, const auto:250&, const auto:251&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; Index = int; Precision = double; T = double; Params = {double, double, double, double, double}]::<lambda(const auto:166&, const auto:167&)>; Index = int; Precision = double; T = double; Params = {double, double, double, double, double}]::<lambda(auto:157&&, const auto:158&)>; keepGoing = newton::gradientDescentGeneric(const GFN&, const FNC&, const Index&, const Precision&, const T&, const Params& ...) [with FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1253()::<lambda(const auto:246&, const auto:247&, const auto:248&, const auto:249&, const auto:250&, const auto:251&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; GFN = newton::gradientDescentApprox(const FNC&, const Index&, const Precision&, const Precision&, const T&, const Params& ...) [with FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1253()::<lambda(const auto:246&, const auto:247&, const auto:248&, const auto:249&, const auto:250&, const auto:251&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; Index = int; Precision = double; T = double; Params = {double, double, double, double, double}]::<lambda(const auto:166&, const auto:167&)>; Index = int; Precision = double; T = double; Params = {double, double, double, double, double}]::<lambda(const auto:163&)>]’
../GaussNewton/Newton.h:241:56:   required from ‘auto newton::gradientDescentGeneric(const GFN&, const FNC&, const Index&, const Precision&, const T&, const Params& ...) [with FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1253()::<lambda(const auto:246&, const auto:247&, const auto:248&, const auto:249&, const auto:250&, const auto:251&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; GFN = newton::gradientDescentApprox(const FNC&, const Index&, const Precision&, const Precision&, const T&, const Params& ...) [with FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1253()::<lambda(const auto:246&, const auto:247&, const auto:248&, const auto:249&, const auto:250&, const auto:251&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; Index = int; Precision = double; T = double; Params = {double, double, double, double, double}]::<lambda(const auto:166&, const auto:167&)>; Index = int; Precision = double; T = double; Params = {double, double, double, double, double}]’
../GaussNewton/Newton.h:284:34:   required from ‘auto newton::gradientDescentApprox(const FNC&, const Index&, const Precision&, const Precision&, const T&, const Params& ...) [with FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1253()::<lambda(const auto:246&, const auto:247&, const auto:248&, const auto:249&, const auto:250&, const auto:251&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; Index = int; Precision = double; T = double; Params = {double, double, double, double, double}]’
OptionCalibration.h:126:45:   required from ‘auto optioncal::calibrate(const FN&, const Params& ...) [with FN = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1253()::<lambda(const auto:246&, const auto:247&, const auto:248&, const auto:249&, const auto:250&, const auto:251&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; Params = {double, double, double, double, double}]’
test.cpp:1345:98:   required from here
../GaussNewton/Newton.h:196:10: error: invalid operands of types ‘void’ and ‘void’ to binary ‘operator-’
         )-fnc(
          ^
In file included from ../GaussNewton/Newton.h:9:0,
                 from OptionCalibration.h:9,
                 from test.cpp:11:
../TupleUtilities/TupleUtilities.h: In instantiation of ‘auto tutilities::for_each_impl(Tuple&&, F&&, std::index_sequence<S ...>) [with Tuple = const std::tuple<double, double, double, double, double>&; F = newton::gradientIterateApprox(FNC&&, const T&, double) [with FNC = const newton::gradientDescentGeneric(const GFN&, const FNC&, const Index&, const Precision&, const T&, const Params& ...) [with FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1253()::<lambda(const auto:246&, const auto:247&, const auto:248&, const auto:249&, const auto:250&, const auto:251&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; GFN = newton::gradientDescentApprox(const FNC&, const Index&, const Precision&, const Precision&, const T&, const Params& ...) [with FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1253()::<lambda(const auto:246&, const auto:247&, const auto:248&, const auto:249&, const auto:250&, const auto:251&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; Index = int; Precision = double; T = double; Params = {double, double, double, double, double}]::<lambda(const auto:166&, const auto:167&)>; Index = int; Precision = double; T = double; Params = {double, double, double, double, double}]::<lambda(const auto:156&)>&; T = std::tuple<double, double, double, double, double>]::<lambda(const auto:152&, const auto:153&, auto:154&&, auto:155&&)>; long unsigned int ...Indices = {0ul, 1ul, 2ul, 3ul, 4ul}; std::index_sequence<S ...> = std::integer_sequence<long unsigned int, 0ul, 1ul, 2ul, 3ul, 4ul>]’:
../TupleUtilities/TupleUtilities.h:58:29:   required from ‘auto tutilities::for_each(Tuple&&, F&&) [with Tuple = const std::tuple<double, double, double, double, double>&; F = newton::gradientIterateApprox(FNC&&, const T&, double) [with FNC = const newton::gradientDescentGeneric(const GFN&, const FNC&, const Index&, const Precision&, const T&, const Params& ...) [with FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1253()::<lambda(const auto:246&, const auto:247&, const auto:248&, const auto:249&, const auto:250&, const auto:251&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; GFN = newton::gradientDescentApprox(const FNC&, const Index&, const Precision&, const Precision&, const T&, const Params& ...) [with FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1253()::<lambda(const auto:246&, const auto:247&, const auto:248&, const auto:249&, const auto:250&, const auto:251&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; Index = int; Precision = double; T = double; Params = {double, double, double, double, double}]::<lambda(const auto:166&, const auto:167&)>; Index = int; Precision = double; T = double; Params = {double, double, double, double, double}]::<lambda(const auto:156&)>&; T = std::tuple<double, double, double, double, double>]::<lambda(const auto:152&, const auto:153&, auto:154&&, auto:155&&)>]’
../GaussNewton/Newton.h:188:32:   required from ‘auto newton::gradientIterateApprox(FNC&&, const T&, double) [with FNC = const newton::gradientDescentGeneric(const GFN&, const FNC&, const Index&, const Precision&, const T&, const Params& ...) [with FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1253()::<lambda(const auto:246&, const auto:247&, const auto:248&, const auto:249&, const auto:250&, const auto:251&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; GFN = newton::gradientDescentApprox(const FNC&, const Index&, const Precision&, const Precision&, const T&, const Params& ...) [with FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1253()::<lambda(const auto:246&, const auto:247&, const auto:248&, const auto:249&, const auto:250&, const auto:251&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; Index = int; Precision = double; T = double; Params = {double, double, double, double, double}]::<lambda(const auto:166&, const auto:167&)>; Index = int; Precision = double; T = double; Params = {double, double, double, double, double}]::<lambda(const auto:156&)>&; T = std::tuple<double, double, double, double, double>]’
../GaussNewton/Newton.h:286:37:   required from ‘newton::gradientDescentApprox(const FNC&, const Index&, const Precision&, const Precision&, const T&, const Params& ...)::<lambda(const auto:166&, const auto:167&)> [with auto:166 = newton::gradientDescentGeneric(const GFN&, const FNC&, const Index&, const Precision&, const T&, const Params& ...) [with FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1253()::<lambda(const auto:246&, const auto:247&, const auto:248&, const auto:249&, const auto:250&, const auto:251&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; GFN = newton::gradientDescentApprox(const FNC&, const Index&, const Precision&, const Precision&, const T&, const Params& ...) [with FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1253()::<lambda(const auto:246&, const auto:247&, const auto:248&, const auto:249&, const auto:250&, const auto:251&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; Index = int; Precision = double; T = double; Params = {double, double, double, double, double}]::<lambda(const auto:166&, const auto:167&)>; Index = int; Precision = double; T = double; Params = {double, double, double, double, double}]::<lambda(const auto:156&)>; auto:167 = std::tuple<double, double, double, double, double>; FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1253()::<lambda(const auto:246&, const auto:247&, const auto:248&, const auto:249&, const auto:250&, const auto:251&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; Index = int; Precision = double; T = double; Params = {double, double, double, double, double}]’
../GaussNewton/Newton.h:250:23:   required from ‘newton::gradientDescentGeneric(const GFN&, const FNC&, const Index&, const Precision&, const T&, const Params& ...)::<lambda(auto:157&&, const auto:158&)> [with auto:157 = std::tuple<std::tuple<double, double, double, double, double>, double, double>&; auto:158 = int; FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1253()::<lambda(const auto:246&, const auto:247&, const auto:248&, const auto:249&, const auto:250&, const auto:251&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; GFN = newton::gradientDescentApprox(const FNC&, const Index&, const Precision&, const Precision&, const T&, const Params& ...) [with FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1253()::<lambda(const auto:246&, const auto:247&, const auto:248&, const auto:249&, const auto:250&, const auto:251&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; Index = int; Precision = double; T = double; Params = {double, double, double, double, double}]::<lambda(const auto:166&, const auto:167&)>; Index = int; Precision = double; T = double; Params = {double, double, double, double, double}]’
../FunctionalUtilities/FunctionalUtilities.h:430:25:   required from ‘auto futilities::recurse_move(const incr&, init&&, fnToApply&&, keepGoing&&) [with incr = int; init = std::tuple<std::tuple<double, double, double, double, double>, double, double>; fnToApply = newton::gradientDescentGeneric(const GFN&, const FNC&, const Index&, const Precision&, const T&, const Params& ...) [with FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1253()::<lambda(const auto:246&, const auto:247&, const auto:248&, const auto:249&, const auto:250&, const auto:251&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; GFN = newton::gradientDescentApprox(const FNC&, const Index&, const Precision&, const Precision&, const T&, const Params& ...) [with FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1253()::<lambda(const auto:246&, const auto:247&, const auto:248&, const auto:249&, const auto:250&, const auto:251&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; Index = int; Precision = double; T = double; Params = {double, double, double, double, double}]::<lambda(const auto:166&, const auto:167&)>; Index = int; Precision = double; T = double; Params = {double, double, double, double, double}]::<lambda(auto:157&&, const auto:158&)>; keepGoing = newton::gradientDescentGeneric(const GFN&, const FNC&, const Index&, const Precision&, const T&, const Params& ...) [with FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1253()::<lambda(const auto:246&, const auto:247&, const auto:248&, const auto:249&, const auto:250&, const auto:251&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; GFN = newton::gradientDescentApprox(const FNC&, const Index&, const Precision&, const Precision&, const T&, const Params& ...) [with FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1253()::<lambda(const auto:246&, const auto:247&, const auto:248&, const auto:249&, const auto:250&, const auto:251&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; Index = int; Precision = double; T = double; Params = {double, double, double, double, double}]::<lambda(const auto:166&, const auto:167&)>; Index = int; Precision = double; T = double; Params = {double, double, double, double, double}]::<lambda(const auto:163&)>]’
../GaussNewton/Newton.h:241:56:   required from ‘auto newton::gradientDescentGeneric(const GFN&, const FNC&, const Index&, const Precision&, const T&, const Params& ...) [with FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1253()::<lambda(const auto:246&, const auto:247&, const auto:248&, const auto:249&, const auto:250&, const auto:251&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; GFN = newton::gradientDescentApprox(const FNC&, const Index&, const Precision&, const Precision&, const T&, const Params& ...) [with FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1253()::<lambda(const auto:246&, const auto:247&, const auto:248&, const auto:249&, const auto:250&, const auto:251&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; Index = int; Precision = double; T = double; Params = {double, double, double, double, double}]::<lambda(const auto:166&, const auto:167&)>; Index = int; Precision = double; T = double; Params = {double, double, double, double, double}]’
../GaussNewton/Newton.h:284:34:   required from ‘auto newton::gradientDescentApprox(const FNC&, const Index&, const Precision&, const Precision&, const T&, const Params& ...) [with FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1253()::<lambda(const auto:246&, const auto:247&, const auto:248&, const auto:249&, const auto:250&, const auto:251&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; Index = int; Precision = double; T = double; Params = {double, double, double, double, double}]’
OptionCalibration.h:126:45:   required from ‘auto optioncal::calibrate(const FN&, const Params& ...) [with FN = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1253()::<lambda(const auto:246&, const auto:247&, const auto:248&, const auto:249&, const auto:250&, const auto:251&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; Params = {double, double, double, double, double}]’
test.cpp:1345:98:   required from here
../TupleUtilities/TupleUtilities.h:51:33: error: use of ‘newton::gradientIterateApprox(FNC&&, const T&, double)::<lambda(const auto:152&, const auto:153&, auto:154&&, auto:155&&)> [with auto:152 = double; auto:153 = long unsigned int; auto:154 = std::tuple<const double&>; auto:155 = std::tuple<const double&, const double&, const double&>; FNC = const newton::gradientDescentGeneric(const GFN&, const FNC&, const Index&, const Precision&, const T&, const Params& ...) [with FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1253()::<lambda(const auto:246&, const auto:247&, const auto:248&, const auto:249&, const auto:250&, const auto:251&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; GFN = newton::gradientDescentApprox(const FNC&, const Index&, const Precision&, const Precision&, const T&, const Params& ...) [with FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1253()::<lambda(const auto:246&, const auto:247&, const auto:248&, const auto:249&, const auto:250&, const auto:251&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; Index = int; Precision = double; T = double; Params = {double, double, double, double, double}]::<lambda(const auto:166&, const auto:167&)>; Index = int; Precision = double; T = double; Params = {double, double, double, double, double}]::<lambda(const auto:156&)>&; T = std::tuple<double, double, double, double, double>]’ before deduction of ‘auto’
         return std::make_tuple(f(std::get<Indices>(std::forward<Tuple>(tuple)), Indices, tuple_slice<0, Indices>(tuple), tuple_slice<Indices+1, std::tuple_size<std::remove_reference_t<Tuple>>::value>(tuple))...);
                                 ^
In file included from OptionCalibration.h:9:0,
                 from test.cpp:11:
../GaussNewton/Newton.h: In instantiation of ‘newton::gradientDescentGeneric(const GFN&, const FNC&, const Index&, const Precision&, const T&, const Params& ...)::<lambda(auto:157&&, const auto:158&)> [with auto:157 = std::tuple<std::tuple<double, double, double, double, double>, double, double>&; auto:158 = int; FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1253()::<lambda(const auto:246&, const auto:247&, const auto:248&, const auto:249&, const auto:250&, const auto:251&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; GFN = newton::gradientDescentApprox(const FNC&, const Index&, const Precision&, const Precision&, const T&, const Params& ...) [with FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1253()::<lambda(const auto:246&, const auto:247&, const auto:248&, const auto:249&, const auto:250&, const auto:251&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; Index = int; Precision = double; T = double; Params = {double, double, double, double, double}]::<lambda(const auto:166&, const auto:167&)>; Index = int; Precision = double; T = double; Params = {double, double, double, double, double}]’:
../FunctionalUtilities/FunctionalUtilities.h:430:25:   required from ‘auto futilities::recurse_move(const incr&, init&&, fnToApply&&, keepGoing&&) [with incr = int; init = std::tuple<std::tuple<double, double, double, double, double>, double, double>; fnToApply = newton::gradientDescentGeneric(const GFN&, const FNC&, const Index&, const Precision&, const T&, const Params& ...) [with FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1253()::<lambda(const auto:246&, const auto:247&, const auto:248&, const auto:249&, const auto:250&, const auto:251&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; GFN = newton::gradientDescentApprox(const FNC&, const Index&, const Precision&, const Precision&, const T&, const Params& ...) [with FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1253()::<lambda(const auto:246&, const auto:247&, const auto:248&, const auto:249&, const auto:250&, const auto:251&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; Index = int; Precision = double; T = double; Params = {double, double, double, double, double}]::<lambda(const auto:166&, const auto:167&)>; Index = int; Precision = double; T = double; Params = {double, double, double, double, double}]::<lambda(auto:157&&, const auto:158&)>; keepGoing = newton::gradientDescentGeneric(const GFN&, const FNC&, const Index&, const Precision&, const T&, const Params& ...) [with FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1253()::<lambda(const auto:246&, const auto:247&, const auto:248&, const auto:249&, const auto:250&, const auto:251&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; GFN = newton::gradientDescentApprox(const FNC&, const Index&, const Precision&, const Precision&, const T&, const Params& ...) [with FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1253()::<lambda(const auto:246&, const auto:247&, const auto:248&, const auto:249&, const auto:250&, const auto:251&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; Index = int; Precision = double; T = double; Params = {double, double, double, double, double}]::<lambda(const auto:166&, const auto:167&)>; Index = int; Precision = double; T = double; Params = {double, double, double, double, double}]::<lambda(const auto:163&)>]’
../GaussNewton/Newton.h:241:56:   required from ‘auto newton::gradientDescentGeneric(const GFN&, const FNC&, const Index&, const Precision&, const T&, const Params& ...) [with FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1253()::<lambda(const auto:246&, const auto:247&, const auto:248&, const auto:249&, const auto:250&, const auto:251&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; GFN = newton::gradientDescentApprox(const FNC&, const Index&, const Precision&, const Precision&, const T&, const Params& ...) [with FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1253()::<lambda(const auto:246&, const auto:247&, const auto:248&, const auto:249&, const auto:250&, const auto:251&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; Index = int; Precision = double; T = double; Params = {double, double, double, double, double}]::<lambda(const auto:166&, const auto:167&)>; Index = int; Precision = double; T = double; Params = {double, double, double, double, double}]’
../GaussNewton/Newton.h:284:34:   required from ‘auto newton::gradientDescentApprox(const FNC&, const Index&, const Precision&, const Precision&, const T&, const Params& ...) [with FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1253()::<lambda(const auto:246&, const auto:247&, const auto:248&, const auto:249&, const auto:250&, const auto:251&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; Index = int; Precision = double; T = double; Params = {double, double, double, double, double}]’
OptionCalibration.h:126:45:   required from ‘auto optioncal::calibrate(const FN&, const Params& ...) [with FN = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1253()::<lambda(const auto:246&, const auto:247&, const auto:248&, const auto:249&, const auto:250&, const auto:251&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; Params = {double, double, double, double, double}]’
test.cpp:1345:98:   required from here
../GaussNewton/Newton.h:249:52: error: invalid use of void expression
         return std::make_tuple(tutilities::for_each(
                                                    ^
../GaussNewton/Newton.h:255:27: error: use of ‘newton::gradientDescentGeneric(const GFN&, const FNC&, const Index&, const Precision&, const T&, const Params& ...)::<lambda(const auto:156&)> [with auto:156 = std::tuple<double, double, double, double, double>; FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1253()::<lambda(const auto:246&, const auto:247&, const auto:248&, const auto:249&, const auto:250&, const auto:251&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; GFN = newton::gradientDescentApprox(const FNC&, const Index&, const Precision&, const Precision&, const T&, const Params& ...) [with FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1253()::<lambda(const auto:246&, const auto:247&, const auto:248&, const auto:249&, const auto:250&, const auto:251&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; Index = int; Precision = double; T = double; Params = {double, double, double, double, double}]::<lambda(const auto:166&, const auto:167&)>; Index = int; Precision = double; T = double; Params = {double, double, double, double, double}]’ before deduction of ‘auto’
         ), error, tupleFnc(std::get<PARAMPACK>(updatedTheta)));
                           ^
In file included from test.cpp:3:0:
../FunctionalUtilities/FunctionalUtilities.h: In instantiation of ‘auto futilities::recurse_move(const incr&, init&&, fnToApply&&, keepGoing&&) [with incr = int; init = std::tuple<std::tuple<double, double, double, double, double>, double, double>; fnToApply = newton::gradientDescentGeneric(const GFN&, const FNC&, const Index&, const Precision&, const T&, const Params& ...) [with FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1253()::<lambda(const auto:246&, const auto:247&, const auto:248&, const auto:249&, const auto:250&, const auto:251&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; GFN = newton::gradientDescentApprox(const FNC&, const Index&, const Precision&, const Precision&, const T&, const Params& ...) [with FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1253()::<lambda(const auto:246&, const auto:247&, const auto:248&, const auto:249&, const auto:250&, const auto:251&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; Index = int; Precision = double; T = double; Params = {double, double, double, double, double}]::<lambda(const auto:166&, const auto:167&)>; Index = int; Precision = double; T = double; Params = {double, double, double, double, double}]::<lambda(auto:157&&, const auto:158&)>; keepGoing = newton::gradientDescentGeneric(const GFN&, const FNC&, const Index&, const Precision&, const T&, const Params& ...) [with FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1253()::<lambda(const auto:246&, const auto:247&, const auto:248&, const auto:249&, const auto:250&, const auto:251&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; GFN = newton::gradientDescentApprox(const FNC&, const Index&, const Precision&, const Precision&, const T&, const Params& ...) [with FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1253()::<lambda(const auto:246&, const auto:247&, const auto:248&, const auto:249&, const auto:250&, const auto:251&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; Index = int; Precision = double; T = double; Params = {double, double, double, double, double}]::<lambda(const auto:166&, const auto:167&)>; Index = int; Precision = double; T = double; Params = {double, double, double, double, double}]::<lambda(const auto:163&)>]’:
../GaussNewton/Newton.h:241:56:   required from ‘auto newton::gradientDescentGeneric(const GFN&, const FNC&, const Index&, const Precision&, const T&, const Params& ...) [with FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1253()::<lambda(const auto:246&, const auto:247&, const auto:248&, const auto:249&, const auto:250&, const auto:251&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; GFN = newton::gradientDescentApprox(const FNC&, const Index&, const Precision&, const Precision&, const T&, const Params& ...) [with FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1253()::<lambda(const auto:246&, const auto:247&, const auto:248&, const auto:249&, const auto:250&, const auto:251&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; Index = int; Precision = double; T = double; Params = {double, double, double, double, double}]::<lambda(const auto:166&, const auto:167&)>; Index = int; Precision = double; T = double; Params = {double, double, double, double, double}]’
../GaussNewton/Newton.h:284:34:   required from ‘auto newton::gradientDescentApprox(const FNC&, const Index&, const Precision&, const Precision&, const T&, const Params& ...) [with FNC = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1253()::<lambda(const auto:246&, const auto:247&, const auto:248&, const auto:249&, const auto:250&, const auto:251&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; Index = int; Precision = double; T = double; Params = {double, double, double, double, double}]’
OptionCalibration.h:126:45:   required from ‘auto optioncal::calibrate(const FN&, const Params& ...) [with FN = optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&) [with PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1253()::<lambda(const auto:246&, const auto:247&, const auto:248&, const auto:249&, const auto:250&, const auto:251&)>; DiscreteU = std::vector<double>]::<lambda(const auto:176& ...)>; Params = {double, double, double, double, double}]’
test.cpp:1345:98:   required from here
../FunctionalUtilities/FunctionalUtilities.h:430:22: error: no match for ‘operator=’ (operand types are ‘std::tuple<std::tuple<double, double, double, double, double>, double, double>’ and ‘void’)
             initValue=fn(initValue, i);
                      ^
In file included from /usr/include/c++/5/functional:55:0,
                 from /usr/include/c++/5/memory:79,
                 from ../FunctionalUtilities/catch.hpp:568,
                 from test.cpp:2:
/usr/include/c++/5/tuple:545:7: note: candidate: std::tuple< <template-parameter-1-1> >& std::tuple< <template-parameter-1-1> >::operator=(const std::tuple< <template-parameter-1-1> >&) [with _Elements = {std::tuple<double, double, double, double, double>, double, double}]
       operator=(const tuple& __in)
       ^
/usr/include/c++/5/tuple:545:7: note:   no known conversion for argument 1 from ‘void’ to ‘const std::tuple<std::tuple<double, double, double, double, double>, double, double>&’
/usr/include/c++/5/tuple:552:7: note: candidate: std::tuple< <template-parameter-1-1> >& std::tuple< <template-parameter-1-1> >::operator=(std::tuple< <template-parameter-1-1> >&&) [with _Elements = {std::tuple<double, double, double, double, double>, double, double}]
       operator=(tuple&& __in)
       ^
/usr/include/c++/5/tuple:552:7: note:   no known conversion for argument 1 from ‘void’ to ‘std::tuple<std::tuple<double, double, double, double, double>, double, double>&&’
/usr/include/c++/5/tuple:563:9: note: candidate: template<class ... _UElements, class> std::tuple< <template-parameter-1-1> >& std::tuple< <template-parameter-1-1> >::operator=(const std::tuple<_Args1 ...>&) [with _UElements = {_UElements ...}; <template-parameter-2-2> = <template-parameter-1-2>; _Elements = {std::tuple<double, double, double, double, double>, double, double}]
         operator=(const tuple<_UElements...>& __in)
         ^
/usr/include/c++/5/tuple:563:9: note:   template argument deduction/substitution failed:
In file included from test.cpp:3:0:
../FunctionalUtilities/FunctionalUtilities.h:430:22: note:   mismatched types ‘const std::tuple<_Elements ...>’ and ‘void’
             initValue=fn(initValue, i);
                      ^
In file included from /usr/include/c++/5/functional:55:0,
                 from /usr/include/c++/5/memory:79,
                 from ../FunctionalUtilities/catch.hpp:568,
                 from test.cpp:2:
/usr/include/c++/5/tuple:573:9: note: candidate: template<class ... _UElements, class> std::tuple< <template-parameter-1-1> >& std::tuple< <template-parameter-1-1> >::operator=(std::tuple<_Args1 ...>&&) [with _UElements = {_UElements ...}; <template-parameter-2-2> = <template-parameter-1-2>; _Elements = {std::tuple<double, double, double, double, double>, double, double}]
         operator=(tuple<_UElements...>&& __in)
         ^
/usr/include/c++/5/tuple:573:9: note:   template argument deduction/substitution failed:
In file included from test.cpp:3:0:
../FunctionalUtilities/FunctionalUtilities.h:430:22: note:   mismatched types ‘std::tuple<_Elements ...>’ and ‘void’
             initValue=fn(initValue, i);
                      ^
test.cpp: In function ‘void ____C_A_T_C_H____T_E_S_T____1253()’:
test.cpp:1357:34: error: no match for ‘operator<<’ (operand types are ‘std::basic_ostream<char>’ and ‘void’)
     std::cout<<"obj at optimal: "<<objFn(std::get<0>(results), std::get<1>(results), std::get<2>(results), std::get<3>(results), std::get<4>(results))<<std::endl;
                                  ^
In file included from /usr/include/c++/5/istream:39:0,
                 from /usr/include/c++/5/sstream:38,
                 from ../FunctionalUtilities/catch.hpp:74,
                 from test.cpp:2:
/usr/include/c++/5/ostream:108:7: note: candidate: std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(std::basic_ostream<_CharT, _Traits>::__ostream_type& (*)(std::basic_ostream<_CharT, _Traits>::__ostream_type&)) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]
       operator<<(__ostream_type& (*__pf)(__ostream_type&))
       ^
/usr/include/c++/5/ostream:108:7: note:   no known conversion for argument 1 from ‘void’ to ‘std::basic_ostream<char>::__ostream_type& (*)(std::basic_ostream<char>::__ostream_type&) {aka std::basic_ostream<char>& (*)(std::basic_ostream<char>&)}’
/usr/include/c++/5/ostream:117:7: note: candidate: std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(std::basic_ostream<_CharT, _Traits>::__ios_type& (*)(std::basic_ostream<_CharT, _Traits>::__ios_type&)) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>; std::basic_ostream<_CharT, _Traits>::__ios_type = std::basic_ios<char>]
       operator<<(__ios_type& (*__pf)(__ios_type&))
       ^
/usr/include/c++/5/ostream:117:7: note:   no known conversion for argument 1 from ‘void’ to ‘std::basic_ostream<char>::__ios_type& (*)(std::basic_ostream<char>::__ios_type&) {aka std::basic_ios<char>& (*)(std::basic_ios<char>&)}’
/usr/include/c++/5/ostream:127:7: note: candidate: std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(std::ios_base& (*)(std::ios_base&)) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]
       operator<<(ios_base& (*__pf) (ios_base&))
       ^
/usr/include/c++/5/ostream:127:7: note:   no known conversion for argument 1 from ‘void’ to ‘std::ios_base& (*)(std::ios_base&)’
/usr/include/c++/5/ostream:166:7: note: candidate: std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(long int) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]
       operator<<(long __n)
       ^
/usr/include/c++/5/ostream:166:7: note:   no known conversion for argument 1 from ‘void’ to ‘long int’
/usr/include/c++/5/ostream:170:7: note: candidate: std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(long unsigned int) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]
       operator<<(unsigned long __n)
       ^
/usr/include/c++/5/ostream:170:7: note:   no known conversion for argument 1 from ‘void’ to ‘long unsigned int’
/usr/include/c++/5/ostream:174:7: note: candidate: std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(bool) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]
       operator<<(bool __n)
       ^
/usr/include/c++/5/ostream:174:7: note:   no known conversion for argument 1 from ‘void’ to ‘bool’
In file included from /usr/include/c++/5/ostream:638:0,
                 from /usr/include/c++/5/istream:39,
                 from /usr/include/c++/5/sstream:38,
                 from ../FunctionalUtilities/catch.hpp:74,
                 from test.cpp:2:
/usr/include/c++/5/bits/ostream.tcc:91:5: note: candidate: std::basic_ostream<_CharT, _Traits>& std::basic_ostream<_CharT, _Traits>::operator<<(short int) [with _CharT = char; _Traits = std::char_traits<char>]
     basic_ostream<_CharT, _Traits>::
     ^
/usr/include/c++/5/bits/ostream.tcc:91:5: note:   no known conversion for argument 1 from ‘void’ to ‘short int’
In file included from /usr/include/c++/5/istream:39:0,
                 from /usr/include/c++/5/sstream:38,
                 from ../FunctionalUtilities/catch.hpp:74,
                 from test.cpp:2:
/usr/include/c++/5/ostream:181:7: note: candidate: std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(short unsigned int) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]
       operator<<(unsigned short __n)
       ^
/usr/include/c++/5/ostream:181:7: note:   no known conversion for argument 1 from ‘void’ to ‘short unsigned int’
In file included from /usr/include/c++/5/ostream:638:0,
                 from /usr/include/c++/5/istream:39,
                 from /usr/include/c++/5/sstream:38,
                 from ../FunctionalUtilities/catch.hpp:74,
                 from test.cpp:2:
/usr/include/c++/5/bits/ostream.tcc:105:5: note: candidate: std::basic_ostream<_CharT, _Traits>& std::basic_ostream<_CharT, _Traits>::operator<<(int) [with _CharT = char; _Traits = std::char_traits<char>]
     basic_ostream<_CharT, _Traits>::
     ^
/usr/include/c++/5/bits/ostream.tcc:105:5: note:   no known conversion for argument 1 from ‘void’ to ‘int’
In file included from /usr/include/c++/5/istream:39:0,
                 from /usr/include/c++/5/sstream:38,
                 from ../FunctionalUtilities/catch.hpp:74,
                 from test.cpp:2:
/usr/include/c++/5/ostream:192:7: note: candidate: std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(unsigned int) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]
       operator<<(unsigned int __n)
       ^
/usr/include/c++/5/ostream:192:7: note:   no known conversion for argument 1 from ‘void’ to ‘unsigned int’
/usr/include/c++/5/ostream:201:7: note: candidate: std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(long long int) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]
       operator<<(long long __n)
       ^
/usr/include/c++/5/ostream:201:7: note:   no known conversion for argument 1 from ‘void’ to ‘long long int’
/usr/include/c++/5/ostream:205:7: note: candidate: std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(long long unsigned int) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]
       operator<<(unsigned long long __n)
       ^
/usr/include/c++/5/ostream:205:7: note:   no known conversion for argument 1 from ‘void’ to ‘long long unsigned int’
/usr/include/c++/5/ostream:220:7: note: candidate: std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(double) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]
       operator<<(double __f)
       ^
/usr/include/c++/5/ostream:220:7: note:   no known conversion for argument 1 from ‘void’ to ‘double’
/usr/include/c++/5/ostream:224:7: note: candidate: std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(float) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]
       operator<<(float __f)
       ^
/usr/include/c++/5/ostream:224:7: note:   no known conversion for argument 1 from ‘void’ to ‘float’
/usr/include/c++/5/ostream:232:7: note: candidate: std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(long double) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]
       operator<<(long double __f)
       ^
/usr/include/c++/5/ostream:232:7: note:   no known conversion for argument 1 from ‘void’ to ‘long double’
/usr/include/c++/5/ostream:245:7: note: candidate: std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(const void*) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]
       operator<<(const void* __p)
       ^
/usr/include/c++/5/ostream:245:7: note:   no known conversion for argument 1 from ‘void’ to ‘const void*’
In file included from /usr/include/c++/5/ostream:638:0,
                 from /usr/include/c++/5/istream:39,
                 from /usr/include/c++/5/sstream:38,
                 from ../FunctionalUtilities/catch.hpp:74,
                 from test.cpp:2:
/usr/include/c++/5/bits/ostream.tcc:119:5: note: candidate: std::basic_ostream<_CharT, _Traits>& std::basic_ostream<_CharT, _Traits>::operator<<(std::basic_ostream<_CharT, _Traits>::__streambuf_type*) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__streambuf_type = std::basic_streambuf<char>]
     basic_ostream<_CharT, _Traits>::
     ^
/usr/include/c++/5/bits/ostream.tcc:119:5: note:   no known conversion for argument 1 from ‘void’ to ‘std::basic_ostream<char>::__streambuf_type* {aka std::basic_streambuf<char>*}’
In file included from OptionPricing.h:3:0,
                 from test.cpp:5:
/usr/include/c++/5/complex:526:5: note: candidate: template<class _Tp, class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::complex<_Tp>&)
     operator<<(basic_ostream<_CharT, _Traits>& __os, const complex<_Tp>& __x)
     ^
/usr/include/c++/5/complex:526:5: note:   template argument deduction/substitution failed:
test.cpp:1357:150: note:   mismatched types ‘const std::complex<_Tp>’ and ‘void’
     std::cout<<"obj at optimal: "<<objFn(std::get<0>(results), std::get<1>(results), std::get<2>(results), std::get<3>(results), std::get<4>(results))<<std::endl;
                                                                                                                                                      ^
In file included from ../FunctionalUtilities/catch.hpp:1503:0,
                 from test.cpp:2:
/usr/include/c++/5/iomanip:363:5: note: candidate: template<class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, std::_Put_time<_CharT>)
     operator<<(basic_ostream<_CharT, _Traits>& __os, _Put_time<_CharT> __f)
     ^
/usr/include/c++/5/iomanip:363:5: note:   template argument deduction/substitution failed:
test.cpp:1357:150: note:   mismatched types ‘std::_Put_time<_CharT>’ and ‘void’
     std::cout<<"obj at optimal: "<<objFn(std::get<0>(results), std::get<1>(results), std::get<2>(results), std::get<3>(results), std::get<4>(results))<<std::endl;
                                                                                                                                                      ^
In file included from ../FunctionalUtilities/catch.hpp:1503:0,
                 from test.cpp:2:
/usr/include/c++/5/iomanip:311:5: note: candidate: template<class _CharT, class _Traits, class _MoneyT> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, std::_Put_money<_MoneyT>)
     operator<<(basic_ostream<_CharT, _Traits>& __os, _Put_money<_MoneyT> __f)
     ^
/usr/include/c++/5/iomanip:311:5: note:   template argument deduction/substitution failed:
test.cpp:1357:150: note:   mismatched types ‘std::_Put_money<_MoneyT>’ and ‘void’
     std::cout<<"obj at optimal: "<<objFn(std::get<0>(results), std::get<1>(results), std::get<2>(results), std::get<3>(results), std::get<4>(results))<<std::endl;
                                                                                                                                                      ^
In file included from ../FunctionalUtilities/catch.hpp:1503:0,
                 from test.cpp:2:
/usr/include/c++/5/iomanip:238:5: note: candidate: template<class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, std::_Setw)
     operator<<(basic_ostream<_CharT, _Traits>& __os, _Setw __f)
     ^
/usr/include/c++/5/iomanip:238:5: note:   template argument deduction/substitution failed:
test.cpp:1357:41: note:   cannot convert ‘objFn.optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&)::<lambda(const auto:176& ...)> [with auto:176 = {double, double, double, double, double}; PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1253()::<lambda(const auto:246&, const auto:247&, const auto:248&, const auto:249&, const auto:250&, const auto:251&)>; DiscreteU = std::vector<double>]((*(const double*)std::get<0ul, {double, double, double, double, double}>(results)), (*(const double*)std::get<1ul, {double, double, double, double, double}>(results)), (*(const double*)std::get<2ul, {double, double, double, double, double}>(results)), (*(const double*)std::get<3ul, {double, double, double, double, double}>(results)), (*(const double*)std::get<4ul, {double, double, double, double, double}>(results)))’ (type ‘void’) to type ‘std::_Setw’
     std::cout<<"obj at optimal: "<<objFn(std::get<0>(results), std::get<1>(results), std::get<2>(results), std::get<3>(results), std::get<4>(results))<<std::endl;
                                         ^
In file included from ../FunctionalUtilities/catch.hpp:1503:0,
                 from test.cpp:2:
/usr/include/c++/5/iomanip:208:5: note: candidate: template<class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, std::_Setprecision)
     operator<<(basic_ostream<_CharT, _Traits>& __os, _Setprecision __f)
     ^
/usr/include/c++/5/iomanip:208:5: note:   template argument deduction/substitution failed:
test.cpp:1357:41: note:   cannot convert ‘objFn.optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&)::<lambda(const auto:176& ...)> [with auto:176 = {double, double, double, double, double}; PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1253()::<lambda(const auto:246&, const auto:247&, const auto:248&, const auto:249&, const auto:250&, const auto:251&)>; DiscreteU = std::vector<double>]((*(const double*)std::get<0ul, {double, double, double, double, double}>(results)), (*(const double*)std::get<1ul, {double, double, double, double, double}>(results)), (*(const double*)std::get<2ul, {double, double, double, double, double}>(results)), (*(const double*)std::get<3ul, {double, double, double, double, double}>(results)), (*(const double*)std::get<4ul, {double, double, double, double, double}>(results)))’ (type ‘void’) to type ‘std::_Setprecision’
     std::cout<<"obj at optimal: "<<objFn(std::get<0>(results), std::get<1>(results), std::get<2>(results), std::get<3>(results), std::get<4>(results))<<std::endl;
                                         ^
In file included from ../FunctionalUtilities/catch.hpp:1503:0,
                 from test.cpp:2:
/usr/include/c++/5/iomanip:178:5: note: candidate: template<class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, std::_Setfill<_CharT>)
     operator<<(basic_ostream<_CharT, _Traits>& __os, _Setfill<_CharT> __f)
     ^
/usr/include/c++/5/iomanip:178:5: note:   template argument deduction/substitution failed:
test.cpp:1357:150: note:   mismatched types ‘std::_Setfill<_CharT>’ and ‘void’
     std::cout<<"obj at optimal: "<<objFn(std::get<0>(results), std::get<1>(results), std::get<2>(results), std::get<3>(results), std::get<4>(results))<<std::endl;
                                                                                                                                                      ^
In file included from ../FunctionalUtilities/catch.hpp:1503:0,
                 from test.cpp:2:
/usr/include/c++/5/iomanip:143:5: note: candidate: template<class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, std::_Setbase)
     operator<<(basic_ostream<_CharT, _Traits>& __os, _Setbase __f)
     ^
/usr/include/c++/5/iomanip:143:5: note:   template argument deduction/substitution failed:
test.cpp:1357:41: note:   cannot convert ‘objFn.optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&)::<lambda(const auto:176& ...)> [with auto:176 = {double, double, double, double, double}; PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1253()::<lambda(const auto:246&, const auto:247&, const auto:248&, const auto:249&, const auto:250&, const auto:251&)>; DiscreteU = std::vector<double>]((*(const double*)std::get<0ul, {double, double, double, double, double}>(results)), (*(const double*)std::get<1ul, {double, double, double, double, double}>(results)), (*(const double*)std::get<2ul, {double, double, double, double, double}>(results)), (*(const double*)std::get<3ul, {double, double, double, double, double}>(results)), (*(const double*)std::get<4ul, {double, double, double, double, double}>(results)))’ (type ‘void’) to type ‘std::_Setbase’
     std::cout<<"obj at optimal: "<<objFn(std::get<0>(results), std::get<1>(results), std::get<2>(results), std::get<3>(results), std::get<4>(results))<<std::endl;
                                         ^
In file included from ../FunctionalUtilities/catch.hpp:1503:0,
                 from test.cpp:2:
/usr/include/c++/5/iomanip:109:5: note: candidate: template<class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, std::_Setiosflags)
     operator<<(basic_ostream<_CharT, _Traits>& __os, _Setiosflags __f)
     ^
/usr/include/c++/5/iomanip:109:5: note:   template argument deduction/substitution failed:
test.cpp:1357:41: note:   cannot convert ‘objFn.optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&)::<lambda(const auto:176& ...)> [with auto:176 = {double, double, double, double, double}; PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1253()::<lambda(const auto:246&, const auto:247&, const auto:248&, const auto:249&, const auto:250&, const auto:251&)>; DiscreteU = std::vector<double>]((*(const double*)std::get<0ul, {double, double, double, double, double}>(results)), (*(const double*)std::get<1ul, {double, double, double, double, double}>(results)), (*(const double*)std::get<2ul, {double, double, double, double, double}>(results)), (*(const double*)std::get<3ul, {double, double, double, double, double}>(results)), (*(const double*)std::get<4ul, {double, double, double, double, double}>(results)))’ (type ‘void’) to type ‘std::_Setiosflags’
     std::cout<<"obj at optimal: "<<objFn(std::get<0>(results), std::get<1>(results), std::get<2>(results), std::get<3>(results), std::get<4>(results))<<std::endl;
                                         ^
In file included from ../FunctionalUtilities/catch.hpp:1503:0,
                 from test.cpp:2:
/usr/include/c++/5/iomanip:79:5: note: candidate: template<class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, std::_Resetiosflags)
     operator<<(basic_ostream<_CharT, _Traits>& __os, _Resetiosflags __f)
     ^
/usr/include/c++/5/iomanip:79:5: note:   template argument deduction/substitution failed:
test.cpp:1357:41: note:   cannot convert ‘objFn.optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&)::<lambda(const auto:176& ...)> [with auto:176 = {double, double, double, double, double}; PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1253()::<lambda(const auto:246&, const auto:247&, const auto:248&, const auto:249&, const auto:250&, const auto:251&)>; DiscreteU = std::vector<double>]((*(const double*)std::get<0ul, {double, double, double, double, double}>(results)), (*(const double*)std::get<1ul, {double, double, double, double, double}>(results)), (*(const double*)std::get<2ul, {double, double, double, double, double}>(results)), (*(const double*)std::get<3ul, {double, double, double, double, double}>(results)), (*(const double*)std::get<4ul, {double, double, double, double, double}>(results)))’ (type ‘void’) to type ‘std::_Resetiosflags’
     std::cout<<"obj at optimal: "<<objFn(std::get<0>(results), std::get<1>(results), std::get<2>(results), std::get<3>(results), std::get<4>(results))<<std::endl;
                                         ^
In file included from /usr/include/c++/5/memory:82:0,
                 from ../FunctionalUtilities/catch.hpp:568,
                 from test.cpp:2:
/usr/include/c++/5/bits/shared_ptr.h:66:5: note: candidate: template<class _Ch, class _Tr, class _Tp, __gnu_cxx::_Lock_policy _Lp> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::__shared_ptr<_Tp, _Lp>&)
     operator<<(std::basic_ostream<_Ch, _Tr>& __os,
     ^
/usr/include/c++/5/bits/shared_ptr.h:66:5: note:   template argument deduction/substitution failed:
test.cpp:1357:150: note:   mismatched types ‘const std::__shared_ptr<_Tp, _Lp>’ and ‘void’
     std::cout<<"obj at optimal: "<<objFn(std::get<0>(results), std::get<1>(results), std::get<2>(results), std::get<3>(results), std::get<4>(results))<<std::endl;
                                                                                                                                                      ^
In file included from /usr/include/c++/5/random:51:0,
                 from /usr/include/c++/5/bits/stl_algo.h:66,
                 from /usr/include/c++/5/algorithm:62,
                 from ../FunctionalUtilities/catch.hpp:76,
                 from test.cpp:2:
/usr/include/c++/5/bits/random.tcc:3160:5: note: candidate: template<class _RealType, class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::piecewise_linear_distribution<_RealType>&)
     operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     ^
/usr/include/c++/5/bits/random.tcc:3160:5: note:   template argument deduction/substitution failed:
test.cpp:1357:150: note:   mismatched types ‘const std::piecewise_linear_distribution<_RealType>’ and ‘void’
     std::cout<<"obj at optimal: "<<objFn(std::get<0>(results), std::get<1>(results), std::get<2>(results), std::get<3>(results), std::get<4>(results))<<std::endl;
                                                                                                                                                      ^
In file included from /usr/include/c++/5/random:51:0,
                 from /usr/include/c++/5/bits/stl_algo.h:66,
                 from /usr/include/c++/5/algorithm:62,
                 from ../FunctionalUtilities/catch.hpp:76,
                 from test.cpp:2:
/usr/include/c++/5/bits/random.tcc:2944:5: note: candidate: template<class _RealType, class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::piecewise_constant_distribution<_RealType>&)
     operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     ^
/usr/include/c++/5/bits/random.tcc:2944:5: note:   template argument deduction/substitution failed:
test.cpp:1357:150: note:   mismatched types ‘const std::piecewise_constant_distribution<_RealType>’ and ‘void’
     std::cout<<"obj at optimal: "<<objFn(std::get<0>(results), std::get<1>(results), std::get<2>(results), std::get<3>(results), std::get<4>(results))<<std::endl;
                                                                                                                                                      ^
In file included from /usr/include/c++/5/random:51:0,
                 from /usr/include/c++/5/bits/stl_algo.h:66,
                 from /usr/include/c++/5/algorithm:62,
                 from ../FunctionalUtilities/catch.hpp:76,
                 from test.cpp:2:
/usr/include/c++/5/bits/random.tcc:2734:5: note: candidate: template<class _IntType, class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::discrete_distribution<_IntType>&)
     operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     ^
/usr/include/c++/5/bits/random.tcc:2734:5: note:   template argument deduction/substitution failed:
test.cpp:1357:150: note:   mismatched types ‘const std::discrete_distribution<_IntType>’ and ‘void’
     std::cout<<"obj at optimal: "<<objFn(std::get<0>(results), std::get<1>(results), std::get<2>(results), std::get<3>(results), std::get<4>(results))<<std::endl;
                                                                                                                                                      ^
In file included from /usr/include/c++/5/random:51:0,
                 from /usr/include/c++/5/bits/stl_algo.h:66,
                 from /usr/include/c++/5/algorithm:62,
                 from ../FunctionalUtilities/catch.hpp:76,
                 from test.cpp:2:
/usr/include/c++/5/bits/random.tcc:2275:5: note: candidate: template<class _RealType, class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::student_t_distribution<_RealType>&)
     operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     ^
/usr/include/c++/5/bits/random.tcc:2275:5: note:   template argument deduction/substitution failed:
test.cpp:1357:150: note:   mismatched types ‘const std::student_t_distribution<_RealType>’ and ‘void’
     std::cout<<"obj at optimal: "<<objFn(std::get<0>(results), std::get<1>(results), std::get<2>(results), std::get<3>(results), std::get<4>(results))<<std::endl;
                                                                                                                                                      ^
In file included from /usr/include/c++/5/random:51:0,
                 from /usr/include/c++/5/bits/stl_algo.h:66,
                 from /usr/include/c++/5/algorithm:62,
                 from ../FunctionalUtilities/catch.hpp:76,
                 from test.cpp:2:
/usr/include/c++/5/bits/random.tcc:2200:5: note: candidate: template<class _RealType, class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::fisher_f_distribution<_RealType>&)
     operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     ^
/usr/include/c++/5/bits/random.tcc:2200:5: note:   template argument deduction/substitution failed:
test.cpp:1357:150: note:   mismatched types ‘const std::fisher_f_distribution<_RealType>’ and ‘void’
     std::cout<<"obj at optimal: "<<objFn(std::get<0>(results), std::get<1>(results), std::get<2>(results), std::get<3>(results), std::get<4>(results))<<std::endl;
                                                                                                                                                      ^
In file included from /usr/include/c++/5/random:51:0,
                 from /usr/include/c++/5/bits/stl_algo.h:66,
                 from /usr/include/c++/5/algorithm:62,
                 from ../FunctionalUtilities/catch.hpp:76,
                 from test.cpp:2:
/usr/include/c++/5/bits/random.tcc:2036:5: note: candidate: template<class _RealType, class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::chi_squared_distribution<_RealType>&)
     operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     ^
/usr/include/c++/5/bits/random.tcc:2036:5: note:   template argument deduction/substitution failed:
test.cpp:1357:150: note:   mismatched types ‘const std::chi_squared_distribution<_RealType>’ and ‘void’
     std::cout<<"obj at optimal: "<<objFn(std::get<0>(results), std::get<1>(results), std::get<2>(results), std::get<3>(results), std::get<4>(results))<<std::endl;
                                                                                                                                                      ^
In file included from /usr/include/c++/5/random:51:0,
                 from /usr/include/c++/5/bits/stl_algo.h:66,
                 from /usr/include/c++/5/algorithm:62,
                 from ../FunctionalUtilities/catch.hpp:76,
                 from test.cpp:2:
/usr/include/c++/5/bits/random.tcc:1963:5: note: candidate: template<class _RealType, class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::lognormal_distribution<_RealType>&)
     operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     ^
/usr/include/c++/5/bits/random.tcc:1963:5: note:   template argument deduction/substitution failed:
test.cpp:1357:150: note:   mismatched types ‘const std::lognormal_distribution<_RealType>’ and ‘void’
     std::cout<<"obj at optimal: "<<objFn(std::get<0>(results), std::get<1>(results), std::get<2>(results), std::get<3>(results), std::get<4>(results))<<std::endl;
                                                                                                                                                      ^
In file included from /usr/include/c++/5/random:51:0,
                 from /usr/include/c++/5/bits/stl_algo.h:66,
                 from /usr/include/c++/5/algorithm:62,
                 from ../FunctionalUtilities/catch.hpp:76,
                 from test.cpp:2:
/usr/include/c++/5/bits/random.tcc:1667:5: note: candidate: template<class _IntType, class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::binomial_distribution<_IntType>&)
     operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     ^
/usr/include/c++/5/bits/random.tcc:1667:5: note:   template argument deduction/substitution failed:
test.cpp:1357:150: note:   mismatched types ‘const std::binomial_distribution<_IntType>’ and ‘void’
     std::cout<<"obj at optimal: "<<objFn(std::get<0>(results), std::get<1>(results), std::get<2>(results), std::get<3>(results), std::get<4>(results))<<std::endl;
                                                                                                                                                      ^
In file included from /usr/include/c++/5/random:51:0,
                 from /usr/include/c++/5/bits/stl_algo.h:66,
                 from /usr/include/c++/5/algorithm:62,
                 from ../FunctionalUtilities/catch.hpp:76,
                 from test.cpp:2:
/usr/include/c++/5/bits/random.tcc:1400:5: note: candidate: template<class _IntType, class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::poisson_distribution<_IntType>&)
     operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     ^
/usr/include/c++/5/bits/random.tcc:1400:5: note:   template argument deduction/substitution failed:
test.cpp:1357:150: note:   mismatched types ‘const std::poisson_distribution<_IntType>’ and ‘void’
     std::cout<<"obj at optimal: "<<objFn(std::get<0>(results), std::get<1>(results), std::get<2>(results), std::get<3>(results), std::get<4>(results))<<std::endl;
                                                                                                                                                      ^
In file included from /usr/include/c++/5/random:51:0,
                 from /usr/include/c++/5/bits/stl_algo.h:66,
                 from /usr/include/c++/5/algorithm:62,
                 from ../FunctionalUtilities/catch.hpp:76,
                 from test.cpp:2:
/usr/include/c++/5/bits/random.tcc:1195:5: note: candidate: template<class _IntType, class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::negative_binomial_distribution<_IntType>&)
     operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     ^
/usr/include/c++/5/bits/random.tcc:1195:5: note:   template argument deduction/substitution failed:
test.cpp:1357:150: note:   mismatched types ‘const std::negative_binomial_distribution<_IntType>’ and ‘void’
     std::cout<<"obj at optimal: "<<objFn(std::get<0>(results), std::get<1>(results), std::get<2>(results), std::get<3>(results), std::get<4>(results))<<std::endl;
                                                                                                                                                      ^
In file included from /usr/include/c++/5/random:51:0,
                 from /usr/include/c++/5/bits/stl_algo.h:66,
                 from /usr/include/c++/5/algorithm:62,
                 from ../FunctionalUtilities/catch.hpp:76,
                 from test.cpp:2:
/usr/include/c++/5/bits/random.tcc:831:5: note: candidate: template<class _RandomNumberEngine, long unsigned int __k, class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::shuffle_order_engine<_RandomNumberEngine, __k>&)
     operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     ^
/usr/include/c++/5/bits/random.tcc:831:5: note:   template argument deduction/substitution failed:
test.cpp:1357:150: note:   mismatched types ‘const std::shuffle_order_engine<_RandomNumberEngine, __k>’ and ‘void’
     std::cout<<"obj at optimal: "<<objFn(std::get<0>(results), std::get<1>(results), std::get<2>(results), std::get<3>(results), std::get<4>(results))<<std::endl;
                                                                                                                                                      ^
In file included from /usr/include/c++/5/random:51:0,
                 from /usr/include/c++/5/bits/stl_algo.h:66,
                 from /usr/include/c++/5/algorithm:62,
                 from ../FunctionalUtilities/catch.hpp:76,
                 from test.cpp:2:
/usr/include/c++/5/bits/random.tcc:702:5: note: candidate: template<class _RandomNumberEngine, long unsigned int __p, long unsigned int __r, class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::discard_block_engine<_RandomNumberEngine, __p, __r>&)
     operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     ^
/usr/include/c++/5/bits/random.tcc:702:5: note:   template argument deduction/substitution failed:
test.cpp:1357:150: note:   mismatched types ‘const std::discard_block_engine<_RandomNumberEngine, __p, __r>’ and ‘void’
     std::cout<<"obj at optimal: "<<objFn(std::get<0>(results), std::get<1>(results), std::get<2>(results), std::get<3>(results), std::get<4>(results))<<std::endl;
                                                                                                                                                      ^
In file included from /usr/include/c++/5/random:51:0,
                 from /usr/include/c++/5/bits/stl_algo.h:66,
                 from /usr/include/c++/5/algorithm:62,
                 from ../FunctionalUtilities/catch.hpp:76,
                 from test.cpp:2:
/usr/include/c++/5/bits/random.tcc:632:5: note: candidate: template<class _UIntType, long unsigned int __w, long unsigned int __s, long unsigned int __r, class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::subtract_with_carry_engine<_UIntType, __w, __s, __r>&)
     operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     ^
/usr/include/c++/5/bits/random.tcc:632:5: note:   template argument deduction/substitution failed:
test.cpp:1357:150: note:   mismatched types ‘const std::subtract_with_carry_engine<_UIntType, __w, __s, __r>’ and ‘void’
     std::cout<<"obj at optimal: "<<objFn(std::get<0>(results), std::get<1>(results), std::get<2>(results), std::get<3>(results), std::get<4>(results))<<std::endl;
                                                                                                                                                      ^
In file included from /usr/include/c++/5/random:51:0,
                 from /usr/include/c++/5/bits/stl_algo.h:66,
                 from /usr/include/c++/5/algorithm:62,
                 from ../FunctionalUtilities/catch.hpp:76,
                 from test.cpp:2:
/usr/include/c++/5/bits/random.tcc:156:5: note: candidate: template<class _UIntType, _UIntType __a, _UIntType __c, _UIntType __m, class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::linear_congruential_engine<_UIntType, __a, __c, __m>&)
     operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     ^
/usr/include/c++/5/bits/random.tcc:156:5: note:   template argument deduction/substitution failed:
test.cpp:1357:150: note:   mismatched types ‘const std::linear_congruential_engine<_UIntType, __a, __c, __m>’ and ‘void’
     std::cout<<"obj at optimal: "<<objFn(std::get<0>(results), std::get<1>(results), std::get<2>(results), std::get<3>(results), std::get<4>(results))<<std::endl;
                                                                                                                                                      ^
In file included from /usr/include/c++/5/random:51:0,
                 from /usr/include/c++/5/bits/stl_algo.h:66,
                 from /usr/include/c++/5/algorithm:62,
                 from ../FunctionalUtilities/catch.hpp:76,
                 from test.cpp:2:
/usr/include/c++/5/bits/random.tcc:2598:5: note: candidate: template<class _RealType, class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::extreme_value_distribution<_RealType>&)
     operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     ^
/usr/include/c++/5/bits/random.tcc:2598:5: note:   template argument deduction/substitution failed:
test.cpp:1357:150: note:   mismatched types ‘const std::extreme_value_distribution<_RealType>’ and ‘void’
     std::cout<<"obj at optimal: "<<objFn(std::get<0>(results), std::get<1>(results), std::get<2>(results), std::get<3>(results), std::get<4>(results))<<std::endl;
                                                                                                                                                      ^
In file included from /usr/include/c++/5/random:51:0,
                 from /usr/include/c++/5/bits/stl_algo.h:66,
                 from /usr/include/c++/5/algorithm:62,
                 from ../FunctionalUtilities/catch.hpp:76,
                 from test.cpp:2:
/usr/include/c++/5/bits/random.tcc:2522:5: note: candidate: template<class _RealType, class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::weibull_distribution<_RealType>&)
     operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     ^
/usr/include/c++/5/bits/random.tcc:2522:5: note:   template argument deduction/substitution failed:
test.cpp:1357:150: note:   mismatched types ‘const std::weibull_distribution<_RealType>’ and ‘void’
     std::cout<<"obj at optimal: "<<objFn(std::get<0>(results), std::get<1>(results), std::get<2>(results), std::get<3>(results), std::get<4>(results))<<std::endl;
                                                                                                                                                      ^
In file included from /usr/include/c++/5/random:51:0,
                 from /usr/include/c++/5/bits/stl_algo.h:66,
                 from /usr/include/c++/5/algorithm:62,
                 from ../FunctionalUtilities/catch.hpp:76,
                 from test.cpp:2:
/usr/include/c++/5/bits/random.tcc:1731:5: note: candidate: template<class _RealType, class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::exponential_distribution<_RealType>&)
     operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     ^
/usr/include/c++/5/bits/random.tcc:1731:5: note:   template argument deduction/substitution failed:
test.cpp:1357:150: note:   mismatched types ‘const std::exponential_distribution<_RealType>’ and ‘void’
     std::cout<<"obj at optimal: "<<objFn(std::get<0>(results), std::get<1>(results), std::get<2>(results), std::get<3>(results), std::get<4>(results))<<std::endl;
                                                                                                                                                      ^
In file included from /usr/include/c++/5/random:51:0,
                 from /usr/include/c++/5/bits/stl_algo.h:66,
                 from /usr/include/c++/5/algorithm:62,
                 from ../FunctionalUtilities/catch.hpp:76,
                 from test.cpp:2:
/usr/include/c++/5/bits/random.tcc:2444:5: note: candidate: template<class _RealType1, class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::gamma_distribution<_RealType>&)
     operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     ^
/usr/include/c++/5/bits/random.tcc:2444:5: note:   template argument deduction/substitution failed:
test.cpp:1357:150: note:   mismatched types ‘const std::gamma_distribution<_RealType>’ and ‘void’
     std::cout<<"obj at optimal: "<<objFn(std::get<0>(results), std::get<1>(results), std::get<2>(results), std::get<3>(results), std::get<4>(results))<<std::endl;
                                                                                                                                                      ^
In file included from /usr/include/c++/5/random:51:0,
                 from /usr/include/c++/5/bits/stl_algo.h:66,
                 from /usr/include/c++/5/algorithm:62,
                 from ../FunctionalUtilities/catch.hpp:76,
                 from test.cpp:2:
/usr/include/c++/5/bits/random.tcc:1080:5: note: candidate: template<class _IntType, class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::geometric_distribution<_IntType>&)
     operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     ^
/usr/include/c++/5/bits/random.tcc:1080:5: note:   template argument deduction/substitution failed:
test.cpp:1357:150: note:   mismatched types ‘const std::geometric_distribution<_IntType>’ and ‘void’
     std::cout<<"obj at optimal: "<<objFn(std::get<0>(results), std::get<1>(results), std::get<2>(results), std::get<3>(results), std::get<4>(results))<<std::endl;
                                                                                                                                                      ^
In file included from /usr/include/c++/5/random:51:0,
                 from /usr/include/c++/5/bits/stl_algo.h:66,
                 from /usr/include/c++/5/algorithm:62,
                 from ../FunctionalUtilities/catch.hpp:76,
                 from test.cpp:2:
/usr/include/c++/5/bits/random.tcc:1898:5: note: candidate: template<class _RealType1, class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::normal_distribution<_RealType>&)
     operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     ^
/usr/include/c++/5/bits/random.tcc:1898:5: note:   template argument deduction/substitution failed:
test.cpp:1357:150: note:   mismatched types ‘const std::normal_distribution<_RealType>’ and ‘void’
     std::cout<<"obj at optimal: "<<objFn(std::get<0>(results), std::get<1>(results), std::get<2>(results), std::get<3>(results), std::get<4>(results))<<std::endl;
                                                                                                                                                      ^
In file included from /usr/include/c++/5/random:51:0,
                 from /usr/include/c++/5/bits/stl_algo.h:66,
                 from /usr/include/c++/5/algorithm:62,
                 from ../FunctionalUtilities/catch.hpp:76,
                 from test.cpp:2:
/usr/include/c++/5/bits/random.tcc:998:5: note: candidate: template<class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::bernoulli_distribution&)
     operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     ^
/usr/include/c++/5/bits/random.tcc:998:5: note:   template argument deduction/substitution failed:
test.cpp:1357:41: note:   cannot convert ‘objFn.optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&)::<lambda(const auto:176& ...)> [with auto:176 = {double, double, double, double, double}; PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1253()::<lambda(const auto:246&, const auto:247&, const auto:248&, const auto:249&, const auto:250&, const auto:251&)>; DiscreteU = std::vector<double>]((*(const double*)std::get<0ul, {double, double, double, double, double}>(results)), (*(const double*)std::get<1ul, {double, double, double, double, double}>(results)), (*(const double*)std::get<2ul, {double, double, double, double, double}>(results)), (*(const double*)std::get<3ul, {double, double, double, double, double}>(results)), (*(const double*)std::get<4ul, {double, double, double, double, double}>(results)))’ (type ‘void’) to type ‘const std::bernoulli_distribution&’
     std::cout<<"obj at optimal: "<<objFn(std::get<0>(results), std::get<1>(results), std::get<2>(results), std::get<3>(results), std::get<4>(results))<<std::endl;
                                         ^
In file included from /usr/include/c++/5/random:51:0,
                 from /usr/include/c++/5/bits/stl_algo.h:66,
                 from /usr/include/c++/5/algorithm:62,
                 from ../FunctionalUtilities/catch.hpp:76,
                 from test.cpp:2:
/usr/include/c++/5/bits/random.tcc:2123:5: note: candidate: template<class _RealType, class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::cauchy_distribution<_RealType>&)
     operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     ^
/usr/include/c++/5/bits/random.tcc:2123:5: note:   template argument deduction/substitution failed:
test.cpp:1357:150: note:   mismatched types ‘const std::cauchy_distribution<_RealType>’ and ‘void’
     std::cout<<"obj at optimal: "<<objFn(std::get<0>(results), std::get<1>(results), std::get<2>(results), std::get<3>(results), std::get<4>(results))<<std::endl;
                                                                                                                                                      ^
In file included from /usr/include/c++/5/random:51:0,
                 from /usr/include/c++/5/bits/stl_algo.h:66,
                 from /usr/include/c++/5/algorithm:62,
                 from ../FunctionalUtilities/catch.hpp:76,
                 from test.cpp:2:
/usr/include/c++/5/bits/random.tcc:936:5: note: candidate: template<class _RealType, class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::uniform_real_distribution<_IntType>&)
     operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     ^
/usr/include/c++/5/bits/random.tcc:936:5: note:   template argument deduction/substitution failed:
test.cpp:1357:150: note:   mismatched types ‘const std::uniform_real_distribution<_IntType>’ and ‘void’
     std::cout<<"obj at optimal: "<<objFn(std::get<0>(results), std::get<1>(results), std::get<2>(results), std::get<3>(results), std::get<4>(results))<<std::endl;
                                                                                                                                                      ^
In file included from /usr/include/c++/5/random:51:0,
                 from /usr/include/c++/5/bits/stl_algo.h:66,
                 from /usr/include/c++/5/algorithm:62,
                 from ../FunctionalUtilities/catch.hpp:76,
                 from test.cpp:2:
/usr/include/c++/5/bits/random.tcc:877:5: note: candidate: template<class _IntType, class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::uniform_int_distribution<_IntType>&)
     operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     ^
/usr/include/c++/5/bits/random.tcc:877:5: note:   template argument deduction/substitution failed:
test.cpp:1357:150: note:   mismatched types ‘const std::uniform_int_distribution<_IntType>’ and ‘void’
     std::cout<<"obj at optimal: "<<objFn(std::get<0>(results), std::get<1>(results), std::get<2>(results), std::get<3>(results), std::get<4>(results))<<std::endl;
                                                                                                                                                      ^
In file included from /usr/include/c++/5/random:51:0,
                 from /usr/include/c++/5/bits/stl_algo.h:66,
                 from /usr/include/c++/5/algorithm:62,
                 from ../FunctionalUtilities/catch.hpp:76,
                 from test.cpp:2:
/usr/include/c++/5/bits/random.tcc:477:5: note: candidate: template<class _UIntType1, long unsigned int __w1, long unsigned int __n1, long unsigned int __m1, long unsigned int __r1, _UIntType1 __a1, long unsigned int __u1, _UIntType1 __d1, long unsigned int __s1, _UIntType1 __b1, long unsigned int __t1, _UIntType1 __c1, long unsigned int __l1, _UIntType1 __f1, class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d, __s, __b, __t, __c, __l, __f>&)
     operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     ^
/usr/include/c++/5/bits/random.tcc:477:5: note:   template argument deduction/substitution failed:
test.cpp:1357:150: note:   mismatched types ‘const std::mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d, __s, __b, __t, __c, __l, __f>’ and ‘void’
     std::cout<<"obj at optimal: "<<objFn(std::get<0>(results), std::get<1>(results), std::get<2>(results), std::get<3>(results), std::get<4>(results))<<std::endl;
                                                                                                                                                      ^
In file included from /usr/include/c++/5/random:49:0,
                 from /usr/include/c++/5/bits/stl_algo.h:66,
                 from /usr/include/c++/5/algorithm:62,
                 from ../FunctionalUtilities/catch.hpp:76,
                 from test.cpp:2:
/usr/include/c++/5/bits/random.h:1269:5: note: candidate: template<class _RandomNumberEngine, long unsigned int __w, class _UIntType, class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::independent_bits_engine<_RandomNumberEngine, __w, _UIntType>&)
     operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     ^
/usr/include/c++/5/bits/random.h:1269:5: note:   template argument deduction/substitution failed:
test.cpp:1357:150: note:   mismatched types ‘const std::independent_bits_engine<_RandomNumberEngine, __w, _UIntType>’ and ‘void’
     std::cout<<"obj at optimal: "<<objFn(std::get<0>(results), std::get<1>(results), std::get<2>(results), std::get<3>(results), std::get<4>(results))<<std::endl;
                                                                                                                                                      ^
In file included from /usr/include/c++/5/istream:39:0,
                 from /usr/include/c++/5/sstream:38,
                 from ../FunctionalUtilities/catch.hpp:74,
                 from test.cpp:2:
/usr/include/c++/5/ostream:628:5: note: candidate: template<class _CharT, class _Traits, class _Tp> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&&, const _Tp&)
     operator<<(basic_ostream<_CharT, _Traits>&& __os, const _Tp& __x)
     ^
/usr/include/c++/5/ostream:628:5: note:   template argument deduction/substitution failed:
/usr/include/c++/5/ostream:574:5: note: candidate: template<class _Traits> std::basic_ostream<char, _Traits>& std::operator<<(std::basic_ostream<char, _Traits>&, const unsigned char*)
     operator<<(basic_ostream<char, _Traits>& __out, const unsigned char* __s)
     ^
/usr/include/c++/5/ostream:574:5: note:   template argument deduction/substitution failed:
test.cpp:1357:41: note:   cannot convert ‘objFn.optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&)::<lambda(const auto:176& ...)> [with auto:176 = {double, double, double, double, double}; PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1253()::<lambda(const auto:246&, const auto:247&, const auto:248&, const auto:249&, const auto:250&, const auto:251&)>; DiscreteU = std::vector<double>]((*(const double*)std::get<0ul, {double, double, double, double, double}>(results)), (*(const double*)std::get<1ul, {double, double, double, double, double}>(results)), (*(const double*)std::get<2ul, {double, double, double, double, double}>(results)), (*(const double*)std::get<3ul, {double, double, double, double, double}>(results)), (*(const double*)std::get<4ul, {double, double, double, double, double}>(results)))’ (type ‘void’) to type ‘const unsigned char*’
     std::cout<<"obj at optimal: "<<objFn(std::get<0>(results), std::get<1>(results), std::get<2>(results), std::get<3>(results), std::get<4>(results))<<std::endl;
                                         ^
In file included from /usr/include/c++/5/istream:39:0,
                 from /usr/include/c++/5/sstream:38,
                 from ../FunctionalUtilities/catch.hpp:74,
                 from test.cpp:2:
/usr/include/c++/5/ostream:569:5: note: candidate: template<class _Traits> std::basic_ostream<char, _Traits>& std::operator<<(std::basic_ostream<char, _Traits>&, const signed char*)
     operator<<(basic_ostream<char, _Traits>& __out, const signed char* __s)
     ^
/usr/include/c++/5/ostream:569:5: note:   template argument deduction/substitution failed:
test.cpp:1357:41: note:   cannot convert ‘objFn.optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&)::<lambda(const auto:176& ...)> [with auto:176 = {double, double, double, double, double}; PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1253()::<lambda(const auto:246&, const auto:247&, const auto:248&, const auto:249&, const auto:250&, const auto:251&)>; DiscreteU = std::vector<double>]((*(const double*)std::get<0ul, {double, double, double, double, double}>(results)), (*(const double*)std::get<1ul, {double, double, double, double, double}>(results)), (*(const double*)std::get<2ul, {double, double, double, double, double}>(results)), (*(const double*)std::get<3ul, {double, double, double, double, double}>(results)), (*(const double*)std::get<4ul, {double, double, double, double, double}>(results)))’ (type ‘void’) to type ‘const signed char*’
     std::cout<<"obj at optimal: "<<objFn(std::get<0>(results), std::get<1>(results), std::get<2>(results), std::get<3>(results), std::get<4>(results))<<std::endl;
                                         ^
In file included from /usr/include/c++/5/istream:39:0,
                 from /usr/include/c++/5/sstream:38,
                 from ../FunctionalUtilities/catch.hpp:74,
                 from test.cpp:2:
/usr/include/c++/5/ostream:556:5: note: candidate: template<class _Traits> std::basic_ostream<char, _Traits>& std::operator<<(std::basic_ostream<char, _Traits>&, const char*)
     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
     ^
/usr/include/c++/5/ostream:556:5: note:   template argument deduction/substitution failed:
test.cpp:1357:41: note:   cannot convert ‘objFn.optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&)::<lambda(const auto:176& ...)> [with auto:176 = {double, double, double, double, double}; PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1253()::<lambda(const auto:246&, const auto:247&, const auto:248&, const auto:249&, const auto:250&, const auto:251&)>; DiscreteU = std::vector<double>]((*(const double*)std::get<0ul, {double, double, double, double, double}>(results)), (*(const double*)std::get<1ul, {double, double, double, double, double}>(results)), (*(const double*)std::get<2ul, {double, double, double, double, double}>(results)), (*(const double*)std::get<3ul, {double, double, double, double, double}>(results)), (*(const double*)std::get<4ul, {double, double, double, double, double}>(results)))’ (type ‘void’) to type ‘const char*’
     std::cout<<"obj at optimal: "<<objFn(std::get<0>(results), std::get<1>(results), std::get<2>(results), std::get<3>(results), std::get<4>(results))<<std::endl;
                                         ^
In file included from /usr/include/c++/5/ostream:638:0,
                 from /usr/include/c++/5/istream:39,
                 from /usr/include/c++/5/sstream:38,
                 from ../FunctionalUtilities/catch.hpp:74,
                 from test.cpp:2:
/usr/include/c++/5/bits/ostream.tcc:321:5: note: candidate: template<class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const char*)
     operator<<(basic_ostream<_CharT, _Traits>& __out, const char* __s)
     ^
/usr/include/c++/5/bits/ostream.tcc:321:5: note:   template argument deduction/substitution failed:
test.cpp:1357:41: note:   cannot convert ‘objFn.optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&)::<lambda(const auto:176& ...)> [with auto:176 = {double, double, double, double, double}; PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1253()::<lambda(const auto:246&, const auto:247&, const auto:248&, const auto:249&, const auto:250&, const auto:251&)>; DiscreteU = std::vector<double>]((*(const double*)std::get<0ul, {double, double, double, double, double}>(results)), (*(const double*)std::get<1ul, {double, double, double, double, double}>(results)), (*(const double*)std::get<2ul, {double, double, double, double, double}>(results)), (*(const double*)std::get<3ul, {double, double, double, double, double}>(results)), (*(const double*)std::get<4ul, {double, double, double, double, double}>(results)))’ (type ‘void’) to type ‘const char*’
     std::cout<<"obj at optimal: "<<objFn(std::get<0>(results), std::get<1>(results), std::get<2>(results), std::get<3>(results), std::get<4>(results))<<std::endl;
                                         ^
In file included from /usr/include/c++/5/istream:39:0,
                 from /usr/include/c++/5/sstream:38,
                 from ../FunctionalUtilities/catch.hpp:74,
                 from test.cpp:2:
/usr/include/c++/5/ostream:539:5: note: candidate: template<class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const _CharT*)
     operator<<(basic_ostream<_CharT, _Traits>& __out, const _CharT* __s)
     ^
/usr/include/c++/5/ostream:539:5: note:   template argument deduction/substitution failed:
test.cpp:1357:150: note:   mismatched types ‘const _CharT*’ and ‘void’
     std::cout<<"obj at optimal: "<<objFn(std::get<0>(results), std::get<1>(results), std::get<2>(results), std::get<3>(results), std::get<4>(results))<<std::endl;
                                                                                                                                                      ^
In file included from /usr/include/c++/5/istream:39:0,
                 from /usr/include/c++/5/sstream:38,
                 from ../FunctionalUtilities/catch.hpp:74,
                 from test.cpp:2:
/usr/include/c++/5/ostream:519:5: note: candidate: template<class _Traits> std::basic_ostream<char, _Traits>& std::operator<<(std::basic_ostream<char, _Traits>&, unsigned char)
     operator<<(basic_ostream<char, _Traits>& __out, unsigned char __c)
     ^
/usr/include/c++/5/ostream:519:5: note:   template argument deduction/substitution failed:
test.cpp:1357:41: note:   cannot convert ‘objFn.optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&)::<lambda(const auto:176& ...)> [with auto:176 = {double, double, double, double, double}; PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1253()::<lambda(const auto:246&, const auto:247&, const auto:248&, const auto:249&, const auto:250&, const auto:251&)>; DiscreteU = std::vector<double>]((*(const double*)std::get<0ul, {double, double, double, double, double}>(results)), (*(const double*)std::get<1ul, {double, double, double, double, double}>(results)), (*(const double*)std::get<2ul, {double, double, double, double, double}>(results)), (*(const double*)std::get<3ul, {double, double, double, double, double}>(results)), (*(const double*)std::get<4ul, {double, double, double, double, double}>(results)))’ (type ‘void’) to type ‘unsigned char’
     std::cout<<"obj at optimal: "<<objFn(std::get<0>(results), std::get<1>(results), std::get<2>(results), std::get<3>(results), std::get<4>(results))<<std::endl;
                                         ^
In file included from /usr/include/c++/5/istream:39:0,
                 from /usr/include/c++/5/sstream:38,
                 from ../FunctionalUtilities/catch.hpp:74,
                 from test.cpp:2:
/usr/include/c++/5/ostream:514:5: note: candidate: template<class _Traits> std::basic_ostream<char, _Traits>& std::operator<<(std::basic_ostream<char, _Traits>&, signed char)
     operator<<(basic_ostream<char, _Traits>& __out, signed char __c)
     ^
/usr/include/c++/5/ostream:514:5: note:   template argument deduction/substitution failed:
test.cpp:1357:41: note:   cannot convert ‘objFn.optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&)::<lambda(const auto:176& ...)> [with auto:176 = {double, double, double, double, double}; PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1253()::<lambda(const auto:246&, const auto:247&, const auto:248&, const auto:249&, const auto:250&, const auto:251&)>; DiscreteU = std::vector<double>]((*(const double*)std::get<0ul, {double, double, double, double, double}>(results)), (*(const double*)std::get<1ul, {double, double, double, double, double}>(results)), (*(const double*)std::get<2ul, {double, double, double, double, double}>(results)), (*(const double*)std::get<3ul, {double, double, double, double, double}>(results)), (*(const double*)std::get<4ul, {double, double, double, double, double}>(results)))’ (type ‘void’) to type ‘signed char’
     std::cout<<"obj at optimal: "<<objFn(std::get<0>(results), std::get<1>(results), std::get<2>(results), std::get<3>(results), std::get<4>(results))<<std::endl;
                                         ^
In file included from /usr/include/c++/5/istream:39:0,
                 from /usr/include/c++/5/sstream:38,
                 from ../FunctionalUtilities/catch.hpp:74,
                 from test.cpp:2:
/usr/include/c++/5/ostream:508:5: note: candidate: template<class _Traits> std::basic_ostream<char, _Traits>& std::operator<<(std::basic_ostream<char, _Traits>&, char)
     operator<<(basic_ostream<char, _Traits>& __out, char __c)
     ^
/usr/include/c++/5/ostream:508:5: note:   template argument deduction/substitution failed:
test.cpp:1357:41: note:   cannot convert ‘objFn.optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&)::<lambda(const auto:176& ...)> [with auto:176 = {double, double, double, double, double}; PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1253()::<lambda(const auto:246&, const auto:247&, const auto:248&, const auto:249&, const auto:250&, const auto:251&)>; DiscreteU = std::vector<double>]((*(const double*)std::get<0ul, {double, double, double, double, double}>(results)), (*(const double*)std::get<1ul, {double, double, double, double, double}>(results)), (*(const double*)std::get<2ul, {double, double, double, double, double}>(results)), (*(const double*)std::get<3ul, {double, double, double, double, double}>(results)), (*(const double*)std::get<4ul, {double, double, double, double, double}>(results)))’ (type ‘void’) to type ‘char’
     std::cout<<"obj at optimal: "<<objFn(std::get<0>(results), std::get<1>(results), std::get<2>(results), std::get<3>(results), std::get<4>(results))<<std::endl;
                                         ^
In file included from /usr/include/c++/5/istream:39:0,
                 from /usr/include/c++/5/sstream:38,
                 from ../FunctionalUtilities/catch.hpp:74,
                 from test.cpp:2:
/usr/include/c++/5/ostream:502:5: note: candidate: template<class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, char)
     operator<<(basic_ostream<_CharT, _Traits>& __out, char __c)
     ^
/usr/include/c++/5/ostream:502:5: note:   template argument deduction/substitution failed:
test.cpp:1357:41: note:   cannot convert ‘objFn.optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&)::<lambda(const auto:176& ...)> [with auto:176 = {double, double, double, double, double}; PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1253()::<lambda(const auto:246&, const auto:247&, const auto:248&, const auto:249&, const auto:250&, const auto:251&)>; DiscreteU = std::vector<double>]((*(const double*)std::get<0ul, {double, double, double, double, double}>(results)), (*(const double*)std::get<1ul, {double, double, double, double, double}>(results)), (*(const double*)std::get<2ul, {double, double, double, double, double}>(results)), (*(const double*)std::get<3ul, {double, double, double, double, double}>(results)), (*(const double*)std::get<4ul, {double, double, double, double, double}>(results)))’ (type ‘void’) to type ‘char’
     std::cout<<"obj at optimal: "<<objFn(std::get<0>(results), std::get<1>(results), std::get<2>(results), std::get<3>(results), std::get<4>(results))<<std::endl;
                                         ^
In file included from /usr/include/c++/5/istream:39:0,
                 from /usr/include/c++/5/sstream:38,
                 from ../FunctionalUtilities/catch.hpp:74,
                 from test.cpp:2:
/usr/include/c++/5/ostream:497:5: note: candidate: template<class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, _CharT)
     operator<<(basic_ostream<_CharT, _Traits>& __out, _CharT __c)
     ^
/usr/include/c++/5/ostream:497:5: note:   template argument deduction/substitution failed:
test.cpp:1357:150: note:   deduced conflicting types for parameter ‘_CharT’ (‘char’ and ‘void’)
     std::cout<<"obj at optimal: "<<objFn(std::get<0>(results), std::get<1>(results), std::get<2>(results), std::get<3>(results), std::get<4>(results))<<std::endl;
                                                                                                                                                      ^
In file included from /usr/include/c++/5/bits/ios_base.h:46:0,
                 from /usr/include/c++/5/ios:42,
                 from /usr/include/c++/5/istream:38,
                 from /usr/include/c++/5/sstream:38,
                 from ../FunctionalUtilities/catch.hpp:74,
                 from test.cpp:2:
/usr/include/c++/5/system_error:209:5: note: candidate: template<class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::error_code&)
     operator<<(basic_ostream<_CharT, _Traits>& __os, const error_code& __e)
     ^
/usr/include/c++/5/system_error:209:5: note:   template argument deduction/substitution failed:
test.cpp:1357:41: note:   cannot convert ‘objFn.optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&)::<lambda(const auto:176& ...)> [with auto:176 = {double, double, double, double, double}; PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1253()::<lambda(const auto:246&, const auto:247&, const auto:248&, const auto:249&, const auto:250&, const auto:251&)>; DiscreteU = std::vector<double>]((*(const double*)std::get<0ul, {double, double, double, double, double}>(results)), (*(const double*)std::get<1ul, {double, double, double, double, double}>(results)), (*(const double*)std::get<2ul, {double, double, double, double, double}>(results)), (*(const double*)std::get<3ul, {double, double, double, double, double}>(results)), (*(const double*)std::get<4ul, {double, double, double, double, double}>(results)))’ (type ‘void’) to type ‘const std::error_code&’
     std::cout<<"obj at optimal: "<<objFn(std::get<0>(results), std::get<1>(results), std::get<2>(results), std::get<3>(results), std::get<4>(results))<<std::endl;
                                         ^
In file included from /usr/include/c++/5/string:52:0,
                 from /usr/include/c++/5/bits/locale_classes.h:40,
                 from /usr/include/c++/5/bits/ios_base.h:41,
                 from /usr/include/c++/5/ios:42,
                 from /usr/include/c++/5/istream:38,
                 from /usr/include/c++/5/sstream:38,
                 from ../FunctionalUtilities/catch.hpp:74,
                 from test.cpp:2:
/usr/include/c++/5/bits/basic_string.h:5172:5: note: candidate: template<class _CharT, class _Traits, class _Alloc> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&)
     operator<<(basic_ostream<_CharT, _Traits>& __os,
     ^
/usr/include/c++/5/bits/basic_string.h:5172:5: note:   template argument deduction/substitution failed:
test.cpp:1357:150: note:   mismatched types ‘const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>’ and ‘void’
     std::cout<<"obj at optimal: "<<objFn(std::get<0>(results), std::get<1>(results), std::get<2>(results), std::get<3>(results), std::get<4>(results))<<std::endl;
                                                                                                                                                      ^
test.cpp:1359:33: error: no match for ‘operator<<’ (operand types are ‘std::basic_ostream<char>’ and ‘void’)
     std::cout<<"obj at actual: "<<objFn(sig, speed, adaV, rho, v0Hat)<<std::endl;
                                 ^
In file included from /usr/include/c++/5/istream:39:0,
                 from /usr/include/c++/5/sstream:38,
                 from ../FunctionalUtilities/catch.hpp:74,
                 from test.cpp:2:
/usr/include/c++/5/ostream:108:7: note: candidate: std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(std::basic_ostream<_CharT, _Traits>::__ostream_type& (*)(std::basic_ostream<_CharT, _Traits>::__ostream_type&)) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]
       operator<<(__ostream_type& (*__pf)(__ostream_type&))
       ^
/usr/include/c++/5/ostream:108:7: note:   no known conversion for argument 1 from ‘void’ to ‘std::basic_ostream<char>::__ostream_type& (*)(std::basic_ostream<char>::__ostream_type&) {aka std::basic_ostream<char>& (*)(std::basic_ostream<char>&)}’
/usr/include/c++/5/ostream:117:7: note: candidate: std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(std::basic_ostream<_CharT, _Traits>::__ios_type& (*)(std::basic_ostream<_CharT, _Traits>::__ios_type&)) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>; std::basic_ostream<_CharT, _Traits>::__ios_type = std::basic_ios<char>]
       operator<<(__ios_type& (*__pf)(__ios_type&))
       ^
/usr/include/c++/5/ostream:117:7: note:   no known conversion for argument 1 from ‘void’ to ‘std::basic_ostream<char>::__ios_type& (*)(std::basic_ostream<char>::__ios_type&) {aka std::basic_ios<char>& (*)(std::basic_ios<char>&)}’
/usr/include/c++/5/ostream:127:7: note: candidate: std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(std::ios_base& (*)(std::ios_base&)) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]
       operator<<(ios_base& (*__pf) (ios_base&))
       ^
/usr/include/c++/5/ostream:127:7: note:   no known conversion for argument 1 from ‘void’ to ‘std::ios_base& (*)(std::ios_base&)’
/usr/include/c++/5/ostream:166:7: note: candidate: std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(long int) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]
       operator<<(long __n)
       ^
/usr/include/c++/5/ostream:166:7: note:   no known conversion for argument 1 from ‘void’ to ‘long int’
/usr/include/c++/5/ostream:170:7: note: candidate: std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(long unsigned int) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]
       operator<<(unsigned long __n)
       ^
/usr/include/c++/5/ostream:170:7: note:   no known conversion for argument 1 from ‘void’ to ‘long unsigned int’
/usr/include/c++/5/ostream:174:7: note: candidate: std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(bool) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]
       operator<<(bool __n)
       ^
/usr/include/c++/5/ostream:174:7: note:   no known conversion for argument 1 from ‘void’ to ‘bool’
In file included from /usr/include/c++/5/ostream:638:0,
                 from /usr/include/c++/5/istream:39,
                 from /usr/include/c++/5/sstream:38,
                 from ../FunctionalUtilities/catch.hpp:74,
                 from test.cpp:2:
/usr/include/c++/5/bits/ostream.tcc:91:5: note: candidate: std::basic_ostream<_CharT, _Traits>& std::basic_ostream<_CharT, _Traits>::operator<<(short int) [with _CharT = char; _Traits = std::char_traits<char>]
     basic_ostream<_CharT, _Traits>::
     ^
/usr/include/c++/5/bits/ostream.tcc:91:5: note:   no known conversion for argument 1 from ‘void’ to ‘short int’
In file included from /usr/include/c++/5/istream:39:0,
                 from /usr/include/c++/5/sstream:38,
                 from ../FunctionalUtilities/catch.hpp:74,
                 from test.cpp:2:
/usr/include/c++/5/ostream:181:7: note: candidate: std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(short unsigned int) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]
       operator<<(unsigned short __n)
       ^
/usr/include/c++/5/ostream:181:7: note:   no known conversion for argument 1 from ‘void’ to ‘short unsigned int’
In file included from /usr/include/c++/5/ostream:638:0,
                 from /usr/include/c++/5/istream:39,
                 from /usr/include/c++/5/sstream:38,
                 from ../FunctionalUtilities/catch.hpp:74,
                 from test.cpp:2:
/usr/include/c++/5/bits/ostream.tcc:105:5: note: candidate: std::basic_ostream<_CharT, _Traits>& std::basic_ostream<_CharT, _Traits>::operator<<(int) [with _CharT = char; _Traits = std::char_traits<char>]
     basic_ostream<_CharT, _Traits>::
     ^
/usr/include/c++/5/bits/ostream.tcc:105:5: note:   no known conversion for argument 1 from ‘void’ to ‘int’
In file included from /usr/include/c++/5/istream:39:0,
                 from /usr/include/c++/5/sstream:38,
                 from ../FunctionalUtilities/catch.hpp:74,
                 from test.cpp:2:
/usr/include/c++/5/ostream:192:7: note: candidate: std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(unsigned int) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]
       operator<<(unsigned int __n)
       ^
/usr/include/c++/5/ostream:192:7: note:   no known conversion for argument 1 from ‘void’ to ‘unsigned int’
/usr/include/c++/5/ostream:201:7: note: candidate: std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(long long int) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]
       operator<<(long long __n)
       ^
/usr/include/c++/5/ostream:201:7: note:   no known conversion for argument 1 from ‘void’ to ‘long long int’
/usr/include/c++/5/ostream:205:7: note: candidate: std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(long long unsigned int) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]
       operator<<(unsigned long long __n)
       ^
/usr/include/c++/5/ostream:205:7: note:   no known conversion for argument 1 from ‘void’ to ‘long long unsigned int’
/usr/include/c++/5/ostream:220:7: note: candidate: std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(double) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]
       operator<<(double __f)
       ^
/usr/include/c++/5/ostream:220:7: note:   no known conversion for argument 1 from ‘void’ to ‘double’
/usr/include/c++/5/ostream:224:7: note: candidate: std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(float) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]
       operator<<(float __f)
       ^
/usr/include/c++/5/ostream:224:7: note:   no known conversion for argument 1 from ‘void’ to ‘float’
/usr/include/c++/5/ostream:232:7: note: candidate: std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(long double) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]
       operator<<(long double __f)
       ^
/usr/include/c++/5/ostream:232:7: note:   no known conversion for argument 1 from ‘void’ to ‘long double’
/usr/include/c++/5/ostream:245:7: note: candidate: std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(const void*) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]
       operator<<(const void* __p)
       ^
/usr/include/c++/5/ostream:245:7: note:   no known conversion for argument 1 from ‘void’ to ‘const void*’
In file included from /usr/include/c++/5/ostream:638:0,
                 from /usr/include/c++/5/istream:39,
                 from /usr/include/c++/5/sstream:38,
                 from ../FunctionalUtilities/catch.hpp:74,
                 from test.cpp:2:
/usr/include/c++/5/bits/ostream.tcc:119:5: note: candidate: std::basic_ostream<_CharT, _Traits>& std::basic_ostream<_CharT, _Traits>::operator<<(std::basic_ostream<_CharT, _Traits>::__streambuf_type*) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__streambuf_type = std::basic_streambuf<char>]
     basic_ostream<_CharT, _Traits>::
     ^
/usr/include/c++/5/bits/ostream.tcc:119:5: note:   no known conversion for argument 1 from ‘void’ to ‘std::basic_ostream<char>::__streambuf_type* {aka std::basic_streambuf<char>*}’
In file included from OptionPricing.h:3:0,
                 from test.cpp:5:
/usr/include/c++/5/complex:526:5: note: candidate: template<class _Tp, class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::complex<_Tp>&)
     operator<<(basic_ostream<_CharT, _Traits>& __os, const complex<_Tp>& __x)
     ^
/usr/include/c++/5/complex:526:5: note:   template argument deduction/substitution failed:
test.cpp:1359:69: note:   mismatched types ‘const std::complex<_Tp>’ and ‘void’
     std::cout<<"obj at actual: "<<objFn(sig, speed, adaV, rho, v0Hat)<<std::endl;
                                                                     ^
In file included from ../FunctionalUtilities/catch.hpp:1503:0,
                 from test.cpp:2:
/usr/include/c++/5/iomanip:363:5: note: candidate: template<class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, std::_Put_time<_CharT>)
     operator<<(basic_ostream<_CharT, _Traits>& __os, _Put_time<_CharT> __f)
     ^
/usr/include/c++/5/iomanip:363:5: note:   template argument deduction/substitution failed:
test.cpp:1359:69: note:   mismatched types ‘std::_Put_time<_CharT>’ and ‘void’
     std::cout<<"obj at actual: "<<objFn(sig, speed, adaV, rho, v0Hat)<<std::endl;
                                                                     ^
In file included from ../FunctionalUtilities/catch.hpp:1503:0,
                 from test.cpp:2:
/usr/include/c++/5/iomanip:311:5: note: candidate: template<class _CharT, class _Traits, class _MoneyT> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, std::_Put_money<_MoneyT>)
     operator<<(basic_ostream<_CharT, _Traits>& __os, _Put_money<_MoneyT> __f)
     ^
/usr/include/c++/5/iomanip:311:5: note:   template argument deduction/substitution failed:
test.cpp:1359:69: note:   mismatched types ‘std::_Put_money<_MoneyT>’ and ‘void’
     std::cout<<"obj at actual: "<<objFn(sig, speed, adaV, rho, v0Hat)<<std::endl;
                                                                     ^
In file included from ../FunctionalUtilities/catch.hpp:1503:0,
                 from test.cpp:2:
/usr/include/c++/5/iomanip:238:5: note: candidate: template<class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, std::_Setw)
     operator<<(basic_ostream<_CharT, _Traits>& __os, _Setw __f)
     ^
/usr/include/c++/5/iomanip:238:5: note:   template argument deduction/substitution failed:
test.cpp:1359:40: note:   cannot convert ‘objFn.optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&)::<lambda(const auto:176& ...)> [with auto:176 = {double, double, double, double, double}; PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1253()::<lambda(const auto:246&, const auto:247&, const auto:248&, const auto:249&, const auto:250&, const auto:251&)>; DiscreteU = std::vector<double>](sig, speed, adaV, rho, v0Hat)’ (type ‘void’) to type ‘std::_Setw’
     std::cout<<"obj at actual: "<<objFn(sig, speed, adaV, rho, v0Hat)<<std::endl;
                                        ^
In file included from ../FunctionalUtilities/catch.hpp:1503:0,
                 from test.cpp:2:
/usr/include/c++/5/iomanip:208:5: note: candidate: template<class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, std::_Setprecision)
     operator<<(basic_ostream<_CharT, _Traits>& __os, _Setprecision __f)
     ^
/usr/include/c++/5/iomanip:208:5: note:   template argument deduction/substitution failed:
test.cpp:1359:40: note:   cannot convert ‘objFn.optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&)::<lambda(const auto:176& ...)> [with auto:176 = {double, double, double, double, double}; PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1253()::<lambda(const auto:246&, const auto:247&, const auto:248&, const auto:249&, const auto:250&, const auto:251&)>; DiscreteU = std::vector<double>](sig, speed, adaV, rho, v0Hat)’ (type ‘void’) to type ‘std::_Setprecision’
     std::cout<<"obj at actual: "<<objFn(sig, speed, adaV, rho, v0Hat)<<std::endl;
                                        ^
In file included from ../FunctionalUtilities/catch.hpp:1503:0,
                 from test.cpp:2:
/usr/include/c++/5/iomanip:178:5: note: candidate: template<class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, std::_Setfill<_CharT>)
     operator<<(basic_ostream<_CharT, _Traits>& __os, _Setfill<_CharT> __f)
     ^
/usr/include/c++/5/iomanip:178:5: note:   template argument deduction/substitution failed:
test.cpp:1359:69: note:   mismatched types ‘std::_Setfill<_CharT>’ and ‘void’
     std::cout<<"obj at actual: "<<objFn(sig, speed, adaV, rho, v0Hat)<<std::endl;
                                                                     ^
In file included from ../FunctionalUtilities/catch.hpp:1503:0,
                 from test.cpp:2:
/usr/include/c++/5/iomanip:143:5: note: candidate: template<class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, std::_Setbase)
     operator<<(basic_ostream<_CharT, _Traits>& __os, _Setbase __f)
     ^
/usr/include/c++/5/iomanip:143:5: note:   template argument deduction/substitution failed:
test.cpp:1359:40: note:   cannot convert ‘objFn.optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&)::<lambda(const auto:176& ...)> [with auto:176 = {double, double, double, double, double}; PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1253()::<lambda(const auto:246&, const auto:247&, const auto:248&, const auto:249&, const auto:250&, const auto:251&)>; DiscreteU = std::vector<double>](sig, speed, adaV, rho, v0Hat)’ (type ‘void’) to type ‘std::_Setbase’
     std::cout<<"obj at actual: "<<objFn(sig, speed, adaV, rho, v0Hat)<<std::endl;
                                        ^
In file included from ../FunctionalUtilities/catch.hpp:1503:0,
                 from test.cpp:2:
/usr/include/c++/5/iomanip:109:5: note: candidate: template<class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, std::_Setiosflags)
     operator<<(basic_ostream<_CharT, _Traits>& __os, _Setiosflags __f)
     ^
/usr/include/c++/5/iomanip:109:5: note:   template argument deduction/substitution failed:
test.cpp:1359:40: note:   cannot convert ‘objFn.optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&)::<lambda(const auto:176& ...)> [with auto:176 = {double, double, double, double, double}; PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1253()::<lambda(const auto:246&, const auto:247&, const auto:248&, const auto:249&, const auto:250&, const auto:251&)>; DiscreteU = std::vector<double>](sig, speed, adaV, rho, v0Hat)’ (type ‘void’) to type ‘std::_Setiosflags’
     std::cout<<"obj at actual: "<<objFn(sig, speed, adaV, rho, v0Hat)<<std::endl;
                                        ^
In file included from ../FunctionalUtilities/catch.hpp:1503:0,
                 from test.cpp:2:
/usr/include/c++/5/iomanip:79:5: note: candidate: template<class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, std::_Resetiosflags)
     operator<<(basic_ostream<_CharT, _Traits>& __os, _Resetiosflags __f)
     ^
/usr/include/c++/5/iomanip:79:5: note:   template argument deduction/substitution failed:
test.cpp:1359:40: note:   cannot convert ‘objFn.optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&)::<lambda(const auto:176& ...)> [with auto:176 = {double, double, double, double, double}; PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1253()::<lambda(const auto:246&, const auto:247&, const auto:248&, const auto:249&, const auto:250&, const auto:251&)>; DiscreteU = std::vector<double>](sig, speed, adaV, rho, v0Hat)’ (type ‘void’) to type ‘std::_Resetiosflags’
     std::cout<<"obj at actual: "<<objFn(sig, speed, adaV, rho, v0Hat)<<std::endl;
                                        ^
In file included from /usr/include/c++/5/memory:82:0,
                 from ../FunctionalUtilities/catch.hpp:568,
                 from test.cpp:2:
/usr/include/c++/5/bits/shared_ptr.h:66:5: note: candidate: template<class _Ch, class _Tr, class _Tp, __gnu_cxx::_Lock_policy _Lp> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::__shared_ptr<_Tp, _Lp>&)
     operator<<(std::basic_ostream<_Ch, _Tr>& __os,
     ^
/usr/include/c++/5/bits/shared_ptr.h:66:5: note:   template argument deduction/substitution failed:
test.cpp:1359:69: note:   mismatched types ‘const std::__shared_ptr<_Tp, _Lp>’ and ‘void’
     std::cout<<"obj at actual: "<<objFn(sig, speed, adaV, rho, v0Hat)<<std::endl;
                                                                     ^
In file included from /usr/include/c++/5/random:51:0,
                 from /usr/include/c++/5/bits/stl_algo.h:66,
                 from /usr/include/c++/5/algorithm:62,
                 from ../FunctionalUtilities/catch.hpp:76,
                 from test.cpp:2:
/usr/include/c++/5/bits/random.tcc:3160:5: note: candidate: template<class _RealType, class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::piecewise_linear_distribution<_RealType>&)
     operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     ^
/usr/include/c++/5/bits/random.tcc:3160:5: note:   template argument deduction/substitution failed:
test.cpp:1359:69: note:   mismatched types ‘const std::piecewise_linear_distribution<_RealType>’ and ‘void’
     std::cout<<"obj at actual: "<<objFn(sig, speed, adaV, rho, v0Hat)<<std::endl;
                                                                     ^
In file included from /usr/include/c++/5/random:51:0,
                 from /usr/include/c++/5/bits/stl_algo.h:66,
                 from /usr/include/c++/5/algorithm:62,
                 from ../FunctionalUtilities/catch.hpp:76,
                 from test.cpp:2:
/usr/include/c++/5/bits/random.tcc:2944:5: note: candidate: template<class _RealType, class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::piecewise_constant_distribution<_RealType>&)
     operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     ^
/usr/include/c++/5/bits/random.tcc:2944:5: note:   template argument deduction/substitution failed:
test.cpp:1359:69: note:   mismatched types ‘const std::piecewise_constant_distribution<_RealType>’ and ‘void’
     std::cout<<"obj at actual: "<<objFn(sig, speed, adaV, rho, v0Hat)<<std::endl;
                                                                     ^
In file included from /usr/include/c++/5/random:51:0,
                 from /usr/include/c++/5/bits/stl_algo.h:66,
                 from /usr/include/c++/5/algorithm:62,
                 from ../FunctionalUtilities/catch.hpp:76,
                 from test.cpp:2:
/usr/include/c++/5/bits/random.tcc:2734:5: note: candidate: template<class _IntType, class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::discrete_distribution<_IntType>&)
     operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     ^
/usr/include/c++/5/bits/random.tcc:2734:5: note:   template argument deduction/substitution failed:
test.cpp:1359:69: note:   mismatched types ‘const std::discrete_distribution<_IntType>’ and ‘void’
     std::cout<<"obj at actual: "<<objFn(sig, speed, adaV, rho, v0Hat)<<std::endl;
                                                                     ^
In file included from /usr/include/c++/5/random:51:0,
                 from /usr/include/c++/5/bits/stl_algo.h:66,
                 from /usr/include/c++/5/algorithm:62,
                 from ../FunctionalUtilities/catch.hpp:76,
                 from test.cpp:2:
/usr/include/c++/5/bits/random.tcc:2275:5: note: candidate: template<class _RealType, class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::student_t_distribution<_RealType>&)
     operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     ^
/usr/include/c++/5/bits/random.tcc:2275:5: note:   template argument deduction/substitution failed:
test.cpp:1359:69: note:   mismatched types ‘const std::student_t_distribution<_RealType>’ and ‘void’
     std::cout<<"obj at actual: "<<objFn(sig, speed, adaV, rho, v0Hat)<<std::endl;
                                                                     ^
In file included from /usr/include/c++/5/random:51:0,
                 from /usr/include/c++/5/bits/stl_algo.h:66,
                 from /usr/include/c++/5/algorithm:62,
                 from ../FunctionalUtilities/catch.hpp:76,
                 from test.cpp:2:
/usr/include/c++/5/bits/random.tcc:2200:5: note: candidate: template<class _RealType, class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::fisher_f_distribution<_RealType>&)
     operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     ^
/usr/include/c++/5/bits/random.tcc:2200:5: note:   template argument deduction/substitution failed:
test.cpp:1359:69: note:   mismatched types ‘const std::fisher_f_distribution<_RealType>’ and ‘void’
     std::cout<<"obj at actual: "<<objFn(sig, speed, adaV, rho, v0Hat)<<std::endl;
                                                                     ^
In file included from /usr/include/c++/5/random:51:0,
                 from /usr/include/c++/5/bits/stl_algo.h:66,
                 from /usr/include/c++/5/algorithm:62,
                 from ../FunctionalUtilities/catch.hpp:76,
                 from test.cpp:2:
/usr/include/c++/5/bits/random.tcc:2036:5: note: candidate: template<class _RealType, class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::chi_squared_distribution<_RealType>&)
     operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     ^
/usr/include/c++/5/bits/random.tcc:2036:5: note:   template argument deduction/substitution failed:
test.cpp:1359:69: note:   mismatched types ‘const std::chi_squared_distribution<_RealType>’ and ‘void’
     std::cout<<"obj at actual: "<<objFn(sig, speed, adaV, rho, v0Hat)<<std::endl;
                                                                     ^
In file included from /usr/include/c++/5/random:51:0,
                 from /usr/include/c++/5/bits/stl_algo.h:66,
                 from /usr/include/c++/5/algorithm:62,
                 from ../FunctionalUtilities/catch.hpp:76,
                 from test.cpp:2:
/usr/include/c++/5/bits/random.tcc:1963:5: note: candidate: template<class _RealType, class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::lognormal_distribution<_RealType>&)
     operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     ^
/usr/include/c++/5/bits/random.tcc:1963:5: note:   template argument deduction/substitution failed:
test.cpp:1359:69: note:   mismatched types ‘const std::lognormal_distribution<_RealType>’ and ‘void’
     std::cout<<"obj at actual: "<<objFn(sig, speed, adaV, rho, v0Hat)<<std::endl;
                                                                     ^
In file included from /usr/include/c++/5/random:51:0,
                 from /usr/include/c++/5/bits/stl_algo.h:66,
                 from /usr/include/c++/5/algorithm:62,
                 from ../FunctionalUtilities/catch.hpp:76,
                 from test.cpp:2:
/usr/include/c++/5/bits/random.tcc:1667:5: note: candidate: template<class _IntType, class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::binomial_distribution<_IntType>&)
     operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     ^
/usr/include/c++/5/bits/random.tcc:1667:5: note:   template argument deduction/substitution failed:
test.cpp:1359:69: note:   mismatched types ‘const std::binomial_distribution<_IntType>’ and ‘void’
     std::cout<<"obj at actual: "<<objFn(sig, speed, adaV, rho, v0Hat)<<std::endl;
                                                                     ^
In file included from /usr/include/c++/5/random:51:0,
                 from /usr/include/c++/5/bits/stl_algo.h:66,
                 from /usr/include/c++/5/algorithm:62,
                 from ../FunctionalUtilities/catch.hpp:76,
                 from test.cpp:2:
/usr/include/c++/5/bits/random.tcc:1400:5: note: candidate: template<class _IntType, class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::poisson_distribution<_IntType>&)
     operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     ^
/usr/include/c++/5/bits/random.tcc:1400:5: note:   template argument deduction/substitution failed:
test.cpp:1359:69: note:   mismatched types ‘const std::poisson_distribution<_IntType>’ and ‘void’
     std::cout<<"obj at actual: "<<objFn(sig, speed, adaV, rho, v0Hat)<<std::endl;
                                                                     ^
In file included from /usr/include/c++/5/random:51:0,
                 from /usr/include/c++/5/bits/stl_algo.h:66,
                 from /usr/include/c++/5/algorithm:62,
                 from ../FunctionalUtilities/catch.hpp:76,
                 from test.cpp:2:
/usr/include/c++/5/bits/random.tcc:1195:5: note: candidate: template<class _IntType, class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::negative_binomial_distribution<_IntType>&)
     operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     ^
/usr/include/c++/5/bits/random.tcc:1195:5: note:   template argument deduction/substitution failed:
test.cpp:1359:69: note:   mismatched types ‘const std::negative_binomial_distribution<_IntType>’ and ‘void’
     std::cout<<"obj at actual: "<<objFn(sig, speed, adaV, rho, v0Hat)<<std::endl;
                                                                     ^
In file included from /usr/include/c++/5/random:51:0,
                 from /usr/include/c++/5/bits/stl_algo.h:66,
                 from /usr/include/c++/5/algorithm:62,
                 from ../FunctionalUtilities/catch.hpp:76,
                 from test.cpp:2:
/usr/include/c++/5/bits/random.tcc:831:5: note: candidate: template<class _RandomNumberEngine, long unsigned int __k, class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::shuffle_order_engine<_RandomNumberEngine, __k>&)
     operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     ^
/usr/include/c++/5/bits/random.tcc:831:5: note:   template argument deduction/substitution failed:
test.cpp:1359:69: note:   mismatched types ‘const std::shuffle_order_engine<_RandomNumberEngine, __k>’ and ‘void’
     std::cout<<"obj at actual: "<<objFn(sig, speed, adaV, rho, v0Hat)<<std::endl;
                                                                     ^
In file included from /usr/include/c++/5/random:51:0,
                 from /usr/include/c++/5/bits/stl_algo.h:66,
                 from /usr/include/c++/5/algorithm:62,
                 from ../FunctionalUtilities/catch.hpp:76,
                 from test.cpp:2:
/usr/include/c++/5/bits/random.tcc:702:5: note: candidate: template<class _RandomNumberEngine, long unsigned int __p, long unsigned int __r, class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::discard_block_engine<_RandomNumberEngine, __p, __r>&)
     operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     ^
/usr/include/c++/5/bits/random.tcc:702:5: note:   template argument deduction/substitution failed:
test.cpp:1359:69: note:   mismatched types ‘const std::discard_block_engine<_RandomNumberEngine, __p, __r>’ and ‘void’
     std::cout<<"obj at actual: "<<objFn(sig, speed, adaV, rho, v0Hat)<<std::endl;
                                                                     ^
In file included from /usr/include/c++/5/random:51:0,
                 from /usr/include/c++/5/bits/stl_algo.h:66,
                 from /usr/include/c++/5/algorithm:62,
                 from ../FunctionalUtilities/catch.hpp:76,
                 from test.cpp:2:
/usr/include/c++/5/bits/random.tcc:632:5: note: candidate: template<class _UIntType, long unsigned int __w, long unsigned int __s, long unsigned int __r, class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::subtract_with_carry_engine<_UIntType, __w, __s, __r>&)
     operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     ^
/usr/include/c++/5/bits/random.tcc:632:5: note:   template argument deduction/substitution failed:
test.cpp:1359:69: note:   mismatched types ‘const std::subtract_with_carry_engine<_UIntType, __w, __s, __r>’ and ‘void’
     std::cout<<"obj at actual: "<<objFn(sig, speed, adaV, rho, v0Hat)<<std::endl;
                                                                     ^
In file included from /usr/include/c++/5/random:51:0,
                 from /usr/include/c++/5/bits/stl_algo.h:66,
                 from /usr/include/c++/5/algorithm:62,
                 from ../FunctionalUtilities/catch.hpp:76,
                 from test.cpp:2:
/usr/include/c++/5/bits/random.tcc:156:5: note: candidate: template<class _UIntType, _UIntType __a, _UIntType __c, _UIntType __m, class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::linear_congruential_engine<_UIntType, __a, __c, __m>&)
     operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     ^
/usr/include/c++/5/bits/random.tcc:156:5: note:   template argument deduction/substitution failed:
test.cpp:1359:69: note:   mismatched types ‘const std::linear_congruential_engine<_UIntType, __a, __c, __m>’ and ‘void’
     std::cout<<"obj at actual: "<<objFn(sig, speed, adaV, rho, v0Hat)<<std::endl;
                                                                     ^
In file included from /usr/include/c++/5/random:51:0,
                 from /usr/include/c++/5/bits/stl_algo.h:66,
                 from /usr/include/c++/5/algorithm:62,
                 from ../FunctionalUtilities/catch.hpp:76,
                 from test.cpp:2:
/usr/include/c++/5/bits/random.tcc:2598:5: note: candidate: template<class _RealType, class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::extreme_value_distribution<_RealType>&)
     operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     ^
/usr/include/c++/5/bits/random.tcc:2598:5: note:   template argument deduction/substitution failed:
test.cpp:1359:69: note:   mismatched types ‘const std::extreme_value_distribution<_RealType>’ and ‘void’
     std::cout<<"obj at actual: "<<objFn(sig, speed, adaV, rho, v0Hat)<<std::endl;
                                                                     ^
In file included from /usr/include/c++/5/random:51:0,
                 from /usr/include/c++/5/bits/stl_algo.h:66,
                 from /usr/include/c++/5/algorithm:62,
                 from ../FunctionalUtilities/catch.hpp:76,
                 from test.cpp:2:
/usr/include/c++/5/bits/random.tcc:2522:5: note: candidate: template<class _RealType, class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::weibull_distribution<_RealType>&)
     operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     ^
/usr/include/c++/5/bits/random.tcc:2522:5: note:   template argument deduction/substitution failed:
test.cpp:1359:69: note:   mismatched types ‘const std::weibull_distribution<_RealType>’ and ‘void’
     std::cout<<"obj at actual: "<<objFn(sig, speed, adaV, rho, v0Hat)<<std::endl;
                                                                     ^
In file included from /usr/include/c++/5/random:51:0,
                 from /usr/include/c++/5/bits/stl_algo.h:66,
                 from /usr/include/c++/5/algorithm:62,
                 from ../FunctionalUtilities/catch.hpp:76,
                 from test.cpp:2:
/usr/include/c++/5/bits/random.tcc:1731:5: note: candidate: template<class _RealType, class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::exponential_distribution<_RealType>&)
     operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     ^
/usr/include/c++/5/bits/random.tcc:1731:5: note:   template argument deduction/substitution failed:
test.cpp:1359:69: note:   mismatched types ‘const std::exponential_distribution<_RealType>’ and ‘void’
     std::cout<<"obj at actual: "<<objFn(sig, speed, adaV, rho, v0Hat)<<std::endl;
                                                                     ^
In file included from /usr/include/c++/5/random:51:0,
                 from /usr/include/c++/5/bits/stl_algo.h:66,
                 from /usr/include/c++/5/algorithm:62,
                 from ../FunctionalUtilities/catch.hpp:76,
                 from test.cpp:2:
/usr/include/c++/5/bits/random.tcc:2444:5: note: candidate: template<class _RealType1, class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::gamma_distribution<_RealType>&)
     operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     ^
/usr/include/c++/5/bits/random.tcc:2444:5: note:   template argument deduction/substitution failed:
test.cpp:1359:69: note:   mismatched types ‘const std::gamma_distribution<_RealType>’ and ‘void’
     std::cout<<"obj at actual: "<<objFn(sig, speed, adaV, rho, v0Hat)<<std::endl;
                                                                     ^
In file included from /usr/include/c++/5/random:51:0,
                 from /usr/include/c++/5/bits/stl_algo.h:66,
                 from /usr/include/c++/5/algorithm:62,
                 from ../FunctionalUtilities/catch.hpp:76,
                 from test.cpp:2:
/usr/include/c++/5/bits/random.tcc:1080:5: note: candidate: template<class _IntType, class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::geometric_distribution<_IntType>&)
     operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     ^
/usr/include/c++/5/bits/random.tcc:1080:5: note:   template argument deduction/substitution failed:
test.cpp:1359:69: note:   mismatched types ‘const std::geometric_distribution<_IntType>’ and ‘void’
     std::cout<<"obj at actual: "<<objFn(sig, speed, adaV, rho, v0Hat)<<std::endl;
                                                                     ^
In file included from /usr/include/c++/5/random:51:0,
                 from /usr/include/c++/5/bits/stl_algo.h:66,
                 from /usr/include/c++/5/algorithm:62,
                 from ../FunctionalUtilities/catch.hpp:76,
                 from test.cpp:2:
/usr/include/c++/5/bits/random.tcc:1898:5: note: candidate: template<class _RealType1, class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::normal_distribution<_RealType>&)
     operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     ^
/usr/include/c++/5/bits/random.tcc:1898:5: note:   template argument deduction/substitution failed:
test.cpp:1359:69: note:   mismatched types ‘const std::normal_distribution<_RealType>’ and ‘void’
     std::cout<<"obj at actual: "<<objFn(sig, speed, adaV, rho, v0Hat)<<std::endl;
                                                                     ^
In file included from /usr/include/c++/5/random:51:0,
                 from /usr/include/c++/5/bits/stl_algo.h:66,
                 from /usr/include/c++/5/algorithm:62,
                 from ../FunctionalUtilities/catch.hpp:76,
                 from test.cpp:2:
/usr/include/c++/5/bits/random.tcc:998:5: note: candidate: template<class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::bernoulli_distribution&)
     operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     ^
/usr/include/c++/5/bits/random.tcc:998:5: note:   template argument deduction/substitution failed:
test.cpp:1359:40: note:   cannot convert ‘objFn.optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&)::<lambda(const auto:176& ...)> [with auto:176 = {double, double, double, double, double}; PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1253()::<lambda(const auto:246&, const auto:247&, const auto:248&, const auto:249&, const auto:250&, const auto:251&)>; DiscreteU = std::vector<double>](sig, speed, adaV, rho, v0Hat)’ (type ‘void’) to type ‘const std::bernoulli_distribution&’
     std::cout<<"obj at actual: "<<objFn(sig, speed, adaV, rho, v0Hat)<<std::endl;
                                        ^
In file included from /usr/include/c++/5/random:51:0,
                 from /usr/include/c++/5/bits/stl_algo.h:66,
                 from /usr/include/c++/5/algorithm:62,
                 from ../FunctionalUtilities/catch.hpp:76,
                 from test.cpp:2:
/usr/include/c++/5/bits/random.tcc:2123:5: note: candidate: template<class _RealType, class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::cauchy_distribution<_RealType>&)
     operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     ^
/usr/include/c++/5/bits/random.tcc:2123:5: note:   template argument deduction/substitution failed:
test.cpp:1359:69: note:   mismatched types ‘const std::cauchy_distribution<_RealType>’ and ‘void’
     std::cout<<"obj at actual: "<<objFn(sig, speed, adaV, rho, v0Hat)<<std::endl;
                                                                     ^
In file included from /usr/include/c++/5/random:51:0,
                 from /usr/include/c++/5/bits/stl_algo.h:66,
                 from /usr/include/c++/5/algorithm:62,
                 from ../FunctionalUtilities/catch.hpp:76,
                 from test.cpp:2:
/usr/include/c++/5/bits/random.tcc:936:5: note: candidate: template<class _RealType, class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::uniform_real_distribution<_IntType>&)
     operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     ^
/usr/include/c++/5/bits/random.tcc:936:5: note:   template argument deduction/substitution failed:
test.cpp:1359:69: note:   mismatched types ‘const std::uniform_real_distribution<_IntType>’ and ‘void’
     std::cout<<"obj at actual: "<<objFn(sig, speed, adaV, rho, v0Hat)<<std::endl;
                                                                     ^
In file included from /usr/include/c++/5/random:51:0,
                 from /usr/include/c++/5/bits/stl_algo.h:66,
                 from /usr/include/c++/5/algorithm:62,
                 from ../FunctionalUtilities/catch.hpp:76,
                 from test.cpp:2:
/usr/include/c++/5/bits/random.tcc:877:5: note: candidate: template<class _IntType, class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::uniform_int_distribution<_IntType>&)
     operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     ^
/usr/include/c++/5/bits/random.tcc:877:5: note:   template argument deduction/substitution failed:
test.cpp:1359:69: note:   mismatched types ‘const std::uniform_int_distribution<_IntType>’ and ‘void’
     std::cout<<"obj at actual: "<<objFn(sig, speed, adaV, rho, v0Hat)<<std::endl;
                                                                     ^
In file included from /usr/include/c++/5/random:51:0,
                 from /usr/include/c++/5/bits/stl_algo.h:66,
                 from /usr/include/c++/5/algorithm:62,
                 from ../FunctionalUtilities/catch.hpp:76,
                 from test.cpp:2:
/usr/include/c++/5/bits/random.tcc:477:5: note: candidate: template<class _UIntType1, long unsigned int __w1, long unsigned int __n1, long unsigned int __m1, long unsigned int __r1, _UIntType1 __a1, long unsigned int __u1, _UIntType1 __d1, long unsigned int __s1, _UIntType1 __b1, long unsigned int __t1, _UIntType1 __c1, long unsigned int __l1, _UIntType1 __f1, class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d, __s, __b, __t, __c, __l, __f>&)
     operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     ^
/usr/include/c++/5/bits/random.tcc:477:5: note:   template argument deduction/substitution failed:
test.cpp:1359:69: note:   mismatched types ‘const std::mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d, __s, __b, __t, __c, __l, __f>’ and ‘void’
     std::cout<<"obj at actual: "<<objFn(sig, speed, adaV, rho, v0Hat)<<std::endl;
                                                                     ^
In file included from /usr/include/c++/5/random:49:0,
                 from /usr/include/c++/5/bits/stl_algo.h:66,
                 from /usr/include/c++/5/algorithm:62,
                 from ../FunctionalUtilities/catch.hpp:76,
                 from test.cpp:2:
/usr/include/c++/5/bits/random.h:1269:5: note: candidate: template<class _RandomNumberEngine, long unsigned int __w, class _UIntType, class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::independent_bits_engine<_RandomNumberEngine, __w, _UIntType>&)
     operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     ^
/usr/include/c++/5/bits/random.h:1269:5: note:   template argument deduction/substitution failed:
test.cpp:1359:69: note:   mismatched types ‘const std::independent_bits_engine<_RandomNumberEngine, __w, _UIntType>’ and ‘void’
     std::cout<<"obj at actual: "<<objFn(sig, speed, adaV, rho, v0Hat)<<std::endl;
                                                                     ^
In file included from /usr/include/c++/5/istream:39:0,
                 from /usr/include/c++/5/sstream:38,
                 from ../FunctionalUtilities/catch.hpp:74,
                 from test.cpp:2:
/usr/include/c++/5/ostream:628:5: note: candidate: template<class _CharT, class _Traits, class _Tp> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&&, const _Tp&)
     operator<<(basic_ostream<_CharT, _Traits>&& __os, const _Tp& __x)
     ^
/usr/include/c++/5/ostream:628:5: note:   template argument deduction/substitution failed:
/usr/include/c++/5/ostream:574:5: note: candidate: template<class _Traits> std::basic_ostream<char, _Traits>& std::operator<<(std::basic_ostream<char, _Traits>&, const unsigned char*)
     operator<<(basic_ostream<char, _Traits>& __out, const unsigned char* __s)
     ^
/usr/include/c++/5/ostream:574:5: note:   template argument deduction/substitution failed:
test.cpp:1359:40: note:   cannot convert ‘objFn.optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&)::<lambda(const auto:176& ...)> [with auto:176 = {double, double, double, double, double}; PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1253()::<lambda(const auto:246&, const auto:247&, const auto:248&, const auto:249&, const auto:250&, const auto:251&)>; DiscreteU = std::vector<double>](sig, speed, adaV, rho, v0Hat)’ (type ‘void’) to type ‘const unsigned char*’
     std::cout<<"obj at actual: "<<objFn(sig, speed, adaV, rho, v0Hat)<<std::endl;
                                        ^
In file included from /usr/include/c++/5/istream:39:0,
                 from /usr/include/c++/5/sstream:38,
                 from ../FunctionalUtilities/catch.hpp:74,
                 from test.cpp:2:
/usr/include/c++/5/ostream:569:5: note: candidate: template<class _Traits> std::basic_ostream<char, _Traits>& std::operator<<(std::basic_ostream<char, _Traits>&, const signed char*)
     operator<<(basic_ostream<char, _Traits>& __out, const signed char* __s)
     ^
/usr/include/c++/5/ostream:569:5: note:   template argument deduction/substitution failed:
test.cpp:1359:40: note:   cannot convert ‘objFn.optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&)::<lambda(const auto:176& ...)> [with auto:176 = {double, double, double, double, double}; PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1253()::<lambda(const auto:246&, const auto:247&, const auto:248&, const auto:249&, const auto:250&, const auto:251&)>; DiscreteU = std::vector<double>](sig, speed, adaV, rho, v0Hat)’ (type ‘void’) to type ‘const signed char*’
     std::cout<<"obj at actual: "<<objFn(sig, speed, adaV, rho, v0Hat)<<std::endl;
                                        ^
In file included from /usr/include/c++/5/istream:39:0,
                 from /usr/include/c++/5/sstream:38,
                 from ../FunctionalUtilities/catch.hpp:74,
                 from test.cpp:2:
/usr/include/c++/5/ostream:556:5: note: candidate: template<class _Traits> std::basic_ostream<char, _Traits>& std::operator<<(std::basic_ostream<char, _Traits>&, const char*)
     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
     ^
/usr/include/c++/5/ostream:556:5: note:   template argument deduction/substitution failed:
test.cpp:1359:40: note:   cannot convert ‘objFn.optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&)::<lambda(const auto:176& ...)> [with auto:176 = {double, double, double, double, double}; PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1253()::<lambda(const auto:246&, const auto:247&, const auto:248&, const auto:249&, const auto:250&, const auto:251&)>; DiscreteU = std::vector<double>](sig, speed, adaV, rho, v0Hat)’ (type ‘void’) to type ‘const char*’
     std::cout<<"obj at actual: "<<objFn(sig, speed, adaV, rho, v0Hat)<<std::endl;
                                        ^
In file included from /usr/include/c++/5/ostream:638:0,
                 from /usr/include/c++/5/istream:39,
                 from /usr/include/c++/5/sstream:38,
                 from ../FunctionalUtilities/catch.hpp:74,
                 from test.cpp:2:
/usr/include/c++/5/bits/ostream.tcc:321:5: note: candidate: template<class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const char*)
     operator<<(basic_ostream<_CharT, _Traits>& __out, const char* __s)
     ^
/usr/include/c++/5/bits/ostream.tcc:321:5: note:   template argument deduction/substitution failed:
test.cpp:1359:40: note:   cannot convert ‘objFn.optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&)::<lambda(const auto:176& ...)> [with auto:176 = {double, double, double, double, double}; PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1253()::<lambda(const auto:246&, const auto:247&, const auto:248&, const auto:249&, const auto:250&, const auto:251&)>; DiscreteU = std::vector<double>](sig, speed, adaV, rho, v0Hat)’ (type ‘void’) to type ‘const char*’
     std::cout<<"obj at actual: "<<objFn(sig, speed, adaV, rho, v0Hat)<<std::endl;
                                        ^
In file included from /usr/include/c++/5/istream:39:0,
                 from /usr/include/c++/5/sstream:38,
                 from ../FunctionalUtilities/catch.hpp:74,
                 from test.cpp:2:
/usr/include/c++/5/ostream:539:5: note: candidate: template<class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const _CharT*)
     operator<<(basic_ostream<_CharT, _Traits>& __out, const _CharT* __s)
     ^
/usr/include/c++/5/ostream:539:5: note:   template argument deduction/substitution failed:
test.cpp:1359:69: note:   mismatched types ‘const _CharT*’ and ‘void’
     std::cout<<"obj at actual: "<<objFn(sig, speed, adaV, rho, v0Hat)<<std::endl;
                                                                     ^
In file included from /usr/include/c++/5/istream:39:0,
                 from /usr/include/c++/5/sstream:38,
                 from ../FunctionalUtilities/catch.hpp:74,
                 from test.cpp:2:
/usr/include/c++/5/ostream:519:5: note: candidate: template<class _Traits> std::basic_ostream<char, _Traits>& std::operator<<(std::basic_ostream<char, _Traits>&, unsigned char)
     operator<<(basic_ostream<char, _Traits>& __out, unsigned char __c)
     ^
/usr/include/c++/5/ostream:519:5: note:   template argument deduction/substitution failed:
test.cpp:1359:40: note:   cannot convert ‘objFn.optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&)::<lambda(const auto:176& ...)> [with auto:176 = {double, double, double, double, double}; PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1253()::<lambda(const auto:246&, const auto:247&, const auto:248&, const auto:249&, const auto:250&, const auto:251&)>; DiscreteU = std::vector<double>](sig, speed, adaV, rho, v0Hat)’ (type ‘void’) to type ‘unsigned char’
     std::cout<<"obj at actual: "<<objFn(sig, speed, adaV, rho, v0Hat)<<std::endl;
                                        ^
In file included from /usr/include/c++/5/istream:39:0,
                 from /usr/include/c++/5/sstream:38,
                 from ../FunctionalUtilities/catch.hpp:74,
                 from test.cpp:2:
/usr/include/c++/5/ostream:514:5: note: candidate: template<class _Traits> std::basic_ostream<char, _Traits>& std::operator<<(std::basic_ostream<char, _Traits>&, signed char)
     operator<<(basic_ostream<char, _Traits>& __out, signed char __c)
     ^
/usr/include/c++/5/ostream:514:5: note:   template argument deduction/substitution failed:
test.cpp:1359:40: note:   cannot convert ‘objFn.optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&)::<lambda(const auto:176& ...)> [with auto:176 = {double, double, double, double, double}; PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1253()::<lambda(const auto:246&, const auto:247&, const auto:248&, const auto:249&, const auto:250&, const auto:251&)>; DiscreteU = std::vector<double>](sig, speed, adaV, rho, v0Hat)’ (type ‘void’) to type ‘signed char’
     std::cout<<"obj at actual: "<<objFn(sig, speed, adaV, rho, v0Hat)<<std::endl;
                                        ^
In file included from /usr/include/c++/5/istream:39:0,
                 from /usr/include/c++/5/sstream:38,
                 from ../FunctionalUtilities/catch.hpp:74,
                 from test.cpp:2:
/usr/include/c++/5/ostream:508:5: note: candidate: template<class _Traits> std::basic_ostream<char, _Traits>& std::operator<<(std::basic_ostream<char, _Traits>&, char)
     operator<<(basic_ostream<char, _Traits>& __out, char __c)
     ^
/usr/include/c++/5/ostream:508:5: note:   template argument deduction/substitution failed:
test.cpp:1359:40: note:   cannot convert ‘objFn.optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&)::<lambda(const auto:176& ...)> [with auto:176 = {double, double, double, double, double}; PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1253()::<lambda(const auto:246&, const auto:247&, const auto:248&, const auto:249&, const auto:250&, const auto:251&)>; DiscreteU = std::vector<double>](sig, speed, adaV, rho, v0Hat)’ (type ‘void’) to type ‘char’
     std::cout<<"obj at actual: "<<objFn(sig, speed, adaV, rho, v0Hat)<<std::endl;
                                        ^
In file included from /usr/include/c++/5/istream:39:0,
                 from /usr/include/c++/5/sstream:38,
                 from ../FunctionalUtilities/catch.hpp:74,
                 from test.cpp:2:
/usr/include/c++/5/ostream:502:5: note: candidate: template<class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, char)
     operator<<(basic_ostream<_CharT, _Traits>& __out, char __c)
     ^
/usr/include/c++/5/ostream:502:5: note:   template argument deduction/substitution failed:
test.cpp:1359:40: note:   cannot convert ‘objFn.optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&)::<lambda(const auto:176& ...)> [with auto:176 = {double, double, double, double, double}; PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1253()::<lambda(const auto:246&, const auto:247&, const auto:248&, const auto:249&, const auto:250&, const auto:251&)>; DiscreteU = std::vector<double>](sig, speed, adaV, rho, v0Hat)’ (type ‘void’) to type ‘char’
     std::cout<<"obj at actual: "<<objFn(sig, speed, adaV, rho, v0Hat)<<std::endl;
                                        ^
In file included from /usr/include/c++/5/istream:39:0,
                 from /usr/include/c++/5/sstream:38,
                 from ../FunctionalUtilities/catch.hpp:74,
                 from test.cpp:2:
/usr/include/c++/5/ostream:497:5: note: candidate: template<class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, _CharT)
     operator<<(basic_ostream<_CharT, _Traits>& __out, _CharT __c)
     ^
/usr/include/c++/5/ostream:497:5: note:   template argument deduction/substitution failed:
test.cpp:1359:69: note:   deduced conflicting types for parameter ‘_CharT’ (‘char’ and ‘void’)
     std::cout<<"obj at actual: "<<objFn(sig, speed, adaV, rho, v0Hat)<<std::endl;
                                                                     ^
In file included from /usr/include/c++/5/bits/ios_base.h:46:0,
                 from /usr/include/c++/5/ios:42,
                 from /usr/include/c++/5/istream:38,
                 from /usr/include/c++/5/sstream:38,
                 from ../FunctionalUtilities/catch.hpp:74,
                 from test.cpp:2:
/usr/include/c++/5/system_error:209:5: note: candidate: template<class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::error_code&)
     operator<<(basic_ostream<_CharT, _Traits>& __os, const error_code& __e)
     ^
/usr/include/c++/5/system_error:209:5: note:   template argument deduction/substitution failed:
test.cpp:1359:40: note:   cannot convert ‘objFn.optioncal::getObjFn(PhiHatFn&&, LogCfFN&&, DiscreteU&&)::<lambda(const auto:176& ...)> [with auto:176 = {double, double, double, double, double}; PhiHatFn = optioncal::generateFOEstimate(const std::vector<_RealType>&, const std::vector<T>&, const AssetValue&, const Discount&, const Strike&) [with Strike = double; MarketPrice = double; AssetValue = double; Discount = double]::<lambda(const auto:175&)>; LogCfFN = ____C_A_T_C_H____T_E_S_T____1253()::<lambda(const auto:246&, const auto:247&, const auto:248&, const auto:249&, const auto:250&, const auto:251&)>; DiscreteU = std::vector<double>](sig, speed, adaV, rho, v0Hat)’ (type ‘void’) to type ‘const std::error_code&’
     std::cout<<"obj at actual: "<<objFn(sig, speed, adaV, rho, v0Hat)<<std::endl;
                                        ^
In file included from /usr/include/c++/5/string:52:0,
                 from /usr/include/c++/5/bits/locale_classes.h:40,
                 from /usr/include/c++/5/bits/ios_base.h:41,
                 from /usr/include/c++/5/ios:42,
                 from /usr/include/c++/5/istream:38,
                 from /usr/include/c++/5/sstream:38,
                 from ../FunctionalUtilities/catch.hpp:74,
                 from test.cpp:2:
/usr/include/c++/5/bits/basic_string.h:5172:5: note: candidate: template<class _CharT, class _Traits, class _Alloc> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&)
     operator<<(basic_ostream<_CharT, _Traits>& __os,
     ^
/usr/include/c++/5/bits/basic_string.h:5172:5: note:   template argument deduction/substitution failed:
test.cpp:1359:69: note:   mismatched types ‘const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>’ and ‘void’
     std::cout<<"obj at actual: "<<objFn(sig, speed, adaV, rho, v0Hat)<<std::endl;
                                                                     ^
